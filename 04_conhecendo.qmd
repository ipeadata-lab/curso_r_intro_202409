---
# Importação e exportação de dados
title: "Conhecendo a base de dados"
code-link: true
---

::: callout-warning
Página em construção! Em breve.
:::

::: callout
Conceitos prévios importantes:

-   [Como importar bases de dados?](03_importacao.qmd)

-   Tipos de variáveis

-   Valores faltantes
:::

Nesta seção, vamos conhecer algumas funções que nos ajudarão a conhecer um pouco mais sobre a base de dados que estamos trabalhando.

Essa etapa é importante para:

-   Entendermos qual é a estrutura da base de dados: quais são as variáveis presentes, o que cada linha representa, entre outros.

-   Descobrir se há valores faltantes, em quais variáveis eles estão presentes e em que proporção.

-   Identificar o que é necessário fazer para arrumar a base de dados (isso vamos explorar posteriormente).

::: callout
**Sugestão:** Ao longo deste capítulo, sugerimos que tente identificar o que é necessário para arrumar essa base de dados.
:::

Vamos começar importando a base de dados que utilizaremos:

```{r}
#| message: false
library(tidyverse)
dados <- read_csv2("dados/sidrar_4092_bruto_2.csv")
```

## Estrutura da base de dados

Vamos começar conhecendo a estrutura da base de dados. Para isso, existem algumas funções para saber o número de colunas e linhas, os nomes das colunas, entre outras informações. Algumas delas apresentam as mesmas informações, mas de formas diferentes.

```{r}
# Número de colunas
ncol(dados)

# Número de linhas
nrow(dados)

# Número de linhas e colunas
dim(dados)

# Nomes das colunas
names(dados)
```

A função `glimpse()` do pacote `{dplyr}` apresenta informações como: número de linhas, número de colunas, nome e tipo de cada coluna, e os primeiros valores de cada coluna. Porém o texto resultante dependerá da largura do *Console*:

```{r}
#| eval: false
glimpse(dados)
```

![Captura de tela: Resultado da função glimpse()](images/04_glimpse.png){fig-align="center"}

### View

Uma outra função que é interessante é a `View()`. Ela nos permite visualizar a base de dados em uma nova janela, em formato de tabela. Porém, é importante tomar cuidado ao usá-la com bases de dados grandes, pois pode travar o RStudio dependendo.

Outra forma de acessar o View é clicando na linha do objeto no painel *Environment* do RStudio:

![Captura de tela: Onde clicamos para abrir o View](images/04_environment.png){fig-align="center"}

```{r}
#| eval: false
View(dados)
```

![Gravação da tela - Usando o View](images/04_view.gif){fig-align="center"}

## Sumário das variáveis

Em funções apresentadas anteriormente, como a `names()`, já conseguimos ter uma ideia de quais são as variáveis da base de dados. Mas é interessante ter mais informações, como: tipo de variável, quantidade de valores faltantes, entre outros.

Nessa etapa, conheceremos algumas funções que nos ajudarão a ter essas informações. Algumas apresentam as mesmas informações, mas de formas diferentes. Portanto, é interessante conhecer algumas delas, e escolher qual é a que melhor atende às nossas necessidades.

::: callout-important
Cuidado: as funções apresentadas a seguir calculam algumas estatísticas descritivas (como a média, mediana, desvio padrão, valor mínimo, valor máximo, entre outras) em variáveis numéricas. Porém, ainda não "arrumamos" a base de dados (faremos isso no capítulo [Transformando dados](05_transformacao.qmd)), e os dados ainda não estão adequados para esses cálculos.

Alguns exemplos:

-   Várias colunas numéricas representam o código de uma categoria, e não faz sentido calcular a média desses códigos.

-   A variável `valor` está relacionada com a variável `unidade_de_medida`. Neste momento, a tabela apresenta valores com diferentes unidades de medida, e não faz sentido calcular a média desses valores.

```{r}
unique(dados$`Unidade de Medida`)
```

Falaremos sobre o cálculo de estatísticas descritivas no capítulo [Analisando dados](07_analise.qmd).
:::

### summary()

A função `summary()` é uma função do R base (ou seja, não precisamos carregar nenhum pacote para usá-la), e ela nos dá um sumário das variáveis da base de dados.

```{r}
summary(dados)
```

### skimr::skim()

O pacote `{skimr}` tem uma função chamada `skim()` que nos dá um sumário das variáveis da base de dados.

É interesante salvar o resultado da função em um objeto, para que possamos acessar as informações posteriormente, em formato de tabela.

```{r}
library(skimr)
skim_dados <- skim(dados)
```

O resultado da função `skim()` é dividido em duas partes:

-   *Data summary*: informações gerais sobre a base de dados, como: nome do objeto, número de linhas, número de colunas, quantas colunas temos em cada tipo, e se a base está agrupada por alguma variável[^1].

-   **Variable type**: para cada tipo de variável presente na base de dados, temos informações como:

    -   `skim_variable`: nome da variável.
    -   `n_missing`: número de valores faltantes.
    -   `complete_rate`: proporção de valores não faltantes (está relacionada com a `n_missing`).
    -   Outras colunas específicas segundo o tipo de variável.

[^1]: Ainda não abordamos o conceito de grupos, então isso ficará mais claro posteriormente.

A seguir, estão as informações que a função `skim()` retorna para os tipos de variáveis mais frequentes:

-   *character* (dados de texto):
    -   `min`: número mínimo de caracteres.
    -   `max`: número máximo de caracteres.
    -   `empty`: número de linhas contendo valores vazios (um valor vazio é um valor que contém apenas `""`).
    -   `n_unique`: número de valores únicos.
    -   `whitespace`: número de linhas contendo apenas espaços em branco.
-   *numeric* (dados numéricos):
    -   `mean`: média.
    -   `sd`: desvio padrão.
    -   `p0`: valor mínimo.
    -   `p25`: primeiro quartil.
    -   `p50`: mediana.
    -   `p75`: terceiro quartil.
    -   `p100`: valor máximo.
    -   `hist`: histograma dos valores.
-   *date* (datas):
    -   `min`: data mínima.
    -   `max`: data máxima.
    -   `median`: data mediana.
    -   `n_unique`: número de datas únicas.
-   *factor* (dados categóricos):
    -   `ordered`: os níveis do fator estão ordenados?
    -   `n_unique`: número de valores únicos do fator.
    -   `top_counts`: os valores mais frequentes do fator.
-   *logical* (dados booleanos):
    -   `mean`: média dos valores, considerando que `TRUE` é 1 e `FALSE` é 0.
    -   `count`: contagem dos valores `TRUE` e `FALSE`.

A seguir, podemos ver o resultado da função `skim()`:

```{r}
skim_dados
```

## Valores faltantes (`NA`)

A presença de valores faltantes é algo comum em bases de dados. Eles podem ocorrer por diversos motivos, como: não temos a informação, erros de digitação, entre outros.

É importante identificar onde estão esses valores, para que possamos nos atentar em análises futuras.

Existem algumas funções que nos ajudam a identificar a presença de valores faltantes na base de dados. O pacote `{naniar}` apresenta funções úteis para isso: a função `gg_miss_var()` cria uma visualição apresentando o nome das variáveis da base de dados, assim como a quantidade de valores faltantes em cada uma delas.

```{r}
#| label: exemplo-naniar
#| message: false
library(naniar)
# Valores absolutos
gg_miss_var(dados)

# Valores relativos
gg_miss_var(dados, show_pct = TRUE)
```

## 

Em situações onde trabalharmos com dados que possuem um número de linhas muito grande, não podemos utilizar a função `View()` para ver a tabela inteira.

Nesse caso, podemos ser interessante usar funções que retornam apenas algumas linhas da base de dados, como `head()`, `tail()`, `slice_sample()`, entre outras.

Antes de usá-las, vamos adicionar uma coluna que represente o número da linha, para que seja mais fácil identificar as linhas que estamos selecionando:

```{r}
dados_com_n_linha <- rowid_to_column(dados, "n_linha")
```

Agora podemos usar as funções para retornar algumas linhas da base de dados. Observe os resultados apresentados, e os valores na coluna `n_linha`:

```{r}
# Exibindo as primeiras linhas
head(dados_com_n_linha)

# Exibindo as últimas linhas
tail(dados_com_n_linha)

# "Sorteando" linhas
slice_sample(dados_com_n_linha, n = 5)
```

## Conhecendo os valores únicos de uma coluna

Para variáveis categóricas ou de texto, é interessante conhecer os valores únicos presentes.

Para acessar uma coluna específica, utilize o `$`. Elas retornarão como vetores, e poderemos usar as funções que já conhecemos. Ex: `dados$ano`.

Dica: após escrever o `nome_do_dataframe$`, aperte `tab` para que o RStudio faça sugestões de colunas da base.

A função `unique()` retorna os valores únicos de um vetor. Exemplo:

```{r}
unique(dados$`Unidade de Medida`)
```
