[
  {
    "objectID": "15_ipeadatalake.html",
    "href": "15_ipeadatalake.html",
    "title": "Acessando dados com o {ipeadatalake}",
    "section": "",
    "text": "Em termos gerais, um “data lake” é um conjunto de bases de dados armazenadas num repositório que permite rápido e fácil acesso e integração entre bases diferentes. O Ipea vem gradativamente progredindo na construção e integração do seu data lake, que inclui uma ampla gama de bases de dados públicos, e registros administrativos restritos do governo federal e instituições parceiras.\nTodos esses dados podem ser acessados diretamente no storage6, como visto na aula anterior. No entanto, uma maneira mais fácil de acessar esses dados é pelo pacote de R {ipeadatalake}. Nesta aula você vai aprender alguns exemplos de como usar o pacote {ipeadatalake} no R.",
    "crumbs": [
      "Data Lake do Ipea",
      "Acessando dados com o {ipeadatalake}"
    ]
  },
  {
    "objectID": "15_ipeadatalake.html#trabalhando-com-dados-maior-do-que-a-ram",
    "href": "15_ipeadatalake.html#trabalhando-com-dados-maior-do-que-a-ram",
    "title": "Acessando dados com o {ipeadatalake}",
    "section": "Trabalhando com dados maior do que a RAM",
    "text": "Trabalhando com dados maior do que a RAM\nAssim como o pacote {censobr}, que vimos na aula anterior, o pacote {ipeadatalake} também facilita que usuários trabalhem com grandes bases de dados de maneira eficiente utilizando pouca memória RAM a partir de integração com pacotes como {dplyr}, {arrow} e {duckdb}.\n\n\n\n\n\n\n\n\n\n\n\nImportante\n\n\n\nPor padrão, as funções do {ipeadatalake} sempre retoram um objeto tipo Dataset / ArrowObject.\n\n\nVamos então partir para exemplos na prática, e começar carregando as bibliotecas que vamos usar.\n\n# carrega bibliotecas\nlibrary(ipeadatalake)\nlibrary(arrow)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(geobr)",
    "crumbs": [
      "Data Lake do Ipea",
      "Acessando dados com o {ipeadatalake}"
    ]
  },
  {
    "objectID": "00_projeto_eda.html",
    "href": "00_projeto_eda.html",
    "title": "Projeto de Análise Exploratória de Dados com R",
    "section": "",
    "text": "Com o objetivo de praticar os conceitos apresentados no curso, recomendamos que as pessoas participantes realizem um projeto de análise exploratória de dados paralelamente às aulas. Este projeto permitirá que você consolide o aprendizado adquirido, explorando dados reais e aplicando as ferramentas de análise discutidas em aula.\nAproveite o projeto para aplicar os conceitos apresentados no curso e para explorar novas funcionalidades do R. Ao se deparar com uma dúvida, não esqueça de anotar e perguntar durante as aulas para os monitores. A equipe do curso está disponível para auxiliar com dúvidas sobre o projeto até a data final do curso.\nOs passos a seguir podem te ajudar a organizar o projeto de análise exploratória de dados:\n\nEscolha um conjunto de dados: Você pode escolher um conjunto de dados de sua preferência. Caso não tenha um conjunto de dados em mente, sugerimos que escolha um dos conjuntos de dados disponíveis nos seguintes pacotes:\n\nsidrar: Acesso aos dados disponíveis no SIDRA - Sistema IBGE de Recuperação Automática.\ncensobr: Dados de censos demográficos brasileiros.\nipeadatar: Acesso aos dados disponibilizados no Ipeadata.\nflightsbr: Dados de vôos no Brasil.\nPNADcIBGE: Dados da PNAD Contínua do IBGE.\nmicrodatasus: Acesso aos microdados do DataSUS.\n\nCrie um projeto no RStudio: Crie um projeto no RStudio para armazenar os códigos e arquivos do projeto. Esse procedimento será descrito na aula Conhecendo o R e o RStudio.\nImporte os dados: Importe o conjunto de dados escolhido para o R. Esse procedimento será descrito na aula Importando dados.\nObjetivo da análise: Defina o objetivo da análise exploratória de dados. Quais são as perguntas que você deseja responder a partir desta base de dados?\nDescreva o conjunto de dados brutos: Faça uma breve descrição do conjunto de dados escolhido. Qual é a unidade observacional (o que cada linha significa)? Quais são as variáveis presentes? Quais são os tipos de variáveis? Você pode incluir tabelas ou gráficos para facilitar a visualização das variáveis e sua distribuição. O que precisa ser feito para deixar a tabela “limpa”, ou seja, pronta para a análise?\nLimpeza dos dados: Utilize o que você aprendeu na etapa passada para limpar o conjunto de dados. Isso pode incluir lidar com dados ausentes, remover outliers ou inconsistências. A aula Transformando dados será útil nessa etapa.\nRealize a análise exploratória de dados: Utilize os conceitos apresentados no curso para realizar a análise exploratória de dados do conjunto escolhido. Lembre-se do objetivo que você definiu anteriormente e busque responder às perguntas que você levantou. Inclua gráficos e tabelas para apresentar os resultados e escreva suas interpretações ao longo do processo. As aulas Análise exploratória de dados e Visualizando dados serão úteis nessa etapa.\nPróximos passos: Você pode apresentar os resultados para outras pessoas envolvidas no curso (participantes, ministrantes, monitores) e solicitar feedbacks.",
    "crumbs": [
      "Pré-curso",
      "Projeto de Análise Exploratória de Dados com R"
    ]
  },
  {
    "objectID": "07_visualizacao_exemplo.html",
    "href": "07_visualizacao_exemplo.html",
    "title": "Exemplo prático: Visualização",
    "section": "",
    "text": "Nesse exemplo, o objetivo é criar um gráfico de colunas para visualizar a proporção de pessoas por categoria de ocupação para cada estado, em um trimestre específico (nesse caso, utilizaremos os dados do trimestre mais recente)\nPara isso, precisamos calcular a proporção de pessoas por categoria de ocupação, em cada estado. Depois, representaremos esses valores em um gráfico de colunas.\nEsse é o gráfico que queremos criar:",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Exemplo prático: Visualização"
    ]
  },
  {
    "objectID": "07_visualizacao_exemplo.html#objetivo",
    "href": "07_visualizacao_exemplo.html#objetivo",
    "title": "Exemplo prático: Visualização",
    "section": "",
    "text": "Nesse exemplo, o objetivo é criar um gráfico de colunas para visualizar a proporção de pessoas por categoria de ocupação para cada estado, em um trimestre específico (nesse caso, utilizaremos os dados do trimestre mais recente)\nPara isso, precisamos calcular a proporção de pessoas por categoria de ocupação, em cada estado. Depois, representaremos esses valores em um gráfico de colunas.\nEsse é o gráfico que queremos criar:",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Exemplo prático: Visualização"
    ]
  },
  {
    "objectID": "07_visualizacao_exemplo.html#pacotes-necessários",
    "href": "07_visualizacao_exemplo.html#pacotes-necessários",
    "title": "Exemplo prático: Visualização",
    "section": "Pacotes necessários",
    "text": "Pacotes necessários\n\n1library(ggplot2)\n2library(dplyr)\n3library(ipeaplot)\n\n\n1\n\nPacote para visualização de dados\n\n2\n\nPacote para transformação de dados\n\n3\n\nPacote para o padrão Ipea",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Exemplo prático: Visualização"
    ]
  },
  {
    "objectID": "07_visualizacao_exemplo.html#importando-os-dados",
    "href": "07_visualizacao_exemplo.html#importando-os-dados",
    "title": "Exemplo prático: Visualização",
    "section": "Importando os dados",
    "text": "Importando os dados\n\n\n\n\n\n\nExpanda para fazer download da base de dados\n\n\n\n\n\nCaso não tenha o arquivo da tabela que utilizaremos, você pode baixar aqui, e copiar o arquivo para a pasta dados_output do seu projeto.\nOutra opção é executar o código abaixo:\n\ndownload.file(\n1  url = \"https://github.com/ipeadata-lab/curso_r_intro_202409/raw/refs/heads/main/dados_output/sidra_4092_arrumado.rds\",\n2  destfile = \"dados_output/sidra_4092_arrumado.rds\",\n3  mode = \"wb\"\n  )\n\n\n1\n\nURL que desejamos baixar\n\n2\n\nCaminho onde queremos baixar o arquivo (diretório + nome do arquivo + extensão do arquivo)\n\n3\n\nConfiguração que evita corromper arquivos binários.\n\n\n\n\n\n\n\n\ndados &lt;- readr::read_rds(\"dados_output/sidra_4092_arrumado.rds\")\n\ndados_tri_recente &lt;- dados |&gt;  \n1  filter(trimestre_inicio == max(trimestre_inicio))\n\n\n1\n\nFiltrando os dados para o trimestre mais recente",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Exemplo prático: Visualização"
    ]
  },
  {
    "objectID": "07_visualizacao_exemplo.html#preparando-os-dados",
    "href": "07_visualizacao_exemplo.html#preparando-os-dados",
    "title": "Exemplo prático: Visualização",
    "section": "Preparando os dados",
    "text": "Preparando os dados\nÉ importante entender as categorias de ocupação que temos disponíveis na base de dados, se não podemos correr o risco de contar valores mais de uma vez:\n\nPortanto, para obter o total, precisaremos apenas das seguinte categorias de ocupação:\n\nmil_pessoas_forca_de_trabalho_ocupada: Pessoas dentro da força de trabalho, que estão ocupadas.\nmil_pessoas_forca_de_trabalho_desocupada: Pessoas dentro da força de trabalho, que estão desocupadas.\nmil_pessoas_fora_da_forca_de_trabalho: Pessoas fora da força de trabalho.\n\nPrimeiro, vamos selecionar as colunas que utilizaremos para esse gráfico, para facilitar a preparação dos dados:\n\n1dados_selecionados &lt;- dados_tri_recente |&gt;\n2  select(\n    regiao,\n    uf,\n    trimestre,\n    mil_pessoas_forca_de_trabalho_ocupada,\n    mil_pessoas_forca_de_trabalho_desocupada,\n    mil_pessoas_fora_da_forca_de_trabalho,\n  )\n\n3head(dados_selecionados)\n\n\n1\n\nUtilizando os dados já filtrados para o trimestre mais recente.\n\n2\n\nSelecionando as colunas que utilizaremos.\n\n3\n\nPrimeiras linhas da tabela resultante\n\n\n\n\n# A tibble: 6 × 6\n  regiao       uf        trimestre mil_pessoas_forca_de…¹ mil_pessoas_forca_de…²\n  &lt;chr&gt;        &lt;chr&gt;     &lt;chr&gt;                      &lt;dbl&gt;                  &lt;dbl&gt;\n1 Nordeste     Pernambu… 2º trime…                   3774                    492\n2 Nordeste     Bahia     2º trime…                   6159                    769\n3 Centro Oeste Distrito… 2º trime…                   1613                    174\n4 Sudeste      Rio de J… 2º trime…                   8226                    878\n5 Nordeste     Sergipe   2º trime…                   1016                    102\n6 Nordeste     Rio Gran… 2º trime…                   1441                    144\n# ℹ abbreviated names: ¹​mil_pessoas_forca_de_trabalho_ocupada,\n#   ²​mil_pessoas_forca_de_trabalho_desocupada\n# ℹ 1 more variable: mil_pessoas_fora_da_forca_de_trabalho &lt;dbl&gt;\n\n\nPara calcular a proporção de pessoas por categoria de ocupação em cada estado, precisamos usar os valores que estão nas colunas mil_pessoas_forca_de_trabalho_ocupada, mil_pessoas_forca_de_trabalho_desocupada e mil_pessoas_fora_da_forca_de_trabalho. Porém, para fazer isso, precisamos transformar a tabela em formato longo.\nVamos transformar a tabela em formato longo, utilizando a função pivot_longer():\n\n1dados_longos &lt;- dados_selecionados |&gt;\n2  tidyr::pivot_longer(\n3    cols = tidyselect::starts_with(\"mil_pessoas\"),\n4    names_to = \"categoria\",\n5    values_to = \"mil_pessoas\",\n6    names_prefix = \"mil_pessoas_\"\n  )\n\n7head(dados_longos)\n\n\n1\n\nUtilizando os dados já filtrados para o trimestre mais recente, e selecionados com colunas relevantes\n\n2\n\nVamos transformar em formato longo para facilitar a criação do gráfico.\n\n3\n\nSelecionando as colunas que começam com “mil_pessoas” para transformar em formato longo.\n\n4\n\nNome da nova coluna que conterá as categorias.\n\n5\n\nNome da nova coluna que conterá os valores.\n\n6\n\nPrefixo que será removido do nome das colunas.\n\n7\n\nPrimeiras linhas da tabela resultante\n\n\n\n\n# A tibble: 6 × 5\n  regiao   uf         trimestre         categoria                    mil_pessoas\n  &lt;chr&gt;    &lt;chr&gt;      &lt;chr&gt;             &lt;chr&gt;                              &lt;dbl&gt;\n1 Nordeste Pernambuco 2º trimestre 2024 forca_de_trabalho_ocupada           3774\n2 Nordeste Pernambuco 2º trimestre 2024 forca_de_trabalho_desocupada         492\n3 Nordeste Pernambuco 2º trimestre 2024 fora_da_forca_de_trabalho           3574\n4 Nordeste Bahia      2º trimestre 2024 forca_de_trabalho_ocupada           6159\n5 Nordeste Bahia      2º trimestre 2024 forca_de_trabalho_desocupada         769\n6 Nordeste Bahia      2º trimestre 2024 fora_da_forca_de_trabalho           5314\n\n\nAgora, podemos calcular a proporção de pessoas por categoria de ocupação em cada estado:\n\ndados_preparados &lt;- dados_longos |&gt; \n1  group_by(regiao, uf, trimestre) |&gt;\n2  mutate(perc = mil_pessoas / sum(mil_pessoas) * 100) |&gt;\n3  ungroup()\n\n4head(dados_preparados)\n\n\n1\n\nAgrupando os dados por região, estado e trimestre.\n\n2\n\nCalculando a proporção de pessoas por grupo (categoria).\n\n3\n\nRemovendo o agrupamento dos dados.\n\n4\n\nPrimeiras linhas da tabela resultante\n\n\n\n\n# A tibble: 6 × 6\n  regiao   uf         trimestre         categoria              mil_pessoas  perc\n  &lt;chr&gt;    &lt;chr&gt;      &lt;chr&gt;             &lt;chr&gt;                        &lt;dbl&gt; &lt;dbl&gt;\n1 Nordeste Pernambuco 2º trimestre 2024 forca_de_trabalho_ocu…        3774 48.1 \n2 Nordeste Pernambuco 2º trimestre 2024 forca_de_trabalho_des…         492  6.28\n3 Nordeste Pernambuco 2º trimestre 2024 fora_da_forca_de_trab…        3574 45.6 \n4 Nordeste Bahia      2º trimestre 2024 forca_de_trabalho_ocu…        6159 50.3 \n5 Nordeste Bahia      2º trimestre 2024 forca_de_trabalho_des…         769  6.28\n6 Nordeste Bahia      2º trimestre 2024 fora_da_forca_de_trab…        5314 43.4",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Exemplo prático: Visualização"
    ]
  },
  {
    "objectID": "07_visualizacao_exemplo.html#criando-o-gráfico-exploratório",
    "href": "07_visualizacao_exemplo.html#criando-o-gráfico-exploratório",
    "title": "Exemplo prático: Visualização",
    "section": "Criando o gráfico exploratório",
    "text": "Criando o gráfico exploratório\nCom os dados preparados, podemos criar o gráfico de colunas. Vamos primeiro criar um gráfico simples:\n\n1dados_preparados |&gt;\n2  ggplot(aes(fill = categoria)) +\n3  aes(y = uf, x = perc) +\n4  geom_col()\n\n\n1\n\nVamos utilizar os dados preparados nas etapas anteriores.\n\n2\n\nIniciando um gráfico. Informando que queremos usar o fill (preenchimento) usando a categoria de ocupação.\n\n3\n\nDefinindo o eixo y como os estados e o eixo x como a proporção.\n\n4\n\nAdicionando as colunas ao gráfico\n\n\n\n\n\n\n\n\n\n\n\nÉ interessante melhorar as legendas dos eixos, pois estão no formato adequado para nomes de colunas (mas não a melhor forma de apresentar em um gráfico). Isso requer trabalhar novamente na preparação dos dados!\nVamos criar uma nova coluna com os nomes das categorias de ocupação por extenso:\n\ndados_grafico_1 &lt;- dados_preparados |&gt; \n  mutate( \n1    categoria_label = case_match(\n      categoria,\n      \"forca_de_trabalho_ocupada\" ~ \"Força de trabalho ocupada\",\n      \"forca_de_trabalho_desocupada\" ~ \"Força de trabalho desocupada\",\n      \"fora_da_forca_de_trabalho\" ~ \"Fora da força de trabalho\"\n    )\n  ) \n\n\n1\n\nUsando a função case_math() (similar ao case_when()), criamos uma nova coluna com os nomes das categorias de ocupação por extenso.\n\n\n\n\n\ndados_grafico_1 |&gt; \n1  ggplot(aes(fill = categoria_label)) +\n  aes(y = uf, x = perc) + \n  geom_col()\n\n\n1\n\nPreenchendo a cor usando a nova coluna com os nomes das categorias de ocupação por extenso (fill = categoria_label).\n\n\n\n\n\n\n\n\n\n\n\nEstá um pouco melhor! Outra coisa interessante é reordenar os estados de acordo com a variável perc (proporção de pessoas em cada categoria). Isso fará com que o gráfico fique com aspecto “ordenado”.\n\ndados_grafico_2 &lt;- dados_grafico_1 |&gt; \n  mutate( \n1    categoria_fct = factor(\n      categoria_label,\n      levels = c(\n        \"Fora da força de trabalho\",\n        \"Força de trabalho ocupada\",\n        \"Força de trabalho desocupada\"\n      )),\n2    uf_fct = forcats::fct_reorder(uf, perc, min)\n    ) \n\n\n1\n\nTransformando as categorias em fator, para que sigam a ordem que definimos ao serem apresentadas (e não em ordem alfabética).\n\n2\n\nReordenamos a coluna dos estados (uf) de acordo com a proporção de pessoas em cada categoria (perc), usando a função min() para ordenar usando os valores mínimos. Isso faz com que o gráfico fique com aspecto “ordenado”.\n\n\n\n\n\ndados_grafico_2 |&gt; \n1  ggplot(aes(fill = categoria_fct)) +\n2  aes(y = uf_fct, x = perc) +\n  geom_col()\n\n\n1\n\nO preenchimento da cor é feito com a nova coluna de categorias de ocupação em fator (factor).\n\n2\n\nUsamos a coluna uf_fct no eixo y.",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Exemplo prático: Visualização"
    ]
  },
  {
    "objectID": "07_visualizacao_exemplo.html#customizando-o-gráfico",
    "href": "07_visualizacao_exemplo.html#customizando-o-gráfico",
    "title": "Exemplo prático: Visualização",
    "section": "Customizando o gráfico",
    "text": "Customizando o gráfico\nVamos adicionar títulos, legendas e personalizar as cores do gráfico:\n\n1trimestre_referencia &lt;- unique(dados_grafico_2$trimestre)\n\ngrafico_proporcao &lt;- dados_grafico_2 |&gt; \n2  ggplot(aes(fill = categoria_fct)) +\n3  aes(x = uf_fct, y = perc) +\n4  geom_col() +\n5  scale_fill_manual(values = c( \"#5b5e62\", \"gray\", \"#cc1e00\")) +\n6  labs(\n    y = \"Proporção (%)\",\n    x = \"Estado\",\n    title = \"Proporção por categoria de ocupação em cada estado\",\n    subtitle = paste0(\"Período: \", trimestre_referencia),\n    fill = \"Categoria\",\n    caption = \"Dados da PNAD Contínua Trimestral - IBGE, obtidos no SIDRA.\"\n  ) +\n7   theme_minimal()  +\n8  coord_flip()\n\ngrafico_proporcao\n\n\n1\n\nCriando um objeto com o trimestre de referência. Isso será utilizado para adicionar informações ao gráfico.\n\n2\n\nIniciando um gráfico, e incluindo o aes() com fill dentro da função ggplot().\n\n3\n\nDefinindo o eixo x como os estados e o eixo y como a proporção.\n\n4\n\nAdicionando a geometria de colunas ao gráfico, com a cor de preenchimento de acordo com a categoria de ocupação.\n\n5\n\nUsamos uma escala de cores manual, onde podemos definir as cores usadas para cada categoria.\n\n6\n\nAdicionando títulos e legendas ao gráfico.\n\n7\n\nAplicando um tema ao gráfico.\n\n8\n\nUsando a função coord_flip() para inverter os eixos x e y.\n\n\n\n\n\n\n\n\n\n\n\nPodemos salvar o gráfico em um arquivo, para utilizá-lo posteriormente:\n\n1ggsave(\n2  filename = \"graficos/grafico_proporcao_categoria_ocupacao.png\",\n3  plot = grafico_proporcao,\n4  width = 10,\n5  height = 8,\n6  dpi = 300\n)\n\n\n1\n\nFunção para salvar o gráfico.\n\n2\n\nNome do arquivo onde o gráfico será salvo.\n\n3\n\nObjeto contendo o gráfico que será salvo.\n\n4\n\nLargura do gráfico.\n\n5\n\nAltura do gráfico.\n\n6\n\nResolução do gráfico.",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Exemplo prático: Visualização"
    ]
  },
  {
    "objectID": "07_visualizacao_exemplo.html#ipeaplot-criando-graficos-no-padrão-editorial-do-ipea",
    "href": "07_visualizacao_exemplo.html#ipeaplot-criando-graficos-no-padrão-editorial-do-ipea",
    "title": "Exemplo prático: Visualização",
    "section": "{ipeaplot}: criando graficos no padrão editorial do Ipea",
    "text": "{ipeaplot}: criando graficos no padrão editorial do Ipea\nO {ipeaplot} é um pacote em R desenvolvido pela equipe da Coordenação de Ciência de Dados (COCD). O objetivo é facilitar a padronização de gráficos e figuras seguindo as linhas editoriais do Ipea.\nEle foi desenhado para ser usado em conjunto com o pacote {ggplot2}. Atualmente, o {ipeaplot} inclui três conjuntos de funções principais:\n\ntheme_ipea(): para formatação de elementos estilísticos da figura (eixos, fontes, linhas, grid, etc.);\nscale_color_ipea() e scale_fill_ipea(): selecionam paleta de cores dentro de um conjunto de opções utilizadas pelo Ipea;\nsave_pdf() e save_eps(): salvam a figura com a extensão .pdf ou .eps, formatos possíveis de serem “modificados” durante o processo de edição das publicações pelo Editorial do Ipea.\n\nTivemos como inspiração outras instituições que criaram ferramentas parecidas como a UNHCR {unhcrthemes} e a BBC {bbplot}.\n\nDemonstração do pacote\nVamos primeiro instalar e chamar o pacote:\n\n1install.packages(\"ipeaplot\")\n2library(\"ipeaplot\")\n\n\n1\n\nInstalar o {ipeaplot}.\n\n2\n\nChamar o pacote.\n\n\n\n\nAgora aproveitaremos o exemplo anterior para demonstrar o funcionamnto do {ipeaplot}. Vamos começar a modificar a figura, usando o {ipeaplot} para ajustar ao “padrão do Ipea”. Primeiro usamos a função theme_ipea() no lugar de theme_minimal().\n\ngrafico_ipeaplot &lt;- grafico_proporcao + \n1  theme_ipea() +\n2  coord_flip(expand = FALSE)\n\n\n1\n\nAdotando o tema padrão do Ipea\n\n2\n\nRetirando espaços em branco. O argumento expand = FALSE limita o gráfico à área dos dados (sem espaços em branco antes do valor 0 e depois do valor 100).\n\n\n\n\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\n\ngrafico_ipeaplot\n\n\n\n\n\n\n\n\nApesar de sutis, temos alterações nas bordas, nas fontes e nas legendas da figura. Em seguida, vamos mudar a escala de cores para adotar o padrão “Texto para Discussão do Ipea” (paleta de cores azul):\n\ngrafico_ipeaplot &lt;- grafico_ipeaplot +\n1  scale_fill_ipea(palette = 'Blue')\n\ngrafico_ipeaplot\n\n\n1\n\nUsando a paleta de cores azul (“TD”)\n\n\n\n\n\n\n\n\n\n\n\nAí está, temos uma figura pronta para publicarmos nosso primeiro “Texto para Discussão” usando o R. Na verdade, nem tão pronta assim, pois o Ipea usa em títulos e legendas a família de fontes Frutiger. Como não é uma família com licença livre não podemos distribuir no {ipeaplot}. Porém, com o passo a seguir, o Editorial poderá, ao receber seu material para publicação, fazer os ajustes necessários na fonte dos títulos e legendas.\n\n1save_eps(grafico_ipeaplot,\n         file.name = \"graficos/grafico_ipeaplot.eps\",\n         width = 10,\n         height = 8,\n         dpi = 300\n)\n\n2save_pdf(grafico_ipeaplot,\n         file.name = \"graficos/grafico_ipeaplot.pdf\",\n         width = 10,\n         height = 8,\n         dpi = 300\n)\n\n\n1\n\nSalvando o gráfico em formato .eps\n\n2\n\nSalvando o gráfico em formato .pdf\n\n\n\n\nPor trás das cortinas, as duas funções acima são semelhantes à ggsave(), usada anteriormente nesta aula. Porém, os atributos passados garantem que os gráficos serão salvos em formatos “editáveis” (.eps ou .pdf).",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Exemplo prático: Visualização"
    ]
  },
  {
    "objectID": "07_visualizacao_exemplo.html#sugestões-de-materiais",
    "href": "07_visualizacao_exemplo.html#sugestões-de-materiais",
    "title": "Exemplo prático: Visualização",
    "section": "Sugestões de materiais",
    "text": "Sugestões de materiais\n\nCookbook Ipeaplot",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Exemplo prático: Visualização"
    ]
  },
  {
    "objectID": "04_conhecendo.html",
    "href": "04_conhecendo.html",
    "title": "Conhecendo a base de dados",
    "section": "",
    "text": "Conceitos prévios importantes:\n\nComo importar bases de dados?\nTipos de variáveis\nValores faltantes (NA)\nNesta seção, vamos conhecer algumas funções que nos ajudarão a conhecer um pouco mais sobre a base de dados que estamos trabalhando.\nEssa etapa é importante para:\nVamos começar importando a base de dados que utilizaremos:\ndados &lt;- readr::read_rds(\"dados/sidrar_4092_bruto.rds\")",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Conhecendo a base de dados"
    ]
  },
  {
    "objectID": "04_conhecendo.html#estrutura-da-base-de-dados",
    "href": "04_conhecendo.html#estrutura-da-base-de-dados",
    "title": "Conhecendo a base de dados",
    "section": "Estrutura da base de dados",
    "text": "Estrutura da base de dados\nVamos começar conhecendo a estrutura da base de dados. Para isso, existem algumas funções para saber o número de colunas e linhas, os nomes das colunas, entre outras informações. Algumas delas apresentam as mesmas informações, mas de formas diferentes.\n\n# Número de colunas\nncol(dados)\n\n[1] 13\n\n# Número de linhas\nnrow(dados)\n\n[1] 27000\n\n# Número de linhas e colunas\ndim(dados)\n\n[1] 27000    13\n\n# Nomes das colunas\nnames(dados)\n\n [1] \"Nível Territorial (Código)\"                                             \n [2] \"Nível Territorial\"                                                      \n [3] \"Unidade de Medida (Código)\"                                             \n [4] \"Unidade de Medida\"                                                      \n [5] \"Valor\"                                                                  \n [6] \"Unidade da Federação (Código)\"                                          \n [7] \"Unidade da Federação\"                                                   \n [8] \"Trimestre (Código)\"                                                     \n [9] \"Trimestre\"                                                              \n[10] \"Variável (Código)\"                                                      \n[11] \"Variável\"                                                               \n[12] \"Condição em relação à força de trabalho e condição de ocupação (Código)\"\n[13] \"Condição em relação à força de trabalho e condição de ocupação\"         \n\n\nA função glimpse() do pacote {dplyr} apresenta informações como: número de linhas, número de colunas, nome e tipo de cada coluna, e os primeiros valores de cada coluna. Porém o texto resultante dependerá da largura do Console:\n\ndplyr::glimpse(dados)\n\n\n\n\nCaptura de tela: Resultado da função glimpse()\n\n\n\nView\nUma outra função que é interessante é a View(). Ela nos permite visualizar a base de dados em uma nova janela, em formato de tabela. Porém, é importante tomar cuidado ao usá-la com bases de dados grandes, pois pode travar o RStudio dependendo.\n\n\n\n\n\n\nDica\n\n\n\nObservação: Se você estiver com o {tidyverse} carregado, a função view() (com o v minúsculo) também está disponível. Ela é uma versão mais moderna da função View(), e tem algumas funcionalidades a mais. Para os fins dessa aula, podemos usar qualquer uma das duas.\n\n\nOutra forma de acessar o View é clicando na linha do objeto no painel Environment do RStudio:\n\n\n\nCaptura de tela: Onde clicamos para abrir o View\n\n\n\nView(dados)\n\n\n\n\nGravação da tela - Usando o View",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Conhecendo a base de dados"
    ]
  },
  {
    "objectID": "04_conhecendo.html#sumário-das-variáveis",
    "href": "04_conhecendo.html#sumário-das-variáveis",
    "title": "Conhecendo a base de dados",
    "section": "Sumário das variáveis",
    "text": "Sumário das variáveis\nEm funções apresentadas anteriormente, como a names(), já conseguimos ter uma ideia de quais são as variáveis da base de dados. Mas é interessante ter mais informações, como: tipo de variável, quantidade de valores faltantes, entre outros.\nNessa etapa, conheceremos algumas funções que nos ajudarão a ter essas informações. Algumas apresentam as mesmas informações, mas de formas diferentes. Portanto, é interessante conhecer algumas delas, e escolher qual é a que melhor atende às nossas necessidades.\n\n\n\n\n\n\nAviso\n\n\n\nCuidado: as funções apresentadas a seguir calculam algumas estatísticas descritivas (como a média, mediana, desvio padrão, valor mínimo, valor máximo, entre outras) em variáveis numéricas. Porém, ainda não “arrumamos” a base de dados (faremos isso no capítulo Transformando dados), e os dados ainda não estão adequados para esses cálculos.\nAlguns exemplos:\n\nVárias colunas numéricas representam o código de uma categoria, e não faz sentido calcular a média desses códigos.\nA variável valor está relacionada com a variável Unidade de Medida. Neste momento, a tabela apresenta valores com diferentes unidades de medida, e não faz sentido calcular a média desses valores.\n\nFalaremos sobre o cálculo de estatísticas descritivas no capítulo Análise Exploratória de Dados.\n\n\n\nsummary()\nA função summary() é uma função do R base (ou seja, não precisamos carregar nenhum pacote para usá-la), e ela nos dá um sumário das variáveis da base de dados.\n\nsummary(dados)\n\n Nível Territorial (Código) Nível Territorial  Unidade de Medida (Código)\n Length:27000               Length:27000       Length:27000              \n Class :character           Class :character   Class :character          \n Mode  :character           Mode  :character   Mode  :character          \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n Unidade de Medida      Valor         Unidade da Federação (Código)\n Length:27000       Min.   :    0.3   Length:27000                 \n Class :character   1st Qu.:    1.5   Class :character             \n Mode  :character   Median :    7.8   Mode  :character             \n                    Mean   :  862.0                                \n                    3rd Qu.:  105.8                                \n                    Max.   :39480.0                                \n                    NA's   :1350                                   \n Unidade da Federação Trimestre (Código)  Trimestre         Variável (Código) \n Length:27000         Length:27000       Length:27000       Length:27000      \n Class :character     Class :character   Class :character   Class :character  \n Mode  :character     Mode  :character   Mode  :character   Mode  :character  \n                                                                              \n                                                                              \n                                                                              \n                                                                              \n   Variável        \n Length:27000      \n Class :character  \n Mode  :character  \n                   \n                   \n                   \n                   \n Condição em relação à força de trabalho e condição de ocupação (Código)\n Length:27000                                                           \n Class :character                                                       \n Mode  :character                                                       \n                                                                        \n                                                                        \n                                                                        \n                                                                        \n Condição em relação à força de trabalho e condição de ocupação\n Length:27000                                                  \n Class :character                                              \n Mode  :character                                              \n                                                               \n                                                               \n                                                               \n                                                               \n\n\n\n\nskimr::skim()\nO pacote {skimr} tem uma função chamada skim() que nos dá um sumário das variáveis da base de dados.\nÉ interesante salvar o resultado da função em um objeto, para que possamos acessar as informações posteriormente, em formato de tabela.\n\nskim_dados &lt;- skimr::skim(dados)\n\nA seguir, podemos ver o resultado da função skim():\n\nskim_dados\n\n\nData summary\n\n\nName\ndados\n\n\nNumber of rows\n27000\n\n\nNumber of columns\n13\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n12\n\n\nnumeric\n1\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nNível Territorial (Código)\n0\n1\n1\n1\n0\n1\n0\n\n\nNível Territorial\n0\n1\n20\n20\n0\n1\n0\n\n\nUnidade de Medida (Código)\n0\n1\n1\n4\n0\n2\n0\n\n\nUnidade de Medida\n0\n1\n1\n11\n0\n2\n0\n\n\nUnidade da Federação (Código)\n0\n1\n2\n2\n0\n27\n0\n\n\nUnidade da Federação\n0\n1\n4\n19\n0\n27\n0\n\n\nTrimestre (Código)\n0\n1\n6\n6\n0\n50\n0\n\n\nTrimestre\n0\n1\n17\n17\n0\n50\n0\n\n\nVariável (Código)\n0\n1\n4\n4\n0\n4\n0\n\n\nVariável\n0\n1\n35\n89\n0\n4\n0\n\n\nCondição em relação à força de trabalho e condição de ocupação (Código)\n0\n1\n5\n5\n0\n5\n0\n\n\nCondição em relação à força de trabalho e condição de ocupação\n0\n1\n5\n30\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nValor\n1350\n0.95\n862.03\n2896.64\n0.3\n1.5\n7.8\n105.75\n39480\n▇▁▁▁▁\n\n\n\n\n\nO resultado da função skim() é dividido em duas partes:\n\nData summary: informações gerais sobre a base de dados, como: nome do objeto, número de linhas, número de colunas, quantas colunas temos em cada tipo, e se a base está agrupada por alguma variável1.\nVariable type: para cada tipo de variável presente na base de dados, temos informações como:\n\nskim_variable: nome da variável.\nn_missing: número de valores faltantes.\ncomplete_rate: proporção de valores não faltantes (está relacionada com a n_missing).\nOutras colunas específicas segundo o tipo de variável.\n\n\nA seguir, estão as informações que a função skim() retorna para os tipos de variáveis mais frequentes:\n\ncharacter (dados de texto):\n\nmin: número mínimo de caracteres.\nmax: número máximo de caracteres.\nempty: número de linhas contendo valores vazios (um valor vazio é um valor que contém apenas \"\").\nn_unique: número de valores únicos.\nwhitespace: número de linhas contendo apenas espaços em branco.\n\nnumeric (dados numéricos):\n\nmean: média.\nsd: desvio padrão.\np0: valor mínimo.\np25: primeiro quartil.\np50: mediana.\np75: terceiro quartil.\np100: valor máximo.\nhist: histograma dos valores.\n\ndate (datas):\n\nmin: data mínima.\nmax: data máxima.\nmedian: data mediana.\nn_unique: número de datas únicas.\n\nfactor (dados categóricos):\n\nordered: os níveis do fator estão ordenados?\nn_unique: número de valores únicos do fator.\ntop_counts: os valores mais frequentes do fator.\n\nlogical (dados booleanos):\n\nmean: média dos valores, considerando que TRUE é 1 e FALSE é 0.\ncount: contagem dos valores TRUE e FALSE.",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Conhecendo a base de dados"
    ]
  },
  {
    "objectID": "04_conhecendo.html#valores-faltantes-na",
    "href": "04_conhecendo.html#valores-faltantes-na",
    "title": "Conhecendo a base de dados",
    "section": "Valores faltantes (NA)",
    "text": "Valores faltantes (NA)\nA presença de valores faltantes é algo comum em bases de dados. Eles podem ocorrer por diversos motivos, como: não temos a informação, erros de digitação, entre outros.\nÉ importante identificar onde estão esses valores, para que possamos nos atentar em análises futuras.\nExistem algumas funções que nos ajudam a identificar a presença de valores faltantes na base de dados. O pacote {naniar} apresenta funções úteis para isso: a função gg_miss_var() cria uma visualição apresentando o nome das variáveis da base de dados, assim como a quantidade de valores faltantes em cada uma delas.\n\n1naniar::gg_miss_var(dados)\n\n\n1\n\nValores absolutos\n\n\n\n\n\n\n\n\n\n\n\n\n1naniar::gg_miss_var(dados, show_pct = TRUE)\n\n\n1\n\nValores relativos",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Conhecendo a base de dados"
    ]
  },
  {
    "objectID": "04_conhecendo.html#retornar-algumas-linhas-da-base-de-dados",
    "href": "04_conhecendo.html#retornar-algumas-linhas-da-base-de-dados",
    "title": "Conhecendo a base de dados",
    "section": "Retornar algumas linhas da base de dados",
    "text": "Retornar algumas linhas da base de dados\nEm situações onde trabalharmos com dados que possuem um número de linhas muito grande, não podemos utilizar a função View() para ver a tabela inteira.\nNesse caso, podemos ser interessante usar funções que retornam apenas algumas linhas da base de dados, como head(), tail(), slice_sample(), entre outras.\nAntes de usá-las, vamos adicionar uma coluna que represente o número da linha, para que seja mais fácil identificar as linhas que estamos selecionando:\n\n1dados_com_n_linha &lt;- tibble::rowid_to_column(dados, \"n_linha\")\n\n\n1\n\nA função rowid_to_column() adiciona uma coluna com o número da linha.\n\n\n\n\nAgora podemos usar as funções para retornar algumas linhas da base de dados. Observe os resultados apresentados, e os valores na coluna n_linha:\n\n# Exibindo as primeiras linhas\nhead(dados_com_n_linha)\n\n  n_linha Nível Territorial (Código)    Nível Territorial\n1       1                          3 Unidade da Federação\n2       2                          3 Unidade da Federação\n3       3                          3 Unidade da Federação\n4       4                          3 Unidade da Federação\n5       5                          3 Unidade da Federação\n6       6                          3 Unidade da Federação\n  Unidade de Medida (Código) Unidade de Medida  Valor\n1                       1572       Mil pessoas 1210.0\n2                       1572       Mil pessoas  765.0\n3                       1572       Mil pessoas  703.0\n4                       1572       Mil pessoas   62.0\n5                       1572       Mil pessoas  446.0\n6                          2                 %    0.7\n  Unidade da Federação (Código) Unidade da Federação Trimestre (Código)\n1                            11             Rondônia             201201\n2                            11             Rondônia             201201\n3                            11             Rondônia             201201\n4                            11             Rondônia             201201\n5                            11             Rondônia             201201\n6                            11             Rondônia             201201\n          Trimestre Variável (Código)\n1 1º trimestre 2012              1641\n2 1º trimestre 2012              1641\n3 1º trimestre 2012              1641\n4 1º trimestre 2012              1641\n5 1º trimestre 2012              1641\n6 1º trimestre 2012              4087\n                                                       Variável\n1                           Pessoas de 14 anos ou mais de idade\n2                           Pessoas de 14 anos ou mais de idade\n3                           Pessoas de 14 anos ou mais de idade\n4                           Pessoas de 14 anos ou mais de idade\n5                           Pessoas de 14 anos ou mais de idade\n6 Coeficiente de variação - Pessoas de 14 anos ou mais de idade\n  Condição em relação à força de trabalho e condição de ocupação (Código)\n1                                                                   32385\n2                                                                   32386\n3                                                                   32387\n4                                                                   32446\n5                                                                   32447\n6                                                                   32385\n  Condição em relação à força de trabalho e condição de ocupação\n1                                                          Total\n2                                              Força de trabalho\n3                                    Força de trabalho - ocupada\n4                                 Força de trabalho - desocupada\n5                                      Fora da força de trabalho\n6                                                          Total\n\n# Exibindo as últimas linhas\ntail(dados_com_n_linha)\n\n      n_linha Nível Territorial (Código)    Nível Territorial\n26995   26995                          3 Unidade da Federação\n26996   26996                          3 Unidade da Federação\n26997   26997                          3 Unidade da Federação\n26998   26998                          3 Unidade da Federação\n26999   26999                          3 Unidade da Federação\n27000   27000                          3 Unidade da Federação\n      Unidade de Medida (Código) Unidade de Medida Valor\n26995                          2                 %  31.6\n26996                          2                 %    NA\n26997                          2                 %   1.1\n26998                          2                 %   1.3\n26999                          2                 %   7.4\n27000                          2                 %   2.3\n      Unidade da Federação (Código) Unidade da Federação Trimestre (Código)\n26995                            53     Distrito Federal             202402\n26996                            53     Distrito Federal             202402\n26997                            53     Distrito Federal             202402\n26998                            53     Distrito Federal             202402\n26999                            53     Distrito Federal             202402\n27000                            53     Distrito Federal             202402\n              Trimestre Variável (Código)\n26995 2º trimestre 2024              4104\n26996 2º trimestre 2024              4105\n26997 2º trimestre 2024              4105\n26998 2º trimestre 2024              4105\n26999 2º trimestre 2024              4105\n27000 2º trimestre 2024              4105\n                                                                                       Variável\n26995                           Distribuição percentual das pessoas de 14 anos ou mais de idade\n26996 Coeficiente de variação - Distribuição percentual das pessoas de 14 anos ou mais de idade\n26997 Coeficiente de variação - Distribuição percentual das pessoas de 14 anos ou mais de idade\n26998 Coeficiente de variação - Distribuição percentual das pessoas de 14 anos ou mais de idade\n26999 Coeficiente de variação - Distribuição percentual das pessoas de 14 anos ou mais de idade\n27000 Coeficiente de variação - Distribuição percentual das pessoas de 14 anos ou mais de idade\n      Condição em relação à força de trabalho e condição de ocupação (Código)\n26995                                                                   32447\n26996                                                                   32385\n26997                                                                   32386\n26998                                                                   32387\n26999                                                                   32446\n27000                                                                   32447\n      Condição em relação à força de trabalho e condição de ocupação\n26995                                      Fora da força de trabalho\n26996                                                          Total\n26997                                              Força de trabalho\n26998                                    Força de trabalho - ocupada\n26999                                 Força de trabalho - desocupada\n27000                                      Fora da força de trabalho\n\n# \"Sorteando\" linhas\ndplyr::slice_sample(dados_com_n_linha, n = 5)\n\n  n_linha Nível Territorial (Código)    Nível Territorial\n1    1736                          3 Unidade da Federação\n2    4032                          3 Unidade da Federação\n3    3810                          3 Unidade da Federação\n4   21752                          3 Unidade da Federação\n5   25039                          3 Unidade da Federação\n  Unidade de Medida (Código) Unidade de Medida Valor\n1                          2                 %    NA\n2                          2                 %  63.1\n3                          2                 %   3.5\n4                          2                 %  65.3\n5                          2                 %   6.6\n  Unidade da Federação (Código) Unidade da Federação Trimestre (Código)\n1                            12                 Acre             202101\n2                            15                 Pará             201202\n3                            14              Roraima             202201\n4                            42       Santa Catarina             202102\n5                            52                Goiás             201202\n          Trimestre Variável (Código)\n1 1º trimestre 2021              4105\n2 2º trimestre 2012              4104\n3 1º trimestre 2022              4087\n4 2º trimestre 2021              4104\n5 2º trimestre 2012              4105\n                                                                                   Variável\n1 Coeficiente de variação - Distribuição percentual das pessoas de 14 anos ou mais de idade\n2                           Distribuição percentual das pessoas de 14 anos ou mais de idade\n3                             Coeficiente de variação - Pessoas de 14 anos ou mais de idade\n4                           Distribuição percentual das pessoas de 14 anos ou mais de idade\n5 Coeficiente de variação - Distribuição percentual das pessoas de 14 anos ou mais de idade\n  Condição em relação à força de trabalho e condição de ocupação (Código)\n1                                                                   32385\n2                                                                   32386\n3                                                                   32447\n4                                                                   32386\n5                                                                   32446\n  Condição em relação à força de trabalho e condição de ocupação\n1                                                          Total\n2                                              Força de trabalho\n3                                      Fora da força de trabalho\n4                                              Força de trabalho\n5                                 Força de trabalho - desocupada",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Conhecendo a base de dados"
    ]
  },
  {
    "objectID": "04_conhecendo.html#conhecendo-os-valores-únicos-de-uma-coluna",
    "href": "04_conhecendo.html#conhecendo-os-valores-únicos-de-uma-coluna",
    "title": "Conhecendo a base de dados",
    "section": "Conhecendo os valores únicos de uma coluna",
    "text": "Conhecendo os valores únicos de uma coluna\nPara variáveis categóricas ou de texto, é interessante conhecer os valores únicos presentes.\nPara acessar uma coluna específica, utilize o $. Elas retornarão como vetores, e poderemos usar as funções que já conhecemos. Ex: dados$ano.\n\n\n\n\n\n\nDica\n\n\n\nDica: após escrever o nome_do_dataframe$, aperte tab para que o RStudio faça sugestões de colunas da base.\n\n\nA função unique() retorna os valores únicos de um vetor. Exemplo:\n\nunique(dados$`Unidade de Medida`)\n\n[1] \"Mil pessoas\" \"%\"          \n\n\nNote que, nesse caso, foi necessário colocar uma crase para identificar o nome da coluna. Isso acontece porque a coluna contém espaços em branco e, por isso, o R entenderia que o nome da coluna é Unidade e de e Medida. Com a crase, o R entende que o nome da coluna é Unidade de Medida.\n\n\n\n\n\n\nDica\n\n\n\nÉ uma boa prática evitar espaços em branco e caracteres especiais nos nomes das colunas. Em Transformando dados &gt; Padronizar nome das colunas apresentaremos uma forma de fazer isso!\n\n\nOutra forma de extrair o conteúdo de uma coluna é utilizando o operador [[:\n\nunique(dados[[\"Unidade de Medida\"]])\n\n[1] \"Mil pessoas\" \"%\"          \n\n\nO resultado é o mesmo, mas dessa forma utilizamos o nome da coluna em texto (string) para acessar a coluna.",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Conhecendo a base de dados"
    ]
  },
  {
    "objectID": "04_conhecendo.html#sugestão-de-exercícios",
    "href": "04_conhecendo.html#sugestão-de-exercícios",
    "title": "Conhecendo a base de dados",
    "section": "Sugestão de exercícios",
    "text": "Sugestão de exercícios\nNesses exercícios a seguir, vamos utilizar a tabela como deputadas e deputados que já estiveram em exercício na Câmara dos Deputados.\n\ndeputados &lt;- readr::read_csv2(\"https://dadosabertos.camara.leg.br/arquivos/deputados/csv/deputados.csv\")\n\nResponda as perguntas a seguir:\n\nConhecendo a estrutura da base de dados:\n\nQuantas colunas e linhas temos na base de dados?\nO que cada linha representa?\nQuais são as colunas presentes na colunas?\nOs nomes das colunas estão aceitáveis (por exemplo, sem espaços, acentos, caracteres especiais)?\nQual é o tipo de cada variável?\nExiste alguma variável que deveria ser de outro tipo?\n\nValores faltantes (missing values):\n\nEm quais variáveis temos valores faltantes?\nQual é a variável com a maior quantidade de valores faltantes?\nO que significa os valores faltantes na coluna dataFalecimento?\n\nConhecendo variáveis com categorias:\n\nQuais são os valores únicos para a variável siglaSexo?",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Conhecendo a base de dados"
    ]
  },
  {
    "objectID": "04_conhecendo.html#footnotes",
    "href": "04_conhecendo.html#footnotes",
    "title": "Conhecendo a base de dados",
    "section": "Notas de rodapé",
    "text": "Notas de rodapé\n\n\nAinda não abordamos o conceito de grupos, então isso ficará mais claro posteriormente.↩︎",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Conhecendo a base de dados"
    ]
  },
  {
    "objectID": "10_censobr_conceitos.html",
    "href": "10_censobr_conceitos.html",
    "title": "Conceitos iniciais do Censo",
    "section": "",
    "text": "O censo demográfico brasileiro é a principal pesquisa populacional domiciliar realizada no Brasil, conduzida pelo Instituto Brasileiro de Geografia e Estatística (IBGE). Trata-se da pesquisa de maior cobertura territorial do país, e que levanta informações sobre as características e condições de vida da população brasileira nos mais diversos temas, como perfil demográfico, educação, trabalho, fecundidade, migração, condições de moradia, etc.\nNesta seção, nós revisamos alguns conceitos básicos sobre a organização dos censos demográficos no Brasil.",
    "crumbs": [
      "Explorando o Censo Demográfico",
      "Conceitos iniciais do Censo"
    ]
  },
  {
    "objectID": "10_censobr_conceitos.html#pesquisa-da-amostra-e-do-universo",
    "href": "10_censobr_conceitos.html#pesquisa-da-amostra-e-do-universo",
    "title": "Conceitos iniciais do Censo",
    "section": "Pesquisa da amostra e do universo",
    "text": "Pesquisa da amostra e do universo\nDesde 1960, o Censo Demográfico passou a consistir de duas pesquisas realizadas simultaneamente.\n\nUniverso: uma pesquisa aplicada a todos os domicílios (ou universo). Esta pesquisa é feita com um questionário básico que costuma ser curto, contendo entre 9 e 30 questões, dependendo da edição do censo.\nAmostra: uma pesquisa amostral aplicada a apenas uma parcela dos domicílios. A fração amostral era de 25% nos anos de 1960, 1970 e 1980 e passou para cerca de 10% em 1991 em diante. Esta pesquisa é feita com um questionário mais extenso.",
    "crumbs": [
      "Explorando o Censo Demográfico",
      "Conceitos iniciais do Censo"
    ]
  },
  {
    "objectID": "10_censobr_conceitos.html#microdados-da-amostra-e-dados-agregados-do-universo",
    "href": "10_censobr_conceitos.html#microdados-da-amostra-e-dados-agregados-do-universo",
    "title": "Conceitos iniciais do Censo",
    "section": "Microdados da Amostra e Dados Agregados do Universo",
    "text": "Microdados da Amostra e Dados Agregados do Universo\nMicrodados são bancos de dados em que cada observação representa uma unidade de coleta de informação. Nos censos, os microdados se referem aos arquivos em que cada observação ou linha são domicílios ou pessoas. A noção de microdados se contrapõe à de dados agregados, nos quais os casos são “agregações” das informações obtidas a partir por exemplo da soma ou das médias das informações dos microdados. Tais agregações podem ser, por exemplo, no nível de bairros, distritos, municípios etc.\n\n\n\n\n\n\nImportante\n\n\n\nOs dados disponibilizados pelo IBGE, e que estão disponíveis no pacote {censobr} incluem tnato os microdados da pesquisa amostral quanto os dados do universo agregados por setor censitário.\nObs. O IBGE não disponibiliza os microdados do universo porque a sua divulgação poderia violar o sigilo dos respondentes.",
    "crumbs": [
      "Explorando o Censo Demográfico",
      "Conceitos iniciais do Censo"
    ]
  },
  {
    "objectID": "10_censobr_conceitos.html#setores-censitários-e-áreas-de-ponderação",
    "href": "10_censobr_conceitos.html#setores-censitários-e-áreas-de-ponderação",
    "title": "Conceitos iniciais do Censo",
    "section": "Setores Censitários e Áreas de Ponderação",
    "text": "Setores Censitários e Áreas de Ponderação\nCom os Microdados da Amostra é possível fazer análises por indivíduos, famílias e domicílios. Mas análises espaciais, que levam em conta vizinhanças e distâncias geográficas, por exemplo, também podem ser de interesse. Nesse caso, é importante ter ciência da granularidade dos dados – i.e. de qual a menor unidade espacial que permite inferência estatística. Para isso, cabe destacar as duas principais unidades espaciais na construção dos censos demográficos:\n\nSetores censitários\n\nOs setores censitários são a menor unidade de análise espacial nas pesquisas domiciliares do IBGE. Um setor é uma unidade territorial demarcada para fins operacionais de organizar a coleta de dados. Cada setor é coberto por um único recenseador e possui em média, cerca de 200 domicílios. No entanto, este número, assim como o tamanho do setor podem variar a depender da densidade demográfica de cada região. Os dados do universo são disponibilizados apenas no formato agregado por setores censitários.\n\n\n\nÁreas de ponderação\n\nAs áreas de ponderação são a menor unidade espacial para a qual os dados da pesquisa amostral possuem representatividade estatística. Essas áreas são constituídas por agrupamentos de setores censitários contíguos, mas que também variam de acordo com a densidade demográfica de cada região. Para o Censo de 2010, o IBGE estabeleceu que uma área de ponderação deveria ter, no mínimo, 400 domicílios ocupados na amostra. Em regiões menos densamente povoadas, essas áreas acabam ocupando uma larga extensão territorial.\n\n\n\nCódigo\nlibrary(geobr)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(sf)\n\n# codigo do municipio de Belford Roxo\nmymuni &lt;- 3300456\n\n# baixa geometria do municipio\nmuni &lt;- geobr::read_municipality(mymuni)\n\n# baixa geometria das areas de ponderacao\nap &lt;- geobr::read_weighting_area(code_weighting = mymuni, \n                                 year = 2010, \n                                 simplified = F)\n\n# baixa geometria dos setores censitarios\nct &lt;- geobr::read_census_tract(code_tract = mymuni, \n                               year = 2010, \n                               simplified = FALSE)\n\n# funcao para 'inclinar' mapa\nrotate_data_geom &lt;- function(data, x_add = 0, y_add = 0) {\n  shear_matrix &lt;- function(){ matrix(c(2, 1.2, 0, 1), 2, 2) }\n  \n  rotate_matrix &lt;- function(x) { \n    matrix(c(cos(x), sin(x), -sin(x), cos(x)), 2, 2) \n  }\n  dplyr::mutate(data,\n    geom = geom * shear_matrix() * rotate_matrix(pi/20) + c(x_add, y_add)\n    )\n}\n\n\n# annotate parameters\nx = -116.03\nclr = 'gray40'\nsz = 4\n\n# MAP\ntemp1  &lt;- ggplot() +\n  # municipio\n  geom_sf(data = rotate_data_geom(data = muni, y_add = .01),\n          color='gray30', fill='#FCDE70', show.legend = FALSE) +\n  annotate(\"text\", label='Município', x=x, y=-4.59,\n           hjust = 0, color=clr, size=sz) +\n  \n  # areas de ponderacao\n  geom_sf(data = rotate_data_geom(data = ap, y_add = .07), \n          fill='#ff7b7b', color='#ff0000', show.legend = FALSE) +\n  annotate(\"text\", label='Áreas de\\nPonderação', x=x, y= -4.53,\n           hjust = 0, color=clr, size=sz) +\n\n  # setores censitarios\n  geom_sf(data = rotate_data_geom(data = ct, y_add = 0.13),\n          color='gray30', fill='gray98', show.legend = FALSE) +\n  annotate(\"text\", label='Setores\\nCensitários', x=x, y= -4.47, \n           hjust = 0, color=clr, size=sz) +\n  coord_sf(xlim = c(-116.305, -115.98)) +\n  theme_void() +\n  theme(plot.background = element_rect(fill = 'white', color='white'))\n\ntemp1\n# ggsave(temp1, filename = 'fig_spatial_layers.png', \n#        width = 12, height = 8, units = 'cm', dpi = 300)",
    "crumbs": [
      "Explorando o Censo Demográfico",
      "Conceitos iniciais do Censo"
    ]
  },
  {
    "objectID": "07_visualizacao.html",
    "href": "07_visualizacao.html",
    "title": "Visualizando dados",
    "section": "",
    "text": "Nesta aula:\n\nConheceremos o pacote ggplot2 para visualização de dados\nAprenderemos a criar diferentes tipos de gráficos como: de dispersão, linha, barra/coluna, entre outros\nVeremos como salvar os gráficos criados\nExploraremos funções para customizar a aparência dos gráficos\n\nEsse é um exemplo de gráfico que criaremos ao longo da aula:\n\n\n\n\n\nNesta aula, utilizaremos principalmente os pacotes {ggplot2} e {dplyr}. Vamos carregá-los:\n\n1library(ggplot2)\n2library(dplyr)\n\n\n1\n\nPacote para visualização de dados\n\n2\n\nPacote para transformação de dados",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Visualizando dados"
    ]
  },
  {
    "objectID": "07_visualizacao.html#objetivos",
    "href": "07_visualizacao.html#objetivos",
    "title": "Visualizando dados",
    "section": "",
    "text": "Nesta aula:\n\nConheceremos o pacote ggplot2 para visualização de dados\nAprenderemos a criar diferentes tipos de gráficos como: de dispersão, linha, barra/coluna, entre outros\nVeremos como salvar os gráficos criados\nExploraremos funções para customizar a aparência dos gráficos\n\nEsse é um exemplo de gráfico que criaremos ao longo da aula:\n\n\n\n\n\nNesta aula, utilizaremos principalmente os pacotes {ggplot2} e {dplyr}. Vamos carregá-los:\n\n1library(ggplot2)\n2library(dplyr)\n\n\n1\n\nPacote para visualização de dados\n\n2\n\nPacote para transformação de dados",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Visualizando dados"
    ]
  },
  {
    "objectID": "07_visualizacao.html#importando-dados",
    "href": "07_visualizacao.html#importando-dados",
    "title": "Visualizando dados",
    "section": "Importando dados",
    "text": "Importando dados\nNesta aula, utilizaremos a tabela preparada na aula sobre transformação de dados: \"dados_output/sidra_4092_arrumado.rds\".\n\n\n\n\n\n\nExpanda para fazer download da base de dados\n\n\n\n\n\nCaso não tenha o arquivo da tabela que utilizaremos, você pode baixar aqui, e copiar o arquivo para a pasta dados_output do seu projeto.\nOutra opção é executar o código abaixo:\n\ndownload.file(\n1  url = \"https://github.com/ipeadata-lab/curso_r_intro_202409/raw/refs/heads/main/dados_output/sidra_4092_arrumado.rds\",\n2  destfile = \"dados_output/sidra_4092_arrumado.rds\",\n3  mode = \"wb\"\n  )\n\n\n1\n\nURL que desejamos baixar\n\n2\n\nCaminho onde queremos baixar o arquivo (diretório + nome do arquivo + extensão do arquivo)\n\n3\n\nConfiguração que evita corromper arquivos binários.\n\n\n\n\n\n\n\nVamos carregar a base de dados com a função read_rds():\n\n1dados &lt;- readr::read_rds(\"dados_output/sidra_4092_arrumado.rds\")\n2glimpse(dados)\n\n\n1\n\nImportando os dados\n\n2\n\nEspiando a tabela: quantas colunas tem? quantas linhas? quais são as variáveis?\n\n\n\n\nRows: 1,350\nColumns: 16\n$ uf                                       &lt;chr&gt; \"Amapá\", \"Bahia\", \"Rio Grande…\n$ uf_codigo                                &lt;fct&gt; 16, 29, 24, 27, 13, 28, 25, 2…\n$ uf_sigla                                 &lt;chr&gt; \"AP\", \"BA\", \"RN\", \"AL\", \"AM\",…\n$ regiao                                   &lt;chr&gt; \"Norte\", \"Nordeste\", \"Nordest…\n$ trimestre                                &lt;chr&gt; \"1º trimestre 2012\", \"1º trim…\n$ trimestre_codigo                         &lt;chr&gt; \"201201\", \"201201\", \"201201\",…\n$ ano                                      &lt;dbl&gt; 2012, 2012, 2012, 2012, 2012,…\n$ trimestre_inicio                         &lt;date&gt; 2012-01-01, 2012-01-01, 2012…\n$ mil_pessoas_total                        &lt;dbl&gt; 487, 10986, 2540, 2383, 2463,…\n$ mil_pessoas_forca_de_trabalho            &lt;dbl&gt; 318, 6888, 1370, 1173, 1558, …\n$ mil_pessoas_forca_de_trabalho_ocupada    &lt;dbl&gt; 278, 6086, 1211, 1041, 1386, …\n$ mil_pessoas_forca_de_trabalho_desocupada &lt;dbl&gt; 40, 802, 159, 133, 173, 99, 1…\n$ mil_pessoas_fora_da_forca_de_trabalho    &lt;dbl&gt; 170, 4098, 1170, 1210, 905, 6…\n$ prop_desocupacao                         &lt;dbl&gt; 0.12578616, 0.11643438, 0.116…\n$ perc_desocupacao                         &lt;dbl&gt; 12.578616, 11.643438, 11.6058…\n$ periodo_pandemia                         &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n\n\nVamos criar também um objeto contendo apenas aos dados referentes ao trimestre mais recente, para usar em alguns exemplos:\n\ndados_tri_recente &lt;- dados |&gt;  \n1  filter(trimestre_inicio == max(trimestre_inicio))\n\n\n1\n\nFiltrando os dados para o trimestre mais recente",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Visualizando dados"
    ]
  },
  {
    "objectID": "07_visualizacao.html#o-que-é-o-ggplot2",
    "href": "07_visualizacao.html#o-que-é-o-ggplot2",
    "title": "Visualizando dados",
    "section": "O que é o ggplot2?",
    "text": "O que é o ggplot2?\nO ggplot2 é o principal pacote para criação de gráficos em R. Ele é baseado na gramática de gráficos, uma teoria que apresenta uma forma de descrever os componentes de um gráfico.\nO ggplot2 faz parte do tidyverse.",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Visualizando dados"
    ]
  },
  {
    "objectID": "07_visualizacao.html#vocabulário-do-ggplot2",
    "href": "07_visualizacao.html#vocabulário-do-ggplot2",
    "title": "Visualizando dados",
    "section": "Vocabulário do ggplot2",
    "text": "Vocabulário do ggplot2\nA gramática de gráficos é composta por alguns elementos, sendo os seguintes principais para iniciar:\n\nDados: um data frame que contém os dados que serão apresentados\nAesthetics (atributos estéticos): mapeamento dos dados para propriedades visuais do gráfico, como eixos, cor, forma e tamanho\nGeometrias: formas geométricas que representam os dados, como pontos, linhas e barras.\n\nVamos fazer um exemplo simples, explorando cada um desses elementos. Para iniciar o gráfico, podemos informar os dados para a função ggplot():\n\ndados_tri_recente |&gt;\n  ggplot()\n\n\n\n\n\n\n\n\nA função ggplot() cria um objeto gráfico vazio. Para informar quais são as variáveis que serão mapeadas nos eixos x e y, utilizamos a função aes():\n\ndados_tri_recente |&gt;\n  ggplot() + \n  aes(x = perc_desocupacao, y = uf)\n\n\n\n\n\n\n\n\nO gráfico criado apresenta os eixos, e os valores possíveis. Porém ainda não tem nenhuma geometria para representar os dados. Para adicionar uma geometria ao gráfico, utilizamos funções da família geom_*. Nesse caso, vamos utilizar a função geom_col() para criar um gráfico de colunas:\n\n1dados_tri_recente |&gt;\n2  ggplot() +\n3  aes(x = perc_desocupacao, y = uf) +\n4  geom_col()\n\n\n1\n\nDados: dados que serão utilizados\n\n2\n\nggplot(): função para iniciar o gráfico\n\n3\n\nAesthetics (atributos estéticos): informando quais variáveis serão utilizadas nos eixos x e y\n\n4\n\nGeometria do gráfico: informando que faremos um gráfico de colunas\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDica\n\n\n\nAtenção: Observe que a cada linha de código, adicionamos um + para adicionar um novo elemento ao gráfico.\nA partir da função ggplot(), sempre utilizamos + para adicionar novos elementos ao gráfico.",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Visualizando dados"
    ]
  },
  {
    "objectID": "07_visualizacao.html#criando-gráficos-exploratórios",
    "href": "07_visualizacao.html#criando-gráficos-exploratórios",
    "title": "Visualizando dados",
    "section": "Criando gráficos exploratórios",
    "text": "Criando gráficos exploratórios\nVamos criar alguns gráficos exploratórios com os dados de desocupação por trimestre e por estado.\nGráficos exploratórios são utilizados para entender melhor os dados, identificar padrões e tendências, e verificar a presença de outliers. Neste momento, não estamos preocupados com a estética do gráfico, mas sim com a interpretação dos dados.\nFalaremos como customizar os gráficos mais adiante.\n\nTipos de gráficos\n\nGráficos de dispersão\nVamos começar criando um gráfico de dispersão (conhecido também como gráfico de pontos). Para isso, utilizaremos a função ggplot() e a função geom_point().\nO gráfico de dispersão é utilizado para visualizar a relação entre duas variáveis quantitativas.\n\ndados |&gt;\n  filter(uf_sigla == \"BA\") |&gt;\n  ggplot() +\n  aes(x = trimestre_inicio, y = perc_desocupacao) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\nGráficos de linha\nGráficos de linha são muito utilizados para representar uma variável ao longo do tempo. A função de geometria utilizada é a geom_line().\nVamos criar um gráfico de linha para visualizar a evolução da taxa de desocupação ao longo dos trimestres para apenas um estado:\n\ndados |&gt; \n  filter(uf_sigla == \"BA\") |&gt; \n  ggplot() + \n  aes(x = trimestre_inicio, y = perc_desocupacao) + \n  geom_line()\n\n\n\n\n\n\n\n\nE se quisermos ver para todos os estados? Nesse caso, é importante usar um argumento adicional na função aes(), o group, para que o ggplot2 saiba que queremos uma linha para cada estado.\n\ndados |&gt; \n  ggplot() + \n  aes(x = trimestre_inicio, y = perc_desocupacao) + \n  geom_line(aes(group = uf))\n\n\n\n\n\n\n\n\n\n\n\nCombinando geometrias\nPodemos combinar diferentes geometrias no mesmo gráfico. Por exemplo, podemos adicionar um gráfico de pontos ao gráfico de linhas que criamos anteriormente:\n\ndados |&gt; \n  filter(uf_sigla == \"BA\") |&gt; \n  ggplot() + \n  aes(x = trimestre_inicio, y = perc_desocupacao) + \n  geom_line(color = \"red\") +\n  geom_point(color = \"blue\")\n\n\n\n\n\n\n\n\nOutro ponto importante é que a ordem das geometrias importa! No exemplo acima, a linha é desenhada primeiro, e os pontos são adicionados por cima da linha. Se trocarmos a ordem das geometrias, os pontos serão desenhados primeiro, e a linha será desenhada por cima dos pontos.\n\ndados |&gt; \n  filter(uf_sigla == \"BA\") |&gt; \n  ggplot() + \n  aes(x = trimestre_inicio, y = perc_desocupacao) + \n  geom_point(color = \"blue\") +\n  geom_line(color = \"red\")\n\n\n\n\n\n\n\n\n\n\nGráficos de barras/colunas\nPara os gráficos de barras/colunas, podemos utilizar duas funções: geom_bar() e geom_col(). A diferença entre elas é que geom_bar() é utilizada quando queremos contar a frequência de uma variável categórica, enquanto geom_col() é utilizada quando queremos visualizar uma variável numérica.\nVamos criar um gráfico de colunas para visualizar a taxa de desocupação dos estados no trimestre mais recente. Como já temos a coluna com o valor numérico que queremos visualizar (perc_desocupacao), utilizaremos a função geom_col():\n\ndados_tri_recente |&gt; \n  ggplot() + \n  aes(y = uf, x = perc_desocupacao) + \n  geom_col()\n\n\n\n\n\n\n\n\nA função geom_bar() é utilizada para representar contagens. Vamos responder a seguinte pergunta de exemplo: quantas vezes cada estado apresentou uma taxa de desocupação maior ou igual à 20%? Para isso, precisamos filtrar os dados antes de criar o gráfico, e a função geom_bar() será utilizada para contar a frequência de cada estado. Os estados que não aparecerem no gráfico é porque não tiveram nenhuma taxa de desocupação maior ou igual à 20%, no período que temos dados.\n\ndados |&gt; \n  filter(perc_desocupacao &gt;= 20) |&gt;\n  ggplot() + \n  aes(x = uf) + \n  geom_bar()\n\n\n\n\n\n\n\n\n\n\nGráfico de histograma\nO histograma é um gráfico que mostra a distribuição de uma variável numérica. A função de geometria utilizada é a geom_histogram().\nPodemos visualizar a distribuição da variável perc_desocupacao, considerando todos os trimestres:\n\ndados |&gt; \n  ggplot() + \n  aes(x = perc_desocupacao) + \n  geom_histogram(binwidth = 1)\n\n\n\n\n\n\n\n\nOutro tipo de gráfico que pode ser utilizado para visualizar a distribuição de uma variável numérica é o gráfico de densidade. A função de geometria utilizada é a geom_density().\n\ndados |&gt; \n  ggplot() + \n  aes(x = perc_desocupacao) + \n  geom_density()\n\n\n\n\n\n\n\n\n\n\nGráficos de caixa (boxplot)\nO gráfico de caixa1 (mais conhecido como boxplot) é utilizado para visualizar a distribuição de uma variável numérica. Esse é um tipo de gráfico que não é muito comum vermos no dia-a-dia, mas é muito usado em pesquisas e análises estatísticas.\nEste gráfico apresenta informações como a mediana, quartis, valores mínimos e máximos, e possíveis outliers.\nPara criar um boxplot, utilizaremos a função de geometria geom_boxplot()\n\ndados |&gt; \n  ggplot() + \n  aes(y = regiao, x = perc_desocupacao) + \n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\nGráficos por subgrupos\n\nSubgrupos por Cor\nPodemos adicionar mais uma variável ao gráfico, utilizando a cor para representá-la. Para isso, utilizamos os argumentos fill ou color dentro da função aes():\n\nfill: preenche a área com a cor. Útil para gráficos de barras e colunas, por exemplo.\ncolor: adiciona a cor ao contorno. Útil para gráficos de linhas e pontos, por exemplo.\n\nVamos ver um exemplo de gráfico de colunas apresentado anteriormente, com preenchimento (fill) por região:\n\ndados_tri_recente |&gt;\n  ggplot() + \n  aes(x = perc_desocupacao, y = uf) + \n1  geom_col(aes(fill = regiao))\n\n\n1\n\nAdicionando a cor de preenchimento utilizando a coluna regiao, com o argumento fill. Isso precisa estar DENTRO do aes().\n\n\n\n\n\n\n\n\n\n\n\nVamos ver um exemplo de gráfico de linhas apresentado anteriormente, adicionamos pontos e usamos a cor para representar o período que consideramos como pandemia (color):\n\ndados |&gt; \n1  filter(uf_sigla == \"BA\") |&gt;\n  mutate(periodo_pandemia = as.character(periodo_pandemia)) |&gt;\n  ggplot() + \n  aes(x = trimestre_inicio, y = perc_desocupacao) + \n  geom_line() +\n2  geom_point(aes(color = periodo_pandemia))\n\n\n1\n\nFiltrando dados para representar apenas a Bahia.\n\n2\n\nAdicionando a cor do ponto utilizando a coluna periodo_pandemia, com o argumento color. Isso precisa estar DENTRO do aes().\n\n\n\n\n\n\n\n\n\n\n\n\n\nSubgrupos por Facetas (facet)\nAs facetas (ou facet) são utilizadas para dividir o gráfico em subgráficos, com base nos valores de uma ou duas variáveis categóricas.\nExistem duas funções principais para criar facetas: facet_wrap() ou facet_grid().\nA função facet_wrap() cria uma faceta para cada categoria da variável:\n\ndados |&gt; \n  ggplot() + \n  aes(x = trimestre_inicio, y = perc_desocupacao) + \n  geom_line(aes(group = uf)) + \n1  facet_wrap(~regiao)\n\n\n1\n\nAdicionando a função facet_wrap() para criar um gráfico para cada categoria da variável regiao.\n\n\n\n\n\n\n\n\n\n\n\nVeja que o gráfico é dividido em 5 subgráficos, um para cada região do Brasil. Os valores dos eixos x e y são os mesmos para todos os subgráficos, possibilitando a comparação entre eles.\nJá a função facet_grid() cria um gráfico para cada combinação de categorias de duas variáveis.\n\ndados |&gt; \n  ggplot() + \n  aes(y = perc_desocupacao) + \n  geom_boxplot() + \n1  facet_grid(regiao ~ periodo_pandemia)\n\n\n1\n\nAdicionando a função facet_grid() para criar um gráfico para cada combinação de categorias das variáveis regiao e periodo_pandemia.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRevisão\nA partir dos exemplos apresentados, podemos listar alguns pontos importantes sobre o ggplot2:\n\nA função ggplot() cria um objeto gráfico vazio\nPodemos usar o pipe (%&gt;% ou |&gt;) para encadear as funções até a função ggplot().\nA partir da função ggplot(), não usamos mais o pipe (%&gt;% ou |&gt;), e sim o +.\nA função aes() define o mapeamento estético (aesthetics mapping) entre as colunas da base de dados (variáveis) e os elementos visuais do gráfico (eixo, posição, cor, tamanho, etc).\nOs atributos estéticos (aes) x e y representam os eixos x e y do gráfico.\nPara adicionar uma geometria ao gráfico, usamos alguma função da família geom_*.\nPodemos usar mais do que uma geometria no mesmo gráfico, e a ordem importa!",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Visualizando dados"
    ]
  },
  {
    "objectID": "07_visualizacao.html#customizando-gráficos",
    "href": "07_visualizacao.html#customizando-gráficos",
    "title": "Visualizando dados",
    "section": "Customizando gráficos",
    "text": "Customizando gráficos\nAté aqui, discutimos como criar gráficos exploratórios, e vimos que o ggplot2 nos permite criar gráficos de forma simples e rápida.\nApós criar um gráfico exploratório que nos ajuda a entender os dados, podemos customizá-lo para apresentar a outras pessoas, ou para publicar em relatórios e artigos.\nVamos ver algumas formas de customizar os gráficos criados, partindo do gráfico a seguir:\n\ngrafico_base &lt;- dados_tri_recente |&gt; \n  ggplot() + \n  aes(y = uf, x = perc_desocupacao) + \n  geom_col()\n\ngrafico_base\n\n\n\n\n\n\n\n\n\nOrdenando as barras\nO ggplot ordena variáveis de texto em ordem alfabética. No exemplo acima, as barras estão ordenadas de acordo com a ordem alfabética dos estados: o Acre aparece primeiro, e o Tocantins, por último.\nPodemos ordenar as barras do gráfico de colunas de acordo com o valor da variável numérica utilizada (neste caso, perc_desocupacao).\nPara isso, precisaremos transformar a variável de texto uf em uma variável categórica ordenada (ou seja, um fator/factor).\n\nFatores / factors\nOs fatores são utilizados para representar variáveis categóricas no R. Essas variáveis podem ser ordenadas ou não.\nEles são úteis para controlar a ordem de exibição de variáveis categóricas em gráficos, tabelas e modelos estatísticos.\nVamos criar um exemplo simples, criando uma tabela com a escolaridade de um grupo de pessoas:\n\nescolaridade &lt;- tibble(\n  nome = c(\n    \"Maria\",\n    \"João\",\n    \"Pedro\",\n    \"Ana\",\n    \"José\",\n    \"Carlos\",\n    \"Mariana\",\n    \"Lucas\"\n  ),\n  escolaridade_concluida = c(\n    \"Pós-graduação\",\n    \"Ensino Médio\",\n    \"Ensino Fundamental II\",\n    \"Ensino Fundamental I\",\n    \"Ensino Fundamental I\",\n    \"Sem instrução\",\n    \"Ensino Técnico\",\n    \"Graduação\"\n  )\n)\n\nSe ordenarmos a tabela pela variável escolaridade_concluida, veremos que a ordem é alfabética:\n\nescolaridade |&gt; \n  arrange(escolaridade_concluida)\n\n# A tibble: 8 × 2\n  nome    escolaridade_concluida\n  &lt;chr&gt;   &lt;chr&gt;                 \n1 Ana     Ensino Fundamental I  \n2 José    Ensino Fundamental I  \n3 Pedro   Ensino Fundamental II \n4 João    Ensino Médio          \n5 Mariana Ensino Técnico        \n6 Lucas   Graduação             \n7 Maria   Pós-graduação         \n8 Carlos  Sem instrução         \n\n\nPara que, por exemplo, a variável escolaridade_concluida seja ordenada de acordo com a ordem de escolaridade, podemos transformá-la em um fator ordenado, utilizando a função factor(), e indicando quais são os níveis (levels) de escolaridade, na ordem que queremos que apareçam:\n\nescolaridade |&gt;\n  mutate(\n1  escolaridade_concluida_fct = factor(\n2    escolaridade_concluida,\n3    levels = c(\n      \"Sem instrução\", \n      \"Ensino Fundamental I\", \n      \"Ensino Fundamental II\", \n      \"Ensino Médio\", \n      \"Ensino Técnico\", \n      \"Graduação\", \n      \"Pós-graduação\" \n      )\n    )\n  ) |&gt; \n4  arrange(escolaridade_concluida_fct)\n\n\n1\n\nCriando uma nova variável escolaridade_concluida_fct usando a função factor()\n\n2\n\nVariável que será transformada em fator\n\n3\n\nNíveis de escolaridade, na ordem que queremos que apareçam\n\n4\n\nOrdenando a tabela pela variável escolaridade_concluida_fct\n\n\n\n\n# A tibble: 8 × 3\n  nome    escolaridade_concluida escolaridade_concluida_fct\n  &lt;chr&gt;   &lt;chr&gt;                  &lt;fct&gt;                     \n1 Carlos  Sem instrução          Sem instrução             \n2 Ana     Ensino Fundamental I   Ensino Fundamental I      \n3 José    Ensino Fundamental I   Ensino Fundamental I      \n4 Pedro   Ensino Fundamental II  Ensino Fundamental II     \n5 João    Ensino Médio           Ensino Médio              \n6 Mariana Ensino Técnico         Ensino Técnico            \n7 Lucas   Graduação              Graduação                 \n8 Maria   Pós-graduação          Pós-graduação             \n\n\nA função factor() é do R base, ou seja, não precisamos carregar nenhum pacote adicional para utilizá-la. Porém o pacote {forcats} (que faz parte do {tidyverse}) apresenta funções mais avançadas para trabalhar com fatores, como a função fct_reorder() que veremos a seguir.\n\n\nVoltando ao exemplo do gráfico de colunas\nPara isso, precisamos fazer uma transformação na variável uf, para que ela seja ordenada de acordo com o valor de perc_desocupacao. Isso deve ser feito antes de criar o gráfico.\nVamos ordenar as barras do gráfico anterior, de acordo com o valor de perc_desocupacao. Para isso, utilizamos a função fct_reorder() do pacote {forcats}.\nA função fct_reorder() recebe dois argumentos:\n\nA variável que queremos ordenar (a variável categórica que é representada em cada coluna)\nA variável que será utilizada para ordenar a primeira variável (a variável numérica que será utilizada para ordenar a variável categórica)\n\nNo caso do nosso exemplo, queremos ordenar as barras de acordo com o valor de perc_desocupacao, e a variável categórica que queremos ordenar é uf. Portanto, usaremos fct_reorder(uf, perc_desocupacao).\n\ngrafico_ordenado &lt;- dados_tri_recente |&gt; \n1  mutate(uf_fct = forcats::fct_reorder(uf, perc_desocupacao)) |&gt;\n  ggplot() + \n2  aes(y = uf_fct, x = perc_desocupacao) +\n  geom_col()\n\ngrafico_ordenado\n\n\n1\n\nComo explicado acima, criamos uma nova variável uf_fct que será utilizada para ordenar as barras de acordo com o valor de perc_desocupacao.\n\n2\n\nUtilizaremos no eixo y a variável criada: uf_fct.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTítulos e rótulos\nPor padrão, o gráfico está sem título, e com o nome das colunas nos eixos x e y e legendas.\nO ggplot2 permite adicionar títulos e rótulos aos gráficos, utilizando a função labs(). Essa função apresenta vários argumentos, que podem ser divididos em dois grupos:\n\nElementos com informações do gráficos: sempre estão disponíveis. Ex: title, subtitle, caption…\nElementos relacionados aos atributos estéticos: dependem dos mapeamentos feitos com a função aes(). Ex: x, y, fill, color…\n\nVamos adicionar um título ao gráfico anterior, e rótulos para os eixos x e y:\n\ngrafico_com_labels &lt;- grafico_ordenado + \n  labs(\n1    title = \"Taxa de desocupação por estado\",\n    subtitle = \"Dados para o 2º trimestre 2024\",\n    caption = \"Fonte: Dados referentes à PNAD Contínua Trimestral, obtidos no SIDRA/IBGE.\",\n2    x = \"Taxa de desocupação (%)\",\n    y = \"Estado\",\n  )\n\ngrafico_com_labels\n\n\n1\n\nInformações sobre o gráfico\n\n2\n\nAtributos estéticos utilizados\n\n\n\n\n\n\n\n\n\n\n\n\n\nEscalas\nO {ggplot2} apresenta várias funções para trabalhar com as escalas dos gráficos. Essas funções apresentam o prefixo scale_.\nVamos explorar algumas dessas funções para trabalhar com escalas, mas lembre-se que existem muitas outras funções para customizar as escalas dos gráficos.\n\n\n\n\n\n\nLista de funções para escalas no ggplot2\n\n\n\n\n\n\nls(\"package:ggplot2\") |&gt; \n  stringr::str_subset(\"^scale_\")\n\n  [1] \"scale_alpha\"                \"scale_alpha_binned\"        \n  [3] \"scale_alpha_continuous\"     \"scale_alpha_date\"          \n  [5] \"scale_alpha_datetime\"       \"scale_alpha_discrete\"      \n  [7] \"scale_alpha_identity\"       \"scale_alpha_manual\"        \n  [9] \"scale_alpha_ordinal\"        \"scale_color_binned\"        \n [11] \"scale_color_brewer\"         \"scale_color_continuous\"    \n [13] \"scale_color_date\"           \"scale_color_datetime\"      \n [15] \"scale_color_discrete\"       \"scale_color_distiller\"     \n [17] \"scale_color_fermenter\"      \"scale_color_gradient\"      \n [19] \"scale_color_gradient2\"      \"scale_color_gradientn\"     \n [21] \"scale_color_grey\"           \"scale_color_hue\"           \n [23] \"scale_color_identity\"       \"scale_color_manual\"        \n [25] \"scale_color_ordinal\"        \"scale_color_steps\"         \n [27] \"scale_color_steps2\"         \"scale_color_stepsn\"        \n [29] \"scale_color_viridis_b\"      \"scale_color_viridis_c\"     \n [31] \"scale_color_viridis_d\"      \"scale_colour_binned\"       \n [33] \"scale_colour_brewer\"        \"scale_colour_continuous\"   \n [35] \"scale_colour_date\"          \"scale_colour_datetime\"     \n [37] \"scale_colour_discrete\"      \"scale_colour_distiller\"    \n [39] \"scale_colour_fermenter\"     \"scale_colour_gradient\"     \n [41] \"scale_colour_gradient2\"     \"scale_colour_gradientn\"    \n [43] \"scale_colour_grey\"          \"scale_colour_hue\"          \n [45] \"scale_colour_identity\"      \"scale_colour_manual\"       \n [47] \"scale_colour_ordinal\"       \"scale_colour_steps\"        \n [49] \"scale_colour_steps2\"        \"scale_colour_stepsn\"       \n [51] \"scale_colour_viridis_b\"     \"scale_colour_viridis_c\"    \n [53] \"scale_colour_viridis_d\"     \"scale_continuous_identity\" \n [55] \"scale_discrete_identity\"    \"scale_discrete_manual\"     \n [57] \"scale_fill_binned\"          \"scale_fill_brewer\"         \n [59] \"scale_fill_continuous\"      \"scale_fill_date\"           \n [61] \"scale_fill_datetime\"        \"scale_fill_discrete\"       \n [63] \"scale_fill_distiller\"       \"scale_fill_fermenter\"      \n [65] \"scale_fill_gradient\"        \"scale_fill_gradient2\"      \n [67] \"scale_fill_gradientn\"       \"scale_fill_grey\"           \n [69] \"scale_fill_hue\"             \"scale_fill_identity\"       \n [71] \"scale_fill_manual\"          \"scale_fill_ordinal\"        \n [73] \"scale_fill_steps\"           \"scale_fill_steps2\"         \n [75] \"scale_fill_stepsn\"          \"scale_fill_viridis_b\"      \n [77] \"scale_fill_viridis_c\"       \"scale_fill_viridis_d\"      \n [79] \"scale_linetype\"             \"scale_linetype_binned\"     \n [81] \"scale_linetype_continuous\"  \"scale_linetype_discrete\"   \n [83] \"scale_linetype_identity\"    \"scale_linetype_manual\"     \n [85] \"scale_linewidth\"            \"scale_linewidth_binned\"    \n [87] \"scale_linewidth_continuous\" \"scale_linewidth_date\"      \n [89] \"scale_linewidth_datetime\"   \"scale_linewidth_discrete\"  \n [91] \"scale_linewidth_identity\"   \"scale_linewidth_manual\"    \n [93] \"scale_linewidth_ordinal\"    \"scale_radius\"              \n [95] \"scale_shape\"                \"scale_shape_binned\"        \n [97] \"scale_shape_continuous\"     \"scale_shape_discrete\"      \n [99] \"scale_shape_identity\"       \"scale_shape_manual\"        \n[101] \"scale_shape_ordinal\"        \"scale_size\"                \n[103] \"scale_size_area\"            \"scale_size_binned\"         \n[105] \"scale_size_binned_area\"     \"scale_size_continuous\"     \n[107] \"scale_size_date\"            \"scale_size_datetime\"       \n[109] \"scale_size_discrete\"        \"scale_size_identity\"       \n[111] \"scale_size_manual\"          \"scale_size_ordinal\"        \n[113] \"scale_type\"                 \"scale_x_binned\"            \n[115] \"scale_x_continuous\"         \"scale_x_date\"              \n[117] \"scale_x_datetime\"           \"scale_x_discrete\"          \n[119] \"scale_x_log10\"              \"scale_x_reverse\"           \n[121] \"scale_x_sqrt\"               \"scale_x_time\"              \n[123] \"scale_y_binned\"             \"scale_y_continuous\"        \n[125] \"scale_y_date\"               \"scale_y_datetime\"          \n[127] \"scale_y_discrete\"           \"scale_y_log10\"             \n[129] \"scale_y_reverse\"            \"scale_y_sqrt\"              \n[131] \"scale_y_time\"              \n\n\n\n\n\n\nEscalas de cores\nO {ggplot2} utiliza uma paleta de cores padrão bem colorida, observada nos exemplos anteriores. Porém podemos mudar a paleta de cores, ou até mesmo criar uma paleta de cores personalizada.\nAs funções de escalas de cores dependerão do tipo de atributo estético utilizado: fill ou color.\nQuando usamos o atributo fill, utilizamos as funções scale_fill_*(). Quando usamos o atributo color, utilizamos as funções scale_color_*().\nOutro ponto importante é que as funções de escalas de cores dependem do tipo de variável que estamos mapeando.\nPor exemplo, se a variável mapeada é categórica, podemos usar a função scale_fill_viridis_d() para preencher as barras com uma paleta de cores viridis. Utilizando o exemplo que estamos criando, a região pode ser mapeada no atributo fill:\n\ndados_tri_recente |&gt; \n  ggplot() +\n  aes(y = uf, x = perc_desocupacao) +\n  geom_col(aes(fill = regiao)) +\n  scale_fill_viridis_d() \n\n\n\n\n\n\n\n\nMas se a variável mapeada é numérica, podemos usar a função scale_fill_viridis_c(). O exemplo abaixo apresenta um gráfico similar, mas mapeando a variável perc_desocupacao no atributo fill:\n\ndados_tri_recente |&gt; \n  ggplot() +\n  aes(y = uf, x = perc_desocupacao) +\n  geom_col(aes(fill = perc_desocupacao)) +\n  scale_fill_viridis_c()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLista de funções para escalas de cores no ggplot2\n\n\n\n\n\n\nPara o atributo color:\n\n\nls(\"package:ggplot2\") |&gt; \n  stringr::str_subset(\"^scale_\") |&gt; \n  stringr::str_subset(\"color\")\n\n [1] \"scale_color_binned\"     \"scale_color_brewer\"     \"scale_color_continuous\"\n [4] \"scale_color_date\"       \"scale_color_datetime\"   \"scale_color_discrete\"  \n [7] \"scale_color_distiller\"  \"scale_color_fermenter\"  \"scale_color_gradient\"  \n[10] \"scale_color_gradient2\"  \"scale_color_gradientn\"  \"scale_color_grey\"      \n[13] \"scale_color_hue\"        \"scale_color_identity\"   \"scale_color_manual\"    \n[16] \"scale_color_ordinal\"    \"scale_color_steps\"      \"scale_color_steps2\"    \n[19] \"scale_color_stepsn\"     \"scale_color_viridis_b\"  \"scale_color_viridis_c\" \n[22] \"scale_color_viridis_d\" \n\n\n\nPara o atributo fill:\n\n\nls(\"package:ggplot2\") |&gt; \n  stringr::str_subset(\"^scale_\") |&gt; \n  stringr::str_subset(\"fill\")\n\n [1] \"scale_fill_binned\"     \"scale_fill_brewer\"     \"scale_fill_continuous\"\n [4] \"scale_fill_date\"       \"scale_fill_datetime\"   \"scale_fill_discrete\"  \n [7] \"scale_fill_distiller\"  \"scale_fill_fermenter\"  \"scale_fill_gradient\"  \n[10] \"scale_fill_gradient2\"  \"scale_fill_gradientn\"  \"scale_fill_grey\"      \n[13] \"scale_fill_hue\"        \"scale_fill_identity\"   \"scale_fill_manual\"    \n[16] \"scale_fill_ordinal\"    \"scale_fill_steps\"      \"scale_fill_steps2\"    \n[19] \"scale_fill_stepsn\"     \"scale_fill_viridis_b\"  \"scale_fill_viridis_c\" \n[22] \"scale_fill_viridis_d\" \n\n\n\n\n\nUm ponto a ter atenção é o tipo de paleta de cores usadas. Algumas paletas de cores são mais adequadas para representar variáveis categóricas, enquanto outras são mais adequadas para representar variáveis numéricas. Veja a imagem com exemplos de paletas categóricas, sequenciais, e divergentes:\n\n\n\nFonte da imagem: tmap book.\n\n\n\n\nEscalas de eixos: datas\nPodemos customizar a escala do eixo x para apresentar as datas de forma personalizada. É importante que, para isso, a variável seja do tipo Date ou Datetime.\nPara isso, utilizamos a função scale_x_date(). Ela apresenta alguns argumentos importantes:\n\nbreaks: indica a frequência das marcações no eixo x. Alguns exemplos são: \"1 month\" (marcação a cada mês), \"3 months\" (marcação a cada 3 meses), “1 year” (marcação a cada ano), entre outros.\ndate_labels: formato da data que será apresentado. Alguns exemplos são: \"%m/%Y\" (mês/ano), \"%d/%m/%Y\" (dia/mês/ano), \"%b/%Y\" (mês abreviado/ano), entre outros.\n\nVamos criar um gráfico de linhas para visualizar a evolução da taxa de desocupação desde 2022 para a Bahia, e customizar a escala do eixo x para apresentar as datas de forma a apresentar uma marcação cada 3 meses:\n\ndados |&gt;\n1  filter(uf_sigla == \"BA\", ano &gt;= 2022) |&gt;\n  ggplot() +\n  aes(x = trimestre_inicio, y = perc_desocupacao) +\n  geom_line() +\n  geom_point() +\n2  scale_x_date(\n3    breaks = \"3 months\",\n4    date_labels = \"%m/%Y\",\n5    minor_breaks = \"1 month\"\n  )\n\n\n1\n\nFiltrando os dados para a Bahia, e considerando apenas os dados a partir de 2022.\n\n2\n\nCustomizando a escala de data no eixo x.\n\n3\n\nQueremos que a marcação apareça a cada 3 meses.\n\n4\n\nFormato da data que será apresentado (mês/ano).\n\n5\n\nA minor break é uma linha que aparece entre as marcações principais, porém sem indicar uma legenda. Neste caso, queremos que apareça a cada mês.\n\n\n\n\n\n\n\n\n\n\n\n\n\nEscalas de eixos: numérico\nPodemos customizar a escala dos eixos x e/ou y quando estamos mapeando variáveis numéricas utilizando as funções scale_x_continuous() e scale_y_continuous().\nO gráfico apresentado no exemplo anterior (onde configuramos a escala de datas) está com o eixo y limitado na faixa onde os dados são encontrados (11% à 18%). Porém, precisamos ter cuidado ao limitar os eixos, pois isso pode distorcer a visualização dos dados.\nPodemos definir que o eixo y comece em 0 e termine em 20%, utilizando o argumento limits da função scale_y_continuous():\n\ndados |&gt;\n  filter(uf_sigla == \"BA\", ano &gt;= 2022) |&gt;\n  ggplot() +\n  aes(x = trimestre_inicio, y = perc_desocupacao) +\n  geom_line() +\n  geom_point() +\n  scale_y_continuous(limits = c(0, 20))\n\n\n\n\n\n\n\n\n\n\n\nTemas\nOs gráficos que criamos até aqui utilizam o tema padrão do {ggplot2} (podemos identificar facilmente pelo fundo cinza).\nPorém existem funções para customizar o tema dos gráficos, alterando a cor de fundo, a cor dos textos, a fonte, entre outros elementos.\n\n{ggplot2}\nO {ggplot2} apresenta alguns temas que podem ser utilizados nos gráficos, utilizando funções com o prefixo theme_*():\n\nls(\"package:ggplot2\") |&gt; \n  stringr::str_subset(\"^theme_\") \n\n [1] \"theme_bw\"       \"theme_classic\"  \"theme_dark\"     \"theme_get\"     \n [5] \"theme_gray\"     \"theme_grey\"     \"theme_light\"    \"theme_linedraw\"\n [9] \"theme_minimal\"  \"theme_replace\"  \"theme_set\"      \"theme_test\"    \n[13] \"theme_update\"   \"theme_void\"    \n\n\nPor exemplo, podemos alterar o tema do gráfico grafico_ordenado (criado anteriormente) para o tema theme_minimal():\n\ngrafico_com_labels + \n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n{ggthemes}\nO pacote {ggthemes} apresenta vários temas adicionais que podem ser utilizados nos gráficos criados com o {ggplot2}.\n\n1install.packages(\"ggthemes\")\n\n\n1\n\nCaso não tenha o pacote instalado, utilize essa linha de código para instalar o pacote.\n\n\n\n\nA lista abaixo apresenta os temas disponíveis no pacote {ggthemes}:\n\nlibrary(ggthemes)\nls(\"package:ggthemes\") |&gt; \n  stringr::str_subset(\"^theme_\") \n\n [1] \"theme_base\"            \"theme_calc\"            \"theme_clean\"          \n [4] \"theme_economist\"       \"theme_economist_white\" \"theme_excel\"          \n [7] \"theme_excel_new\"       \"theme_few\"             \"theme_fivethirtyeight\"\n[10] \"theme_foundation\"      \"theme_gdocs\"           \"theme_hc\"             \n[13] \"theme_igray\"           \"theme_map\"             \"theme_pander\"         \n[16] \"theme_par\"             \"theme_solarized\"       \"theme_solarized_2\"    \n[19] \"theme_solid\"           \"theme_stata\"           \"theme_tufte\"          \n[22] \"theme_wsj\"            \n\n\nPodemos usar o tema theme_economist() para customizar o gráfico grafico_com_labels:\n\ngrafico_com_labels + \n  ggthemes::theme_economist()\n\n\n\n\n\n\n\n\n\n\n{ipeaplot}\nO pacote {ipeaplot} apresenta a função theme_ipea() que pode ser utilizada nos gráficos criados com o {ggplot2}.\n\n1install.packages(\"ipeaplot\")\n\n\n1\n\nCaso não tenha o pacote instalado, utilize essa linha de código para instalar o pacote.\n\n\n\n\nPodemos usar o tema theme_ipea() para customizar o gráfico abaixo:\n\ndados |&gt;\n  filter(regiao == \"Sul\") |&gt;\n  ggplot() + \n  aes(x = trimestre_inicio, y = perc_desocupacao, color = uf) + \n  geom_line() + \n  ipeaplot::theme_ipea()\n\n\n\n\n\n\n\n\n\n\n\nUsando as funções de customização\nNos exemplos acima, apresentamos algumas funções para customizar os gráficos criados com o {ggplot2}.\nVamos usar essas funções para customizar o gráfico apresentado no exemplo acima:\n\n1grafico_customizado &lt;- dados |&gt;\n  filter(regiao == \"Sul\") |&gt; \n  ggplot() + \n  aes(x = trimestre_inicio, y = perc_desocupacao, color = uf) +  \n  geom_line() + \n2  ipeaplot::theme_ipea() +\n3  ipeaplot::scale_color_ipea(palette = \"Viridis\") +\n4  scale_x_date(breaks = \"1 year\", date_labels = \"%Y\") +\n5  labs(\n    title = \"Taxa de desocupação por estado na região Sul\",\n    subtitle = \"Dados da PNAD Contínua Trimestral\",\n    caption = \"Fonte dos dados: SIDRA/IBGE.\",\n    color = \"Estado\",\n    x = \"Ano\",\n    y = \"Taxa de desocupação (%)\"\n  )\n\ngrafico_customizado\n\n\n1\n\nVamos salvar o resultado do gráfico em um objeto.\n\n2\n\nUtilizando o tema theme_ipea() do pacote {ipeaplot}.\n\n3\n\nUtilizando a função scale_color_ipea() (do pacote {ipeaplot}) com paleta de cores Orange-Blue.\n\n4\n\nCustomizando a escala de data no eixo x: apresentar uma marcação a cada ano.\n\n5\n\nAdicionando títulos e rótulos ao gráfico.",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Visualizando dados"
    ]
  },
  {
    "objectID": "07_visualizacao.html#salvando-os-gráficos",
    "href": "07_visualizacao.html#salvando-os-gráficos",
    "title": "Visualizando dados",
    "section": "Salvando os gráficos",
    "text": "Salvando os gráficos\nPodemos salvar o gráfico em um arquivo, para utilizá-lo posteriormente. Para isso, criamos um objeto contendo o gráfico que queremos salvar, e utilizamos a função ggsave().\nA função ggsave() salva o gráfico em um arquivo, e apresenta dois argumentos principais:\n\nfilename: nome do arquivo onde o gráfico será salvo\nplot: objeto contendo o gráfico que será salvo\n\nEssa função também apresenta alguns argumentos para customizar como o gráfico será salvo, como:\n\nwidth: largura do gráfico\nheight: altura do gráfico\nunits: unidade de medida para a largura e altura do gráfico\ndpi: resolução do gráfico (quanto maior o valor, melhor a qualidade da imagem)\n\nVamos utilizar o gráfico customizado criado anteriormente (salvo no objeto grafico_customizado), e salvar em um arquivo utilizando a função ggsave():\n\n1ggsave(\n2  filename = \"graficos/grafico_customizado.png\",\n3  plot = grafico_customizado,\n4  width = 7,\n5  height = 5,\n6  dpi = 300\n)\n\n\n1\n\nFunção para salvar o gráfico.\n\n2\n\nNome do arquivo onde o gráfico será salvo.\n\n3\n\nObjeto contendo o gráfico que será salvo.\n\n4\n\nLargura do gráfico.\n\n5\n\nAltura do gráfico.\n\n6\n\nResolução do gráfico.\n\n\n\n\nPodemos verificar se o gráfico foi salvo corretamente, utilizando a função file.exists():\n\nfile.exists(\"graficos/grafico_customizado.png\")\n\n[1] TRUE",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Visualizando dados"
    ]
  },
  {
    "objectID": "07_visualizacao.html#preparação-dos-dados",
    "href": "07_visualizacao.html#preparação-dos-dados",
    "title": "Visualizando dados",
    "section": "Preparação dos dados",
    "text": "Preparação dos dados\nOs exemplos que utilizamos mostram um padrão no uso do ggplot2: a base de dados é passada para a função ggplot(), definimos quais variáveis serão mapeadas com a função aes(), e adicionamos uma (ou mais) geometria ao gráfico.\nPorém, algo que pode ser trabalhoso é preparar os dados para o gráfico. Nos exemplos que fizemos anteriormente, utilizamos uma tabela já preparada.\nNo entanto, em muitos casos, precisamos preparar os dados antes de criar o gráfico. Neste caso, muitas funções já vistas em aulas anteriores serão úteis (como filter(), select(), mutate(), group_by(), summarise(), pivot_longer(), pivot_wider(), entre outras). Caso necessário, consulte as aulas Transformando dados e Análise exploratória de dados.\nEm Exemplo prático: Visualização, é apresentado um exemplo prático de visualização de dados, onde é feita a preparação dos dados antes de criar o gráfico.",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Visualizando dados"
    ]
  },
  {
    "objectID": "07_visualizacao.html#sugestões-de-exercícios",
    "href": "07_visualizacao.html#sugestões-de-exercícios",
    "title": "Visualizando dados",
    "section": "Sugestões de exercícios",
    "text": "Sugestões de exercícios\n\nCriando gráficos exploratórios\n\nObserve o gráfico abaixo, criado com o objeto dados_tri_recente, e responda:\n\nQuais são as variáveis mapeadas nos eixos x e y?\nQual é a geometria utilizada?\nExiste algum outro atributo estético mapeado no gráfico?\n\n\n\n\n\n\n\n\n\n\n\n\nObserve o gráfico abaixo, e tente identificar qual é o problema no código. Sugira uma solução para corrigir o problema.\n\n\ndados_tri_recente |&gt;\n  ggplot() + \n  aes(x = perc_desocupacao, y = uf) + \n  geom_col(aes(fill = \"regiao\"))\n\n\n\n\n\n\n\n\n\nCrie um gráfico de linhas para representar a evolução da taxa de desocupação ao longo do tempo para os estados da região Centro Oeste. Use as cores para representar cada estado.\n\n\n\n\n\n\n\nDica 1\n\n\n\n\n\nO resultado esperado é:\n\n\n\n\n\n\n\n\n\n\n\n\n\nCrie um gráfico de linhas para representar a evolução da taxa de desocupação ao longo do tempo para os estados da região Norte. Utilize facetas para separar os gráficos por estado.\n\n\n\n\n\n\n\nDica 1\n\n\n\n\n\nO resultado esperado é:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCustomizando gráficos\n\nCrie um gráfico de linhas para representar a evolução da taxa de desocupação ao longo do tempo para os estados da região Nordeste do Brasil, e salve em um objeto chamado grafico_desocupacao_nordeste. Mapeie os estados na cor das linhas. Com esse objeto, faça as tarefas abaixo:\n\n\n\nConfigure a escala do eixo x para que apareça as marcações dos anos. Isso ajudará a visualizar melhor a periodicidade dos dados.\n\n\nAdicione os títulos e rótulos dos eixos no gráfico.\n\n\nExperimente os temas apresentados anteriormente, e use no gráfico o que mais gostar.\n\n\nAltere a escala de cores das linhas, utilizando uma paleta de cores de sua preferência. Tome cuidado pois estamos mapeando uma variável categórica.\n\n\nSalve o gráfico em um arquivo chamado graficos/grafico_desocupacao_nordeste.png.",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Visualizando dados"
    ]
  },
  {
    "objectID": "07_visualizacao.html#links-citados-na-aula",
    "href": "07_visualizacao.html#links-citados-na-aula",
    "title": "Visualizando dados",
    "section": "Links citados na aula",
    "text": "Links citados na aula\n\nParte 1\n\nSite from data to viz - galeria de gráficos\nR Graph Gallery - Galeria de gráficos\nBoxplot:\n\nTexto sobre interpretação do boxplot\nR Graph Gallery - exemplos de boxplot\n\nSobre gráficos de pizza:\n\nTexto: O que não fazer em gráficos de pizza\nTexto escrito por Julio Trecenti (Dr. em Estatística): Gráficos de pizza são ruins?\n\nSugestão de livros:\n\nStorytelling com Dados - Cole Nussbaumer Knaflic\n\n\n\n\nParte 2\n\nGráficos por Bruno Mioto\nDocumentação: pacote forcats\nColor palette finder",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Visualizando dados"
    ]
  },
  {
    "objectID": "07_visualizacao.html#sugestões-de-materiais",
    "href": "07_visualizacao.html#sugestões-de-materiais",
    "title": "Visualizando dados",
    "section": "Sugestões de materiais",
    "text": "Sugestões de materiais\n\nLivro R para Ciência de Dados 2ed:\n\nVisualização de dados\nVsualizar\nVisualizar: Camadas\nVisualizar: Análise exploratória de dados\nVisualizar: Comunicação\n\nLivro: Metodologia de Pesquisa Jurimétrica:\n\nCapítulo 4 - Visualização\n\n\n\nExtras: Curiosidades e Referências\n\nGrammar of Graphics - livro de Leland Wilkinson, cuja teoria é a base do ggplot2\nggplot2: Elegant Graphics for Data Analysis - livro de Hadley Wickham, criador do ggplot2, Danielle Navarro e Thomas Lin Pedersen (em inglês)",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Visualizando dados"
    ]
  },
  {
    "objectID": "07_visualizacao.html#footnotes",
    "href": "07_visualizacao.html#footnotes",
    "title": "Visualizando dados",
    "section": "Notas de rodapé",
    "text": "Notas de rodapé\n\n\nCaso queira saber mais sobre o gráfico de caixa / boxplot, recomendo a leitura deste texto escrito pela Fernanda Peres, sobre como interpretar o boxplot.↩︎",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Visualizando dados"
    ]
  },
  {
    "objectID": "13_censobr_documentacao.html",
    "href": "13_censobr_documentacao.html",
    "title": "Documentação dos Censos",
    "section": "",
    "text": "Além de funções para leitura dos dados, o pacote {censobr} traz ainda um conjunto de funções que permitem rápido acesso à documentação dos censos demográficos, incluindo os dicionários de variáveis, questionários e manual do entrevistador para entrevistas.\nTabela 2. Funções de documentação disponíveis no {censobr}\n\n\n\n    \n    \n    \n\n\n\n\n\n\n\nFunção\nDocumentação\nTipo\nDisponibilidade\n\n\n1960\n70\n80\n91\n2000\n10\n22\n\n\n\n\ndata_dictionary()\nDicionário de variáveis\nMicrodados\nX\nX\nX\nX\nX\nX\nem breve\n\n\nAgregados de setores censitários\n\n\n\n\nX\nX\nem breve\n\n\nquestionnaire()\nQuestionários\nLongo e curto\nX\nX\nX\nX\nX\nX\nX\n\n\ninterview_manual()\nManual do entrevistador\n-\nX\nX\nX\nX\nX\nX\nX\n\n\n\n\n\n\n\n\nTodas funções de documentação baixam os arquivos em formato .html ou .pdf, e abrem o documento no navegador (browser). Assim como as funções de leitura de dados do {censobr}, essas funções de documentação também salvam os arquivos num cache local na primeira vez que a função é rodada. Assim, quando o usuário roda a função novamente, o pacote simplesmente carrega o arquivo local de maneira quase instantânea.\n\n\n\nA função data_dictionary() carrega o dicionário de variáveis, apontando a definição de cada variável e o significado de suas categorias no caso de variáveis categóricas. Atualmente, a função abrange os dicionários dos microdados da amostra para todos os censos brasileiros desde 1960: c(1960, 1970, 1980, 1991, 2000 e 2010). Além disso, a função também inclui atualmente os dicionários dos dados do universo agregados em setores censitário para os anos 2000 e 2010.\n\nlibrary(censobr)\n\n# dicionário de variáveis de pessoas (microdados da amostra)\ndata_dictionary(year = 2010, \n                dataset = 'population')\n\n# dicionário de variáveis de domicílios (microdados da amostra)\ndata_dictionary(year = 2010, \n                dataset = 'households')\n\n\n# dicionário de variáveis de setores censitários (agregados do universo)\ndata_dictionary(year = 2010, \n                dataset = 'tracts')\n\n\n\n\nCom frequência, é importante se entender a estrutura e fluxo do questionário utilizado em pesquisas de coleta de dados. A função questionnaire() inclui os questionários utilizados na coleta de dados de todos os censos brasileiros desde 1960.\nAlém de passar o parâmetro year, o usuário precisa indicar o tipo de questionário de interesse, se o questionário curto do universo (type = 'short') ou o questionário longo utilizado na pesquisa amostral (type = 'long').\n\n# questionário curto da pesquisa do universo\nquestionnaire(year = 2022, \n              type = 'short')\n\n# questionário longo da pesquisa amostral\nquestionnaire(year = 2022, \n              type = 'long')\n\n\n\n\nPor fim, a função interview_manual() faz o download e abre no navegador o “Manual do Recenseador”, ou seja, o manual de instruções para os recenseadores do IBGE sobre como coletar os dados do censo. Estão disponíveis os manuais de todos os censos desde 1960.\n\n# Censo de 2010\ninterview_manual(year = 2022)\n\n# Censo de 1970\ninterview_manual(year = 1960)",
    "crumbs": [
      "Explorando o Censo Demográfico",
      "Documentação dos Censos"
    ]
  },
  {
    "objectID": "13_censobr_documentacao.html#documentação-do-censo-disponível-no-censobr",
    "href": "13_censobr_documentacao.html#documentação-do-censo-disponível-no-censobr",
    "title": "Documentação dos Censos",
    "section": "",
    "text": "Além de funções para leitura dos dados, o pacote {censobr} traz ainda um conjunto de funções que permitem rápido acesso à documentação dos censos demográficos, incluindo os dicionários de variáveis, questionários e manual do entrevistador para entrevistas.\nTabela 2. Funções de documentação disponíveis no {censobr}\n\n\n\n    \n    \n    \n\n\n\n\n\n\n\nFunção\nDocumentação\nTipo\nDisponibilidade\n\n\n1960\n70\n80\n91\n2000\n10\n22\n\n\n\n\ndata_dictionary()\nDicionário de variáveis\nMicrodados\nX\nX\nX\nX\nX\nX\nem breve\n\n\nAgregados de setores censitários\n\n\n\n\nX\nX\nem breve\n\n\nquestionnaire()\nQuestionários\nLongo e curto\nX\nX\nX\nX\nX\nX\nX\n\n\ninterview_manual()\nManual do entrevistador\n-\nX\nX\nX\nX\nX\nX\nX\n\n\n\n\n\n\n\n\nTodas funções de documentação baixam os arquivos em formato .html ou .pdf, e abrem o documento no navegador (browser). Assim como as funções de leitura de dados do {censobr}, essas funções de documentação também salvam os arquivos num cache local na primeira vez que a função é rodada. Assim, quando o usuário roda a função novamente, o pacote simplesmente carrega o arquivo local de maneira quase instantânea.",
    "crumbs": [
      "Explorando o Censo Demográfico",
      "Documentação dos Censos"
    ]
  },
  {
    "objectID": "13_censobr_documentacao.html#dicionário-de-dados",
    "href": "13_censobr_documentacao.html#dicionário-de-dados",
    "title": "Documentação dos Censos",
    "section": "",
    "text": "A função data_dictionary() carrega o dicionário de variáveis, apontando a definição de cada variável e o significado de suas categorias no caso de variáveis categóricas. Atualmente, a função abrange os dicionários dos microdados da amostra para todos os censos brasileiros desde 1960: c(1960, 1970, 1980, 1991, 2000 e 2010). Além disso, a função também inclui atualmente os dicionários dos dados do universo agregados em setores censitário para os anos 2000 e 2010.\n\nlibrary(censobr)\n\n# dicionário de variáveis de pessoas (microdados da amostra)\ndata_dictionary(year = 2010, \n                dataset = 'population')\n\n# dicionário de variáveis de domicílios (microdados da amostra)\ndata_dictionary(year = 2010, \n                dataset = 'households')\n\n\n# dicionário de variáveis de setores censitários (agregados do universo)\ndata_dictionary(year = 2010, \n                dataset = 'tracts')",
    "crumbs": [
      "Explorando o Censo Demográfico",
      "Documentação dos Censos"
    ]
  },
  {
    "objectID": "13_censobr_documentacao.html#questionários",
    "href": "13_censobr_documentacao.html#questionários",
    "title": "Documentação dos Censos",
    "section": "",
    "text": "Com frequência, é importante se entender a estrutura e fluxo do questionário utilizado em pesquisas de coleta de dados. A função questionnaire() inclui os questionários utilizados na coleta de dados de todos os censos brasileiros desde 1960.\nAlém de passar o parâmetro year, o usuário precisa indicar o tipo de questionário de interesse, se o questionário curto do universo (type = 'short') ou o questionário longo utilizado na pesquisa amostral (type = 'long').\n\n# questionário curto da pesquisa do universo\nquestionnaire(year = 2022, \n              type = 'short')\n\n# questionário longo da pesquisa amostral\nquestionnaire(year = 2022, \n              type = 'long')",
    "crumbs": [
      "Explorando o Censo Demográfico",
      "Documentação dos Censos"
    ]
  },
  {
    "objectID": "13_censobr_documentacao.html#manual-do-entrevistador",
    "href": "13_censobr_documentacao.html#manual-do-entrevistador",
    "title": "Documentação dos Censos",
    "section": "",
    "text": "Por fim, a função interview_manual() faz o download e abre no navegador o “Manual do Recenseador”, ou seja, o manual de instruções para os recenseadores do IBGE sobre como coletar os dados do censo. Estão disponíveis os manuais de todos os censos desde 1960.\n\n# Censo de 2010\ninterview_manual(year = 2022)\n\n# Censo de 1970\ninterview_manual(year = 1960)",
    "crumbs": [
      "Explorando o Censo Demográfico",
      "Documentação dos Censos"
    ]
  },
  {
    "objectID": "03_importacao.html",
    "href": "03_importacao.html",
    "title": "Importando dados",
    "section": "",
    "text": "Conceitos prévios importantes:\n\nFunções e Pacotes no R\nObjetos no R\nProjetos do RStudio (.Rproj) e diretórios de trabalho\nCaminhos de arquivos\nO objetivo da etapa de importação é carregar a base de dados para a memória RAM do computador. Assim conseguiremos utilizar os dados no R.\nEssa etapa pode ser bem rápida (ou não!). Depende da base de dados que precisamos carregar.\nNesta etapa, vamos aprender:\nAo final, teremos também uma lista com sugestão de materiais extras, caso queira aprofundar mais sobre o assunto.\nNesta aula, utilizaremos alguns arquivos baixados na aula Diretórios de trabalho e projetos &gt; Preparando o projeto para o curso.",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Importando dados"
    ]
  },
  {
    "objectID": "03_importacao.html#importando-dados-de-um-arquivo-local",
    "href": "03_importacao.html#importando-dados-de-um-arquivo-local",
    "title": "Importando dados",
    "section": "Importando dados de um arquivo local",
    "text": "Importando dados de um arquivo local\nPara importar dados de um arquivo local, você pode usar funções com o prefixo read_ de pacotes como {readr} e {readxl}.\n\nArquivos de texto (ex: .csv)\nO pacote {readr} permite a leitura de arquivos de texto separados por algum delimitador, como .csv, .tsv e .txt.\n\nlibrary(readr)\n\nPara realizar a importação de um arquivo deste tipo, é importante saber qual é o delimitador utilizado no arquivo.\nA sigla CSV signfica Comma Separated Values, ou seja, valores separados por vírgula. Por padrão, a função read_csv() do pacote {readr} importa arquivos .csv com delimitador ,.\nNo Brasil, é comum a utilização do ; como delimitador, e para isso podemos utilizar a função read_csv2(). Isso acontece pois utilizamos a vírgula como separador decimal (Ex: 4,20) e isso pode causar problemas na importação de arquivos .csv com delimitador ,.\nCaso o arquivo tenha outro delimitador, você pode utilizar a função read_delim() e especificar o delimitador com o argumento delim.\nAo importar, uma mensagem aparecerá no console apresentando algumas informações sobre a importação, como:\n\nnúmero de linhas;\nnúmero de colunas;\ndelimitador utilizado;\ntipos de colunas;\nnome das colunas por tipo;\nquantidade de colunas importadas por tipo.\n\n\n\n\nCaptura de tela do console do RStudio, mostrando a mensagem apresentada pela função read_csv()\n\n\n\nArquivo de texto separado por vírgula (,)\n\n1dados_csv &lt;- read_csv(\"dados/sidrar_4092_bruto.csv\")\n\n\n1\n\nImportando dados de um arquivo .csv, com separador vírgula (,)\n\n\n\n\nRows: 27000 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (6): Nível Territorial, Unidade de Medida, Unidade da Federação, Trimest...\ndbl (7): Nível Territorial (Código), Unidade de Medida (Código), Valor, Unid...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nArquivo de texto separado por ponto e vírgula (;)\n\n1dados_csv_2 &lt;- read_csv2(\"dados/sidrar_4092_bruto_2.csv\")\n\n\n1\n\nImportando dados de um arquivo .csv, com separador ponto e vírgula (;)\n\n\n\n\nℹ Using \"','\" as decimal and \"'.'\" as grouping mark. Use `read_delim()` for more control.\n\n\nRows: 27000 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \";\"\nchr (6): Nível Territorial, Unidade de Medida, Unidade da Federação, Trimest...\ndbl (7): Nível Territorial (Código), Unidade de Medida (Código), Valor, Unid...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\nArquivos Excel (ex: .xlsx)\nO pacote {readxl} permite a leitura de arquivos do Excel.\nA função excel_sheets() do pacote {readxl} retorna o nome das planilhas (Sheets) disponíveis em um arquivo Excel:\n\n1readxl::excel_sheets(\"dados/sidrar_4092_bruto.xlsx\")\n\n\n1\n\nConsultando as planilhas disponíveis no arquivo Excel\n\n\n\n\n[1] \"Sheet1\"\n\n\nA função read_excel() do pacote {readxl} permite a leitura de uma planilha específica de um arquivo Excel, utilizando o argumento sheet para especificar o nome da planilha. Caso o argumento sheet não seja fornecido, a função importará a primeira planilha do arquivo.\n\n1dados_excel &lt;- readxl::read_excel(\"dados/sidrar_4092_bruto.xlsx\", sheet = \"Sheet1\")\n\n\n1\n\nImportando dados de uma planilha do Excel chamada “Sheet1”\n\n\n\n\n\n\nArquivo binário do R (.rds)\nA função read_rds() do pacote {readr} permite importar um arquivo binário do R. Um arquivo binário do R é um formato que preserva a integridade dos tipos de dados ao salvar e carregar objetos1.\n\ndados &lt;- read_rds(\"dados/sidrar_4092_bruto.rds\")\n\n\n\nArquivos do Stata, SPSS, SAS\nPara importar arquivos do Stata, SPSS e SAS, podemos usar o pacote {haven}. Esse pacote é instalado junto com o {tidyverse}.\nPor exemplo, função read_dta() do pacote {haven} permite a leitura de arquivos do Stata:\n\ndados_dta &lt;- haven::read_dta(\"dados/sidrar_4092_bruto.dta\")\n\n\n\nImport Dataset do RStudio\nCaso você esteja com dificuldades, uma dica é usar a funcionalidade Import Dataset do RStudio. Essa funcionalidade permite utilizar uma interface point-and-click para importar dados, e apresenta o código utilizado para a importação.\n\n\n\n\n\n\nDica\n\n\n\nO mais importante ao usar essa funcionalidade é copiar e colar o código gerado no seu script, para que você possa reutilizá-lo posteriormente.\n\n\nPara acessar a funcionalidade Import Dataset, clique em Import Dataset no canto superior direito do painel Environment do RStudio. Caso o arquivo seja um Excel, escolha a opção From Excel. Caso o arquivo seja um texto separado por algum delimitador (como CSV), escolha a opção From Text (readr).\n\n\n\nCaptura de tela do console do RStudio, mostrando o menu onde podemos encontrar o Import Dataset",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Importando dados"
    ]
  },
  {
    "objectID": "03_importacao.html#salvando-dados-localmente",
    "href": "03_importacao.html#salvando-dados-localmente",
    "title": "Importando dados",
    "section": "Salvando dados localmente",
    "text": "Salvando dados localmente\nPara salvar dados localmente, você pode usar funções com o prefixo write_ de pacotes como {readr} e {writexl}. Essas funções solicitam dois argumentos principais:\n\nQual é o objeto que você queremos salvar? Esse objeto deve estar disponível no Environment do R.\nOnde queremos salvar o arquivo? O caminho completo do arquivo deve ser fornecido entre aspas, contendo o diretório onde ele será salvo (em qual pasta do computador) e o nome do arquivo (com a extensão, por exemplo, .csv).\n\nAntes de salvar os dados, vamos criar um diretório onde salvaremos os arquivos. Você pode criar o diretório manualmente ou usar a função fs::dir_create(\"nome_do_diretorio/\") para criar o diretório.\n\nfs::dir_create(\"dados_output\")\n\n\n\n\n\n\n\nAviso\n\n\n\nAtenção: O diretório (pasta no computador) onde o arquivo será salvo deve existir previamente, se não gerará um erro similar a este:\nError: Cannot open file for writing:\n* 'dados_output/sidrar_4092_salvo.csv'\n\n\n\nArquivo de texto (ex: .csv)\nO pacote {readr} permite a escrita de arquivos de texto separados por algum delimitador, como .csv, .tsv e .txt.\nA função write_csv2() premite a escrita de arquivos .csv com separador ;, que é o padrão no Brasil.\n\nwrite_csv2(dados, \"dados_output/sidrar_4092_bruto.csv\")\n\n\n\nArquivo excel (ex: .xlsx)\nA função write_xlsx() do pacote {writexl} permite a escrita de arquivos do Excel.\n\nwritexl::write_xlsx(dados, \"dados_output/sidrar_4092_bruto.xlsx\")\n\n\n\nArquivo binário do R (.rds)\nA função write_rds() do pacote {readr} permite salvar um objeto do R em um arquivo binário do R, preservando a estrutura dos objetos.\nExistem algumas vantagens em salvar arquivos no formato .rds: - Podemos salvar qualquer tipo de objeto do R, como dataframes, listas, vetores, etc.\n\nNão perdemos a estrutura do objeto, como a classe, os tipos das colunas, nível de fatores, etc.\nÉ um arquivo compacto (o arquivo salvo não é grande) e de rápida leitura no R (a importação não demora).\n\n\nwrite_rds(dados, \"dados_output/sidrar_4092_bruto.rds\")",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Importando dados"
    ]
  },
  {
    "objectID": "03_importacao.html#importando-dados-usando-pacotes-de-dados",
    "href": "03_importacao.html#importando-dados-usando-pacotes-de-dados",
    "title": "Importando dados",
    "section": "Importando dados usando pacotes de dados",
    "text": "Importando dados usando pacotes de dados\nExistem pacotes no R que permitem a importação de dados, como por exemplo:\n\nsidrar: Acesso aos dados disponíveis no SIDRA - Sistema IBGE de Recuperação Automática.\ncensobr: Dados de censos demográficos brasileiros.\nipeadatar: Acesso aos dados disponibilizados no Ipeadata.\nflightsbr: Dados de vôos no Brasil.\nPNADcIBGE: Dados da PNAD Contínua do IBGE.\nmicrodatasus: Acesso aos microdados do DataSUS.\n\nA parte boa de usar esses pacotes é que eles já possuem funções prontas para importar os dados.\nA parte não-tão-boa é que os pacotes tem funções específicas para importar os dados, e você precisa aprender como usar essas funções. Recomendamos que você leia a documentação do pacote para entender como usar as funções de importação.\nAo longo deste curso, vamos aprender a usar alguns desses pacotes para importar dados específicos.\n\n\n\n\n\n\nImportante\n\n\n\nEsses pacotes, em geral, obtém as informações na internet. Isso pode demorar um pouco.\nRecomendamos que você salve uma cópia local dos dados brutos após o download. Isso evita a necessidade de baixar os dados novamente e facilita o trabalho localmente, principalmente se a conexão com a internet estiver instável.\nAlguns pacotes, como o {censobr}, apresentam funções preparadas para salvar os dados localmente.\n\n\n\nPacote {sidrar}\nO pacote {sidrar} permite a importação de dados do Sistema IBGE de Recuperação Automática (SIDRA).\nPara importar dados do SIDRA, precisamos saber o código da tabela que desejamos importar. Uma forma de fazer isso é buscar no site do SIDRA, no IBGE: https://sidra.ibge.gov.br/.\n\nBuscando tabelas no SIDRA\nOutra forma é buscar por palavras-chave no próprio R, utilizando a função search_sidra():\n\n# Exemplo de busca por palavras-chave: \n# Tabelas com resultados da PNAD Contínua Trimestral\n1sidrar::search_sidra(\"PNADCT\")\n\n#  [1] \"Tabela 5435 - Pessoas de 14 anos ou mais de idade, ocupadas na semana de referência, por grupamento ocupacional no trabalho principal\"                                                                                                                                                                                                              \n#  [2] \"Tabela 5444 - Rendimento médio mensal real das pessoas de 14 anos ou mais de idade ocupadas na semana de referência com rendimento de trabalho, habitualmente e efetivamente recebidos no trabalho principal, por grupamento ocupacional no trabalho principal\"                                                                                     \n#  [3] \"Tabela 9399 - Pessoas de 16 e 17 anos de idade classificadas na Proxy de Informalidade no trabalho principal e rendimento médio mensal real destas pessoas ocupadas na semana de referência com rendimento de trabalho, habitualmente recebido no trabalho principal, por grupamento ocupacional no trabalho principal - Estatísticas experimentais\"\n#  [4] \"Tabela 9407 - Pessoas de 5 a 17 anos de idade em situação de trabalho infantil no trabalho principal, por grupo de idade e grupamento ocupacional no trabalho principal - Estatísticas experimentais\"                                                                                                                                               \n#  [5] \"Tabela 9440 - Pessoas de 14 anos ou mais de idade ocupadas na semana de referência, exclusive os empregados no setor público e militares, por grupamento ocupacional no trabalho principal e trabalho por meio de plataforma digital de serviço no trabalho principal - Estatísticas experimentais\"                                                 \n#  [6] \"Tabela 9457 - Indicador 8.5.1 - Rendimento médio por hora real das pessoas de 15 anos ou mais de idade ocupadas na semana de referência com rendimento de trabalho, habitualmente recebido em todos os trabalhos, por grupamento ocupacional no trabalho principal\"                                                                                 \n#  [7] \"Tabela 9485 - Percentual de pessoas de 14 anos ou mais de idade ocupadas na semana de referência, exclusive os empregados no setor público e militares, que trabalharam por meio de plataformas de serviços, por grupamento ocupacional no trabalho principal - Estatísticas experimentais\"                                                         \n#  [8] \"Tabela 9504 - Pessoas de 5 a 17 anos de idade que realizam atividade econômica, por grupo de idade e grupamento ocupacional no trabalho principal - Estatísticas experimentais\"                                                                                                                                                                     \n#  [9] \"Tabela 9540 - Percentual de pessoas de 14 anos ou mais de idade ocupadas na semana de referência que realizaram teletrabalho no período de referência de 30 dias, por grupamento ocupacional no trabalho principal - Estatísticas experimentais\"                                                                                                    \n# [10] \"Tabela 9572 - Percentual de pessoas de 14 anos ou mais de idade ocupadas na semana de referência que realizaram teletrabalho no domicílio no período de referência de 30 dias, por grupamento ocupacional no trabalho principal - Estatísticas experimentais\"                                                                                       \n# [11] \"Tabela 9575 - Pessoas de 14 anos ou mais de idade ocupadas na semana de referência que trabalharam no domicílio, por grupamento ocupacional no trabalho principal e frequência do trabalho no domicílio - Estatísticas experimentais\"                                                                                                               \n# [12] \"Tabela 9599 - Pessoas de 14 anos ou mais de idade ocupadas na semana de referência, por grupamento ocupacional no trabalho principal e realização de teletrabalho fora do domicílio no período de referência de 30 dias - Estatísticas experimentais\"                                                                                               \n# [13] \"Tabela 9603 - Percentual de pessoas de 14 anos ou mais de idade ocupadas na semana de referência que realizaram teletrabalho fora do domicílio no período de referência de 30 dias, por grupamento ocupacional no trabalho principal - Estatísticas experimentais\"                                                                                  \n# [14] \"Tabela 9617 - Pessoas de 14 anos ou mais de idade ocupadas na semana de referência, por grupamento ocupacional no trabalho principal e realização de teletrabalho no período de referência de 30 dias - Estatísticas experimentais\"                                                                                                                 \n# [15] \"Tabela 9624 - Pessoas de 14 anos ou mais de idade ocupadas na semana de referência, por grupamento ocupacional no trabalho principal e realização de teletrabalho no domicílio no período de referência de 30 dias - Estatísticas experimentais\" \n\n\n1\n\nExemplo de busca por palavras-chave: tabelas com resultados da PNAD Contínua Trimestral\n\n\n\n\nNeste curso, utilizaremos na maioria das aulas a Tabela 4092 - Pessoas de 14 anos ou mais de idade, por condição em relação à força de trabalho e condição e ocupação, proveniente da Pesquisa Nacional por Amostra de Domicílios Contínua Trimestral (PNADC/T).\n\n\nBuscando informações sobre a tabela\nSabendo o código da tabela, você pode buscar informações sobre a tabela com a função info_sidra().\n\ninfo_4092 &lt;- sidrar::info_sidra(\"4092\")\n\nO resultado dessa função é uma lista, portanto podemos acessar os elementos da lista utilizando o operador $, seguido pelo nome do elemento.\nPrimeiro, podemos ver os nomes dos elementos da lista:\n\nnames(info_4092)\n\n[1] \"table\"              \"period\"             \"variable\"          \n[4] \"classific_category\" \"geo\"               \n\n\nAgora podemos consultar os elementos dessa lista!\n\nNome da tabela\n\ninfo_4092$table\n\n[1] \"Tabela 4092: Pessoas de 14 anos ou mais de idade, por condição em relação à força de trabalho e condição de ocupação\"\n\n\n\n\nPeríodos\nIsso será importante para a importação dos dados, pois podemos informar qual período queremos importar.\n\ninfo_4092$period\n\n[1] \"201201, 201202, 201203, 201204, 201301, 201302, 201303, 201304, 201401, 201402, 201403, 201404, 201501, 201502, 201503, 201504, 201601, 201602, 201603, 201604, 201701, 201702, 201703, 201704, 201801, 201802, 201803, 201804, 201901, 201902, 201903, 201904, 202001, 202002, 202003, 202004, 202101, 202102, 202103, 202104, 202201, 202202, 202203, 202204, 202301, 202302, 202303, 202304, 202401, 202402, 202403, 202404\"\n\n\nEsses dados estão salvos em um vetor de tamanho um, com textos separados por vírgula. Esse formato não é o ideal para usar na função de importação que veremos a seguir: o melhor é transformar em um vetor, onde cada elemento é um período.\nPodemos fazer isso com a função str_split():\n\nperiodos_disponiveis &lt;- stringr::str_split(info_4092$period, \", \")[[1]]\nperiodos_disponiveis\n\n [1] \"201201\" \"201202\" \"201203\" \"201204\" \"201301\" \"201302\" \"201303\" \"201304\"\n [9] \"201401\" \"201402\" \"201403\" \"201404\" \"201501\" \"201502\" \"201503\" \"201504\"\n[17] \"201601\" \"201602\" \"201603\" \"201604\" \"201701\" \"201702\" \"201703\" \"201704\"\n[25] \"201801\" \"201802\" \"201803\" \"201804\" \"201901\" \"201902\" \"201903\" \"201904\"\n[33] \"202001\" \"202002\" \"202003\" \"202004\" \"202101\" \"202102\" \"202103\" \"202104\"\n[41] \"202201\" \"202202\" \"202203\" \"202204\" \"202301\" \"202302\" \"202303\" \"202304\"\n[49] \"202401\" \"202402\" \"202403\" \"202404\"\n\n\nEsses são os períodos disponíveis para essa tabela no SIDRA.\n\n\nVariáveis\nIsso será importante para a importação dos dados, pois podemos informar quais variáveis queremos importar.\n\ninfo_4092$variable\n\n   cod\n1 1641\n2 4087\n3 4104\n4 4105\n                                                                                         desc\n1                                             Pessoas de  anos ou mais de idade (Mil pessoas)\n2                             Coeficiente de variação - Pessoas de  anos ou mais de idade (%)\n3                           Distribuição percentual das pessoas de  anos ou mais de idade (%)\n4 Coeficiente de variação - Distribuição percentual das pessoas de  anos ou mais de idade (%)\n\n\n\n\nVariáveis - Categorias\n\ninfo_4092$classific_category\n\n$`c629 = Condição em relação à força de trabalho e condição de ocupação (5):`\n    cod                           desc\n1 32385                          Total\n2 32386              Força de trabalho\n3 32387    Força de trabalho - ocupada\n4 32446 Força de trabalho - desocupada\n5 32447      Fora da força de trabalho\n\n\n\n\nNível territorial\nIsso será importante para a importação dos dados, pois precisamos informar qual é o nível territorial a ser usado na importação.\n\ninfo_4092$geo\n\n          cod\n1      Brazil\n2         IRD\n3      Region\n4       State\n5        City\n6 MetroRegion\n                                                                                                                 desc\n1                                                                                                          Brasil (1)\n2 Região Integrada de Desenvolvimento  [1º trimestre 2012 a 1º trimestre 2020, 2º trimestre 2022 a 4º trimestre 2024]\n3                                                                                                   Grande Região (5)\n4                                                                                           Unidade da Federação (27)\n5                           Município  [1º trimestre 2012 a 1º trimestre 2020, 2º trimestre 2022 a 4º trimestre 2024]\n6                Região Metropolitana  [1º trimestre 2012 a 1º trimestre 2020, 2º trimestre 2022 a 4º trimestre 2024]\n\n\n\n\n\nImportando a tabela\nA função get_sidra() do pacote {sidrar} permite importar dados do SIDRA.\n\ndados_brutos_4092 &lt;- sidrar::get_sidra(\n1  x = 4092,\n2  period = c(\"201402\", \"201702\", \"202002\", \"202302\"),\n3  geo = \"State\"\n)\n\n\n1\n\nQual é o código da tabela que vamos usar?\n\n2\n\nPeríodos: trimestres, podemos indicar um vetor\n\n3\n\nNível territorial: Dados por UF\n\n\n\n\nLembrando que é importante salvar uma cópia local dos dados após o download. Assim, quando você for trabalhar com esses dados, não precisará baixá-los novamente.\n\n1write_rds(dados_brutos_4092, \"dados_output/sidrar_4092_bruto.rds\")\n\n\n1\n\nSalvar o objeto dados_brutos_4092 em um arquivo .rds, no arquivo \"dados_output/sidrar_4092_bruto.rds\".",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Importando dados"
    ]
  },
  {
    "objectID": "03_importacao.html#sugestões-de-exercícios",
    "href": "03_importacao.html#sugestões-de-exercícios",
    "title": "Importando dados",
    "section": "Sugestões de exercícios",
    "text": "Sugestões de exercícios\n\nFaça a importação da base de dados mananciais.csv, disponível neste link. Dica: você pode utilizar a opção Import Dataset &gt; From Text (readr) localizado no painel Environment do RStudio.\nFaça a importação da base deputados.csv, disponível neste link. Dica: você pode utilizar a opção Import Dataset &gt; From Text (readr) localizado no painel Environment do RStudio.\nBusque no Portal de Dados Abertos da Câmara dos Deputados &gt; Arquivos a tabela de proposições para o ano atual, e importe essa tabela no R.",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Importando dados"
    ]
  },
  {
    "objectID": "03_importacao.html#sugestões-de-materiais",
    "href": "03_importacao.html#sugestões-de-materiais",
    "title": "Importando dados",
    "section": "Sugestões de materiais",
    "text": "Sugestões de materiais\n\nLivro R para Ciência de Dados 2ed:\n\nImportação de dados\n\nVídeo Como organizar seu banco de dados para análises estatísticas, por Fernanda Peres (30 minutos).",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Importando dados"
    ]
  },
  {
    "objectID": "03_importacao.html#footnotes",
    "href": "03_importacao.html#footnotes",
    "title": "Importando dados",
    "section": "Notas de rodapé",
    "text": "Notas de rodapé\n\n\nO formato .rds não é o único formato de arquivo binário do R; outro exemplo é o .Rdata. Existem também formatos externos, como o .parquet, um formato eficiente para grandes volumes de dados e que podem ser lidos no R com o pacote {arrow}. Isso será abordado nos exemplos com o pacote {censobr}.↩︎",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Importando dados"
    ]
  },
  {
    "objectID": "08_regressao_linear.html",
    "href": "08_regressao_linear.html",
    "title": "Regressão linear",
    "section": "",
    "text": "A regressão linear é uma técnica estatística que busca modelar a relação entre uma variável dependente e uma ou mais variáveis independentes. A regressão linear simples é utilizada quando temos apenas uma variável independente, enquanto a regressão linear múltipla é utilizada quando temos mais de uma variável independente.\nNesta aula, exploraremos:\n\nComo ajustar um modelo de regressão linear simples e múltipla no R.\nComo extrair informações sobre o modelo ajustado.\nComo visualizar o ajuste do modelo.\nComo verificar os pressupostos da regressão linear.\nComo extrair tabelas de regressão para apresentação dos resultados.\n\n\n\n\n\n\n\nAviso\n\n\n\nO objetivo desta aula não é aprofundar nos conceitos teóricos da regressão linear, mas sim apresentar como ajustar e explorar funções que permitem ajustar modelos de regressão linear no R. Caso você tenha dúvidas sobre os conceitos teóricos, consulte os materiais sugeridos no final desta aula.",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Regressão linear"
    ]
  },
  {
    "objectID": "08_regressao_linear.html#introdução",
    "href": "08_regressao_linear.html#introdução",
    "title": "Regressão linear",
    "section": "",
    "text": "A regressão linear é uma técnica estatística que busca modelar a relação entre uma variável dependente e uma ou mais variáveis independentes. A regressão linear simples é utilizada quando temos apenas uma variável independente, enquanto a regressão linear múltipla é utilizada quando temos mais de uma variável independente.\nNesta aula, exploraremos:\n\nComo ajustar um modelo de regressão linear simples e múltipla no R.\nComo extrair informações sobre o modelo ajustado.\nComo visualizar o ajuste do modelo.\nComo verificar os pressupostos da regressão linear.\nComo extrair tabelas de regressão para apresentação dos resultados.\n\n\n\n\n\n\n\nAviso\n\n\n\nO objetivo desta aula não é aprofundar nos conceitos teóricos da regressão linear, mas sim apresentar como ajustar e explorar funções que permitem ajustar modelos de regressão linear no R. Caso você tenha dúvidas sobre os conceitos teóricos, consulte os materiais sugeridos no final desta aula.",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Regressão linear"
    ]
  },
  {
    "objectID": "08_regressao_linear.html#instalando-pacotes",
    "href": "08_regressao_linear.html#instalando-pacotes",
    "title": "Regressão linear",
    "section": "Instalando pacotes",
    "text": "Instalando pacotes\nPara esta aula, utilizaremos alguns pacotes do R, que talvez não tenham sido instalados anteriormente:\n\npacotes &lt;- c(\"abjData\", \"broom\", \"car\", \"stargazer\", \"report\")\ninstall.packages(pacotes)",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Regressão linear"
    ]
  },
  {
    "objectID": "08_regressao_linear.html#carregando-pacotes",
    "href": "08_regressao_linear.html#carregando-pacotes",
    "title": "Regressão linear",
    "section": "Carregando pacotes",
    "text": "Carregando pacotes\nVamos carregar o pacote {ggplot2}, que utilizamos anteriormente para elaborar gráficos:\n\nlibrary(ggplot2)\n\nO comando abaixo desabilita a notação científica no R, o que facilita a leitura dos resultados:\n\noptions(scipen = 999)",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Regressão linear"
    ]
  },
  {
    "objectID": "08_regressao_linear.html#importando-os-dados",
    "href": "08_regressao_linear.html#importando-os-dados",
    "title": "Regressão linear",
    "section": "Importando os dados",
    "text": "Importando os dados\nNesta aula, utilizaremos os dados do Programa das Nações Unidas para o Desenvolvimento (PNUD) sobre o Índice de Desenvolvimento Humano Municipal (IDHM) e suas dimensões para os municípios brasileiros em 2010. Esses dados estão disponíveis no pacote abjData.\nVamos filtrar os dados mais recentes disponíveis (censo de 2010) e salvar em um objeto chamado pnud_muni_2010:\n\npnud_muni_2010 &lt;- abjData::pnud_muni |&gt; \n dplyr::filter(ano == 2010) \n\nObs: O pacote abjData contém dados do PNUD para os anos de 1991, 2000 e 2010. Utilizamos apenas os dados de 2010 nesta aula, pois os dados não são independentes entre si. Se quisermos ajustar um modelo com dados de diferentes anos, seria necessário ajustar um modelo longitudinal (em painel), o que foge do escopo desta aula.\n\nDicionário dos dados\nA tabela pnud_muni_2010 contém muitas variáveis, e alguns nomes não são muito descritivos. Podemos consultar o significado de cada variável consultando a tabela pnud_siglas do pacote {abjData}:\n\nnomes_col_pnud_muni_2010 &lt;- abjData::pnud_siglas |&gt; \n  dplyr::filter(sigla %in% names(pnud_muni_2010))\n\nnomes_col_pnud_muni_2010 |&gt; \n  DT::datatable()",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Regressão linear"
    ]
  },
  {
    "objectID": "08_regressao_linear.html#pergunta-a-ser-explorada",
    "href": "08_regressao_linear.html#pergunta-a-ser-explorada",
    "title": "Regressão linear",
    "section": "Pergunta a ser explorada",
    "text": "Pergunta a ser explorada\nQueremos explorar a seguinte pergunta: Dentre as variáveis a seguir, qual explica mais a mortalidade infantil? - t_agua: Percentual da população que vive em domicílios com água encanada. - rdpc: Renda per capita.\n\nnomes_col_pnud_muni_2010 |&gt; \n  dplyr::filter(sigla %in% c(\"mort5\", \"t_agua\", \"rdpc\")) |&gt; \n  knitr::kable()\n\n\n\n\n\n\n\n\n\n\nsigla\nnome_curto\nnome_longo\ndefinicao\n\n\n\n\nmort5\nMortalidade até 5 anos de idade\nMortalidade até cinco anos de idade\nProbabilidade de morrer entre o nascimento e a idade exata de 5 anos, por 1000 crianças nascidas vivas.\n\n\nrdpc\nRenda per capita\nRenda per capita média\nRazão entre o somatório da renda de todos os indivíduos residentes em domicílios particulares permanentes e o número total desses indivíduos. Valores em reais de 01/agosto de 2010.\n\n\nt_agua\n% da população em domicílios com água encanada\nPercentual da população que vive em domicílios com água encanada\nRazão entre a população que vive em domicílios particulares permanentes com água canalizada para um ou mais cômodos e a população total residente em domicílios particulares permanentes multiplicado por 100. A água pode ser proveniente de rede geral, de poço, de nascente ou de reservatório abastecido por água das chuvas ou carro-pipa.",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Regressão linear"
    ]
  },
  {
    "objectID": "08_regressao_linear.html#regressão-linear-simples",
    "href": "08_regressao_linear.html#regressão-linear-simples",
    "title": "Regressão linear",
    "section": "Regressão linear simples",
    "text": "Regressão linear simples\nExistem várias maneiras de ajustar um modelo de regressão linear no R: podemos usar funções do R base, ou funções de outros pacotes, como o {fixest}.\nVamos ajustar um modelo de regressão linear simples utilizando a função função lm(), do R base.\nUma primeira variável que podemos explorar é o acesso à água encanada.\nVamos ajustar um modelo de regressão linear simples para investigar a relação entre a taxa de mortalidade infantil (até 5 anos de idade) (mort5) e o percentual da população que vive em domicílios com água encanada (t_agua) nos municípios brasileiros em 2010.\nEntão, temos que:\n\nVariável dependente (y): mort5\nVariável independente (x): t_agua\n\n\nVisualizando a relação entre as variáveis\nPrimeiramente, podemos visualizar a relação entre as variáveis. Caso você não lembre como fazer isso, consulte a aula sobre visualização de dados.\n\n1pnud_muni_2010 |&gt;\n2  ggplot() +\n3  aes(x = t_agua, y = mort5) +\n4  geom_point(alpha = 0.5) +\n  theme_light()\n\n\n1\n\nUtilizamos os dados do objeto pnud_muni_2010.\n\n2\n\nIniciamos um gráfico.\n\n3\n\nDefinimos as variáveis x e y.\n\n4\n\nAdicionamos a geometria de pontos ao gráfico. O argumento alpha = 0.5 define a transparência dos pontos em 50%.\n\n\n\n\n\n\n\n\n\n\n\n\n\nAjustando o modelo\nUma maneira é usar a função lm(), de linear model (modelo linear), para ajustar o modelo de regressão linear simples. Essa função recebe como argumentos a fórmula do modelo (y ~ x, lê-se y em função de x) e os dados (argumento data).\n\nmodelo_linear &lt;- lm(mort5 ~ t_agua, data = pnud_muni_2010)\n\n\n\nExplorando o modelo ajustado\nPodemos explorar o resultado do modelo ajustado de várias formas!\nA função summary() nos fornece um resumo do modelo ajustado:\n\nsummary(modelo_linear)\n\n\nCall:\nlm(formula = mort5 ~ t_agua, data = pnud_muni_2010)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-22.495  -4.023  -1.222   2.693  29.999 \n\nCoefficients:\n             Estimate Std. Error t value            Pr(&gt;|t|)    \n(Intercept) 44.232115   0.489983   90.27 &lt;0.0000000000000002 ***\nt_agua      -0.265179   0.005641  -47.01 &lt;0.0000000000000002 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 6.195 on 5563 degrees of freedom\nMultiple R-squared:  0.2843,    Adjusted R-squared:  0.2841 \nF-statistic:  2210 on 1 and 5563 DF,  p-value: &lt; 0.00000000000000022\n\n\nPodemos extrair uma tibble com informações sobre o modelo ajustado utilizando as funções tidy() e glance() do pacote {broom}. A função broom::tidy() nos fornece informações sobre os coeficientes do modelo ajustado.\n\nbroom::tidy(modelo_linear) |&gt; \n  knitr::kable()\n\n\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n44.2321150\n0.4899828\n90.27279\n0\n\n\nt_agua\n-0.2651793\n0.0056414\n-47.00575\n0\n\n\n\n\n\nOs resultados da função broom::glance() são relativos ao ajuste do modelo, sendo útil para comparar diferentes modelos.\n\nbroom::glance(modelo_linear)|&gt; \n  knitr::kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nr.squared\nadj.r.squared\nsigma\nstatistic\np.value\ndf\nlogLik\nAIC\nBIC\ndeviance\ndf.residual\nnobs\n\n\n\n\n0.2842752\n0.2841465\n6.194827\n2209.541\n0\n1\n-18044.36\n36094.73\n36114.6\n213485\n5563\n5565\n\n\n\n\n\nA função report::report() nos fornece um relatório completo sobre o modelo ajustado:\n\nreport::report(modelo_linear) \n\nWe fitted a linear model (estimated using OLS) to predict mort5 with t_agua\n(formula: mort5 ~ t_agua). The model explains a statistically significant and\nsubstantial proportion of variance (R2 = 0.28, F(1, 5563) = 2209.54, p &lt; .001,\nadj. R2 = 0.28). The model's intercept, corresponding to t_agua = 0, is at\n44.23 (95% CI [43.27, 45.19], t(5563) = 90.27, p &lt; .001). Within this model:\n\n  - The effect of t agua is statistically significant and negative (beta = -0.27,\n95% CI [-0.28, -0.25], t(5563) = -47.01, p &lt; .001; Std. beta = -0.53, 95% CI\n[-0.56, -0.51])\n\nStandardized parameters were obtained by fitting the model on a standardized\nversion of the dataset. 95% Confidence Intervals (CIs) and p-values were\ncomputed using a Wald t-distribution approximation.\n\n\n\n\nInterpretação dos resultados\nA equação ajustada é:\n\\[\nmort5 = 44.23 - 0.27 \\times tagua\n\\] - Interpretação do Coeficiente de t_agua: Para cada aumento de 1% no percentual de água encanada, espera-se uma redução de 0.27 na taxa de mortalidade infantil (por 1000 nascidos vivos).\n\nInterpretação do Intercepto: Se o percentual de água encanada fosse 0, a mortalidade infantil seria de 44.23 por 1000 nascidos vivos. Este valor pode não ser relevante na prática, mas é útil para entender o comportamento do modelo.\nR²: O valor de ( R^2 = 0.28 ) significa que cerca de 28% da variação na taxa de mortalidade infantil (mort5) é explicada pela variação no percentual de acesso à água encanada (t_agua).\nSignificância: O p-valor muito pequeno (p &lt; 0.001) indica que o acesso à água encanada tem uma relação estatisticamente significativa com a mortalidade infantil.\nSignificância do p-valor: O p-valor muito baixo (&lt; 0.001) indica que há evidência de que existe uma relação estatisticamente significativa entre o percentual de água encanada e a mortalidade infantil.\n\n\n\nVisualizando o ajuste do modelo\nPara adicionar a linha de regressão ao gráfico anterior, podemos criar uma nova tabela com as predições do modelo linear e os resíduos:\n\npnud_muni_2010_adjusted &lt;- pnud_muni_2010 |&gt;\n  dplyr::mutate(\n1    valores_ajustados = predict(modelo_linear),\n2    residuos = mort5 - valores_ajustados\n  ) \n\n\n1\n\nAdiciona uma nova coluna chamada valores_ajustados ao data.frame contendo as predições do modelo linear, utilizando a função predict().\n\n2\n\nAdiciona uma nova coluna chamada residuos ao data.frame contendo os resíduos do modelo linear: a diferença entre os valores reais (mort5) e os valores previstos pelo modelo.\n\n\n\n\nAgora, podemos adicionar a linha de regressão ao gráfico anterior:\n\npnud_muni_2010_adjusted |&gt; \n  ggplot() + \n  aes(x = t_agua, y = mort5) + \n  geom_point(alpha = 0.5) + \n1  geom_line(aes(y = valores_ajustados), color = \"blue\", linewidth = 1) +\n  theme_light()\n\n\n1\n\nAdiciona a linha de regressão com base nas predições do modelo.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngeom_smooth()\n\n\n\n\n\nA função geom_smooth() do pacote {ggplot2} também pode ser utilizada para adicionar uma linha de regressão ao gráfico.\nNo entanto, a função geom_smooth() não utiliza as predições do modelo linear que ajustamos, e sim realiza um ajuste (utilizando alguns métodos que podem ser consultados na documentação):\n\npnud_muni_2010 |&gt; \n  ggplot() + \n  aes(x = t_agua, y = mort5) + \n  geom_point(alpha = 0.5) + \n  geom_smooth(method = \"lm\", se = FALSE, color = \"blue\") + \n  theme_light()\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPressupostos da Regressão Linear\nAgora que sabemos ajustar um modelo de regressão linear simples, é importante verificar se os pressupostos da regressão linear estão sendo respeitados.\n\nLinearidade: A relação entre a variável dependente e a(s) variável(is) independente(s) deve ser linear.\nIndependência dos Erros: Os erros devem ser independentes uns dos outros. Não queremos que eles tenham uma ordem ou relação com as variáveis independentes.\nHomoscedasticidade: A variância dos erros deve ser constante ao longo de todos os níveis da variável independente.\nNormalidade dos Erros: Os erros devem seguir uma distribuição normal.\n\nPodemos verificar esses pressupostos utilizando gráficos de diagnóstico, que discutiremos em breve.\n\n\nDiagnóstico de Modelos\nUtilizar gráficos de diagnóstico ajuda a verificar se os pressupostos do modelo estão sendo respeitados. Vamos explorar alguns gráficos de diagnóstico, que são úteis para tomar decisões sobre o modelo!\n\nHistograma dos resíduos\nPara que os pressupostos sejam satisfeitos, espera-se uma uma distribuição simétrica e aproximadamente normal.\nA curva de densidade adicionada ao histograma permite verificar visualmente se os resíduos seguem uma distribuição normal. Se a curva de densidade não se parecer com uma curva gaussiana, isso pode ser um indicativo de que os resíduos não são normalmente distribuídos, violando um dos pressupostos da regressão linear.\n\n1pnud_muni_2010_adjusted |&gt;\n2  ggplot(aes(x = residuos)) +\n3  geom_histogram(\n4    aes(y = after_stat(density)),\n5    fill = \"lightblue\"\n  ) +\n6  geom_density() +\n7  theme_light()\n\n\n1\n\nUtilizando os dados que contém os resíduos do modelo ajustado.\n\n2\n\nIniciando o gráfico, e definindo a variável x como os resíduos.\n\n3\n\nAdicionando a geometria de histograma.\n\n4\n\nNos atributos estéticos (aes()), definimos que o eixo y do histograma será a densidade dos resíduos. Quando criamos um histograma, os valores padrão no eixo y correspondem à contagem de observações em cada intervalo (bin). Ao utilizar after_stat(density), estamos instruindo o ggplot2 a calcular a densidade ao invés da contagem bruta.\n\n5\n\nDefinindo a cor de preenchimento do histograma.\n\n6\n\nAdicionando a geometria de densidade.\n\n7\n\nAplicando o tema theme_light() ao gráfico.\n\n\n\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\n\n\nGráfico de resíduos vs valores ajustados\nPara que os pressupostos sejam satisfeitos, os pontos devem estar distribuídos aleatoriamente em torno de zero. Se houver um padrão nos resíduos, pode indicar que a relação entre as variáveis não é linear.\nA interpretação do gráfico a seguir é de que talvez o modelo linear não seja o mais adequado para ajustar esses dados, pois os resíduos não estão distribuídos aleatoriamente.\n\ncar::residualPlot(modelo_linear)\n\n\n\n\n\n\n\n\n\n\nTeste de homocedasticidade\nPara que os pressupostos sejam satisfeitos, espera-se que a variância dos erros seja constante ao longo de todos os níveis da variável independente. Para verificar isso, podemos utilizar a função car::ncvTest(), que testa a homocedasticidade dos resíduos.\nUm p-valor muito pequeno (p &lt; 0.001) sugere que os resíduos não possuem variância constante (heterocedasticidade), o que pode violar um dos pressupostos da regressão linear.\nNeste modelo, o pressuposto de homocedasticidade não é satisfeito.\n\ncar::ncvTest(modelo_linear)\n\nNon-constant Variance Score Test \nVariance formula: ~ fitted.values \nChisquare = 280.5612, Df = 1, p = &lt; 0.000000000000000222\n\n\n\n\nQ-Q plot para normalidade dos resíduos\nPara que os pressupostos sejam satisfeitos, os pontos devem seguir a linha reta, o que indicaria que os resíduos seguem uma distribuição normal. Desvios significativos da linha indicam que os resíduos não são normais.\nNo caso do exemplo a seguir, os resíduos não seguem uma distribuição normal.\n\ncar::qqPlot(modelo_linear)\n\n\n\n\n\n\n\n\n[1]  482 1733\n\n\n\n\n\nExtraindo tabelas de regressão\nPodemos extrair tabelas de regressão para apresentar os resultados do modelo ajustado.\nExistem diversos pacotes que podem ser utilizados para extrair tabelas de regressão, como:\n\n{stargazer}\n{gtsummary}\n{fixest}\n{modelsummary}\n\nVamos utilizar a função stargazer::stargazer(). Essa função pode gerar tabelas de regressão em diferentes formatos, como texto, HTML, LaTeX e Markdown.\n\nstargazer::stargazer(modelo_linear, type = \"text\")\n\n\n===============================================\n                        Dependent variable:    \n                    ---------------------------\n                               mort5           \n-----------------------------------------------\nt_agua                       -0.265***         \n                              (0.006)          \n                                               \nConstant                     44.232***         \n                              (0.490)          \n                                               \n-----------------------------------------------\nObservations                   5,565           \nR2                             0.284           \nAdjusted R2                    0.284           \nResidual Std. Error      6.195 (df = 5563)     \nF Statistic         2,209.541*** (df = 1; 5563)\n===============================================\nNote:               *p&lt;0.1; **p&lt;0.05; ***p&lt;0.01\n\n\nCuidado: observe que na última linha (Note: *p&lt;0.1; **p&lt;0.05; ***p&lt;0.01) o resultado em HTML apresenta asteriscos a menos do que o resultado em texto. Isso ocorre porque o Markdown interpreta o asterisco como um comando de itálico (*) ou negrito (**) (e utilizamos Markdown para a construção deste site).\nstargazer::stargazer(modelo_linear, type = \"html\")\n\n\n\n\n\n\n\n\n\nDependent variable:\n\n\n\n\n\n\n\n\n\n\n\n\nmort5\n\n\n\n\n\n\n\n\nt_agua\n\n\n-0.265***\n\n\n\n\n\n\n(0.006)\n\n\n\n\n\n\n\n\n\n\nConstant\n\n\n44.232***\n\n\n\n\n\n\n(0.490)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nObservations\n\n\n5,565\n\n\n\n\nR2\n\n\n0.284\n\n\n\n\nAdjusted R2\n\n\n0.284\n\n\n\n\nResidual Std. Error\n\n\n6.195 (df = 5563)\n\n\n\n\nF Statistic\n\n\n2,209.541*** (df = 1; 5563)\n\n\n\n\n\n\n\n\nNote:\n\n\np&lt;0.1; p&lt;0.05; p&lt;0.01\n\n\n\n\n\nInterpretação final\n\nO modelo que ajustamos pode não ser o mais adequado para explicar a relação entre a taxa de mortalidade infantil e o percentual de acesso à água encanada, pois os pressupostos da regressão linear não foram atendidos. Pode ser necessário ajustar um modelo mais complexo.\nA taxa de mortalidade infantil é influenciada por diversos fatores, e o acesso à água encanada pode ser apenas um deles. É interessante investigar se outras variáveis como renda, educação, saneamento básico, entre outras, são importantes para explicar a mortalidade infantil.",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Regressão linear"
    ]
  },
  {
    "objectID": "08_regressao_linear.html#regressão-linear-múltipla",
    "href": "08_regressao_linear.html#regressão-linear-múltipla",
    "title": "Regressão linear",
    "section": "Regressão linear múltipla",
    "text": "Regressão linear múltipla\nAté agora, ajustamos um modelo de regressão linear simples. No entanto, é possível ajustar um modelo de regressão linear múltipla, que inclui mais de uma variável independente.\nNa regressão linear múltipla, incluímos mais de uma variável independente para tentar capturar diferentes fatores que podem influenciar a variável dependente.\nQuando ajustamos um modelo de regressão múltipla, estamos tentando entender como a variável dependente (por exemplo, mort5) é afetada por várias variáveis independentes (como t_agua e rdpc).\nAdicionar variáveis pode melhorar a precisão do modelo, reduzindo o erro e aumentando o (R^2), que nos diz quanta variação na variável dependente é explicada pelas variáveis independentes.\nVamos ajustar um modelo de regressão linear múltipla para investigar a relação entre a taxa de mortalidade infantil (até 5 anos de idade) (mort5) e o percentual da população que vive em domicílios com água encanada (t_agua) e a renda per capita (rdpc) nos municípios brasileiros em 2010.\nEntão, temos que:\n\nVariável dependente (y): mort5\nVariáveis independentes (x): t_agua e rdpc\n\n\nAjustando o modelo de regressão linear múltipla\nPara ajustar um modelo de regressão linear múltipla, basta adicionar as variáveis independentes separadas por + na fórmula do modelo.\n\nmodelo_linear_multiplo &lt;- lm(mort5 ~ t_agua + rdpc, data = pnud_muni_2010)\n\nDaqui em diante, o processo é semelhante ao que fizemos para o modelo de regressão linear simples.\n\nExplorando o modelo ajustado\nPodemos explorar o resultado do modelo ajustado com a função summary():\n\nsummary(modelo_linear_multiplo)\n\n\nCall:\nlm(formula = mort5 ~ t_agua + rdpc, data = pnud_muni_2010)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-14.9472  -3.2528  -0.8473   2.1257  24.1132 \n\nCoefficients:\n             Estimate Std. Error t value            Pr(&gt;|t|)    \n(Intercept) 38.367673   0.395156   97.09 &lt;0.0000000000000002 ***\nt_agua      -0.085605   0.005337  -16.04 &lt;0.0000000000000002 ***\nrdpc        -0.019260   0.000323  -59.63 &lt;0.0000000000000002 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 4.839 on 5562 degrees of freedom\nMultiple R-squared:  0.5634,    Adjusted R-squared:  0.5633 \nF-statistic:  3589 on 2 and 5562 DF,  p-value: &lt; 0.00000000000000022\n\n\n\n\nVisualizando o ajuste do modelo\nA etapa de visualização do ajuste do modelo de regressão linear múltipla é um pouco mais complexa, pois estamos lidando com mais de uma variável independente.\nPrecisamos criar um gráfico para cada variável independente, mantendo as outras variáveis independentes constantes.\nPara isso, primeiro vamos criar uma nova tabela com os valores constantes das variáveis independentes (utilizando a média):\n\npnud_muni_2010_ajustado_agua &lt;- pnud_muni_2010 |&gt; \n  dplyr::mutate(\n1    rdpc = mean(rdpc)\n  )\n\npnud_muni_2010_ajustado_rdpc &lt;- pnud_muni_2010 |&gt;\n  dplyr::mutate(\n2    t_agua = mean(t_agua)\n  )\n\n\n1\n\nCriando uma nova tabela (pnud_muni_2010_ajustado_agua), onde a variável rdpc é constante, utilizando a média dos valores.\n\n2\n\nCriando uma nova tabela (pnud_muni_2010_ajustado_rdpc), onde a variável t_agua é constante, utilizando a média dos valores.\n\n\n\n\nAgora, vamos criar uma nova tabela com os valores ajustados para cada uma das variáveis independentes constantes (utilizando os dados criados na etapa anterior no argumento newdata):\n\npnud_muni_2010_ajustado_multiplo &lt;- pnud_muni_2010 |&gt;\n  dplyr::mutate(\n1    valores_ajustados_agua = predict(\n      modelo_linear_multiplo, \n      newdata = pnud_muni_2010_ajustado_agua\n      ),\n    \n2    valores_ajustados_rdpc = predict(\n      modelo_linear_multiplo, \n      newdata = pnud_muni_2010_ajustado_rdpc\n      )\n  ) \n\n\n1\n\nAdicionando uma nova coluna chamada valores_ajustados_agua ao data.frame contendo os ajustes do modelo linear múltiplo, utilizando a função predict(), e os dados pnud_muni_2010_ajustado_agua (onde a variável rdpc é constante).\n\n2\n\nAdicionando uma nova coluna chamada valores_ajustados_rdpc ao data.frame contendo os ajustes do modelo linear múltiplo, utilizando a função predict(), e os dados pnud_muni_2010_ajustado_rdpc (onde a variável t_agua é constante).\n\n\n\n\nAgora, podemos criar os gráficos para visualizar o ajuste do modelo de regressão linear múltipla.\nO gráfico a seguir mostra a relação entre a taxa de mortalidade infantil e o percentual de acesso à água encanada, mantendo as outras variáveis independentes constantes:\n\npnud_muni_2010_ajustado_multiplo |&gt; \n  ggplot() +\n1  geom_point(aes(x = t_agua, y = mort5), alpha = 0.5) +\n2  geom_line(aes(x = t_agua, y = valores_ajustados_agua), color = \"red\") +\n  theme_light()\n\n\n1\n\nAdicionando a geometria de pontos ao gráfico, com os valores de t_agua no eixo x e mort5 no eixo y.\n\n2\n\nAdicionando a linha de regressão ao gráfico, com os valores ajustados (mantendo as outras variáveis independentes constantes).\n\n\n\n\n\n\n\n\n\n\n\nO gráfico a seguir mostra a relação entre a taxa de mortalidade infantil e a renda per capita, mantendo as outras variáveis independentes constantes:\n\npnud_muni_2010_ajustado_multiplo |&gt; \n  ggplot() +\n1  geom_point(aes(x = rdpc, y = mort5), alpha = 0.5) +\n2  geom_line(aes(x = rdpc, y = valores_ajustados_rdpc), color = \"red\") +\n  theme_light() \n\n\n1\n\nAdicionando a geometria de pontos ao gráfico, com os valores de rdpc no eixo x e mort5 no eixo y.\n\n2\n\nAdicionando a linha de regressão ao gráfico, com os valores ajustados (mantendo a t_agua constante).\n\n\n\n\n\n\n\n\n\n\n\nO gráfico acima indica que a relação entre rdpc e mort5 não é linear. Nesse caso, podemos tentar transformar a variável rdpc e testar novamente ajustar um modelo linear.\nVamos tentar ajustar um modelo de regressão linear múltipla com a variável rdpc transformada em logaritmo (log()).\n\n\n\nModelando a variável rdpc transformada em log()\nTransformações em variáveis são usadas quando a relação entre as variáveis independentes e a dependente não é linear. No nosso exemplo, a relação entre rdpc e mort5 não é linear. Ao aplicar a transformação logarítmica à variável rdpc, tentamos “linearizar” a relação, o que pode melhorar a capacidade do modelo de capturar a verdadeira relação entre as variáveis.\nVamos ajustar um modelo de regressão linear múltipla com a variável rdpc transformada em logaritmo.\nPara isso, primeiro vamos criar uma nova variável rdpc_log com a transformação logarítmica da variável rdpc, e salvar em um novo objeto chamado pnud_muni_2010_com_log:\n\npnud_muni_2010_com_log &lt;- pnud_muni_2010 |&gt; \n  dplyr::mutate(rdpc_log = log(rdpc)) \n\nAgora, vamos ajustar um modelo de regressão linear múltipla com a variável rdpc_log:\n\nmodelo_linear_multiplo_log &lt;- lm(mort5 ~ t_agua + rdpc_log,\n                                 data = pnud_muni_2010_com_log)\n\nVamos explorar o resultado do modelo ajustado:\n\nsummary(modelo_linear_multiplo_log)\n\n\nCall:\nlm(formula = mort5 ~ t_agua + rdpc_log, data = pnud_muni_2010_com_log)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-20.318  -2.828  -0.552   2.155  21.005 \n\nCoefficients:\n              Estimate Std. Error t value             Pr(&gt;|t|)    \n(Intercept)  92.320911   0.725668 127.222 &lt; 0.0000000000000002 ***\nt_agua       -0.015457   0.005172  -2.988              0.00282 ** \nrdpc_log    -11.425230   0.151703 -75.313 &lt; 0.0000000000000002 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 4.359 on 5562 degrees of freedom\nMultiple R-squared:  0.6456,    Adjusted R-squared:  0.6455 \nF-statistic:  5067 on 2 and 5562 DF,  p-value: &lt; 0.00000000000000022\n\n\n\nVisualizando o ajuste do modelo\nVamos visualizar o ajuste do modelo (similar ao que fizemos anteriormente). Para isso, vamos criar uma nova tabela com os valores constantes das variáveis independentes (utilizando a média):\n\npnud_muni_2010_ajustado_agua_log &lt;- pnud_muni_2010_com_log |&gt; \n  dplyr::mutate(\n1    rdpc_log = mean(rdpc_log),\n  )\n\npnud_muni_2010_ajustado_rdpc_log  &lt;- pnud_muni_2010_com_log |&gt;\n  dplyr::mutate(\n2    t_agua = mean(t_agua)\n  )\n\n\n1\n\nCriando uma nova tabela (pnud_muni_2010_ajustado_agua), onde a variável é rdpc_log constante, utilizando a média dos valores.\n\n2\n\nCriando uma nova tabela (pnud_muni_2010_ajustado_rdpc), onde a variável é t_agua constante, utilizando a média dos valores.\n\n\n\n\nPodemos criar uma nova tabela com os valores ajustados para cada uma das variáveis independentes constantes (utilizando os dados criados na etapa anterior no argumento newdata):\n\npnud_muni_2010_ajustado_multiplo_log &lt;- pnud_muni_2010_com_log |&gt;\n  dplyr::mutate(\n1    valores_ajustados_agua = predict(\n      modelo_linear_multiplo_log,\n      newdata = pnud_muni_2010_ajustado_agua_log),\n    \n2    valores_ajustados_rdpc = predict(\n      modelo_linear_multiplo_log,\n      newdata = pnud_muni_2010_ajustado_rdpc_log),\n    \n3    valores_ajustados = predict(modelo_linear_multiplo_log),\n    \n4    residuos = mort5 - valores_ajustados\n  ) \n\n\n1\n\nAdicionando uma nova coluna chamada valores_ajustados_agua ao data.frame contendo os ajustes do modelo linear múltiplo, utilizando a função predict(), e os dados pnud_muni_2010_ajustado_agua_log (onde a variável rdpc_log é constante).\n\n2\n\nAdicionando uma nova coluna chamada valores_ajustados_rdpc ao data.frame contendo os ajustes do modelo linear múltiplo, utilizando a função predict(), e os dados pnud_muni_2010_ajustado_rdpc_log (onde a variável t_agua é constante).\n\n3\n\nAdicionando uma nova coluna chamada valores_ajustados ao data.frame contendo os ajustes do modelo linear múltiplo.\n\n4\n\nAdicionando uma nova coluna chamada residuos ao data.frame contendo os resíduos do modelo linear: a diferença entre os valores reais (mort5) e os valores previstos pelo modelo.\n\n\n\n\nAgora, vamos visualizar o ajuste do modelo de regressão linear múltipla com a variável rdpc transformada em logaritmo.\n\npnud_muni_2010_ajustado_multiplo_log |&gt; \n  ggplot() +\n  geom_point(aes(x = t_agua, y = mort5), alpha = 0.5) +\n  geom_line(aes(x = t_agua, y = valores_ajustados_agua), color = \"red\") +\n  theme_light() \n\n\n\n\n\n\n\n\n\npnud_muni_2010_ajustado_multiplo_log |&gt; \n  ggplot() +\n  geom_point(aes(x = rdpc_log, y = mort5), alpha = 0.5) +\n  geom_line(aes(x = rdpc_log, y = valores_ajustados_rdpc), color = \"red\") +\n  theme_light() \n\n\n\n\n\n\n\n\nO segundo gráfico indica que o resultado do modelo ajustado com a variável rdpc transformada em logaritmo é melhor do que o modelo anterior. Vamos seguir com a análise do modelo ajustado.\n\n\nExplorando o modelo ajustado\nPodemos explorar o resultado do modelo ajustado com a função summary(), broom::tidy() e report::report():\n\nreport::report(modelo_linear_multiplo_log) \n\nWe fitted a linear model (estimated using OLS) to predict mort5 with t_agua and\nrdpc_log (formula: mort5 ~ t_agua + rdpc_log). The model explains a\nstatistically significant and substantial proportion of variance (R2 = 0.65,\nF(2, 5562) = 5067.02, p &lt; .001, adj. R2 = 0.65). The model's intercept,\ncorresponding to t_agua = 0 and rdpc_log = 0, is at 92.32 (95% CI [90.90,\n93.74], t(5562) = 127.22, p &lt; .001). Within this model:\n\n  - The effect of t agua is statistically significant and negative (beta = -0.02,\n95% CI [-0.03, -5.32e-03], t(5562) = -2.99, p = 0.003; Std. beta = -0.03, 95%\nCI [-0.05, -0.01])\n  - The effect of rdpc log is statistically significant and negative (beta =\n-11.43, 95% CI [-11.72, -11.13], t(5562) = -75.31, p &lt; .001; Std. beta = -0.78,\n95% CI [-0.80, -0.76])\n\nStandardized parameters were obtained by fitting the model on a standardized\nversion of the dataset. 95% Confidence Intervals (CIs) and p-values were\ncomputed using a Wald t-distribution approximation.\n\n\n\nbroom::tidy(modelo_linear_multiplo_log) |&gt; \n  knitr::kable()\n\n\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n92.3209109\n0.7256681\n127.221954\n0.0000000\n\n\nt_agua\n-0.0154565\n0.0051725\n-2.988236\n0.0028182\n\n\nrdpc_log\n-11.4252299\n0.1517033\n-75.312971\n0.0000000\n\n\n\n\n\n\n\nDiagnóstico do Modelo de Regressão Múltipla\nOs diagnósticos do modelo de regressão múltipla são similares aos da regressão simples, mas é importante prestar mais atenção nos resíduos, pois agora temos mais de uma variável explicativa.\nOs mesmos pressupostos de linearidade, independência dos erros, homocedasticidade e normalidade dos resíduos precisam ser verificados.\n\nHistograma dos resíduos\n\npnud_muni_2010_ajustado_multiplo_log |&gt;\n  ggplot(aes(x = residuos)) +\n  geom_histogram(\n    aes(y = after_stat(density)),\n    fill = \"lightblue\"\n  ) +\n  geom_density() +\n  theme_light()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\n\n\nGráfico de resíduos vs valores ajustados\nÉ importante verificar se os resíduos estão distribuídos de forma aleatória. Se houver padrões, o modelo pode estar mal especificado.\n\ncar::residualPlot(modelo_linear_multiplo_log)\n\n\n\n\n\n\n\n\n\n\nTeste de homocedasticidade\nÉ importante verificar se a variância dos resíduos é constante ao longo dos valores ajustados.\n\ncar::ncvTest(modelo_linear_multiplo_log)\n\nNon-constant Variance Score Test \nVariance formula: ~ fitted.values \nChisquare = 1154.345, Df = 1, p = &lt; 0.000000000000000222\n\n\n\n\nQ-Q plot para normalidade dos resíduos\nÉ importante verificar a normalidade dos resíduos.\n\ncar::qqPlot(modelo_linear_multiplo_log)\n\n\n\n\n\n\n\n\n[1]  586 1733\n\n\n\n\n\nExtraindo tabelas de regressão\n\nstargazer::stargazer(modelo_linear_multiplo_log, type = \"text\")\n\n\n===============================================\n                        Dependent variable:    \n                    ---------------------------\n                               mort5           \n-----------------------------------------------\nt_agua                       -0.015***         \n                              (0.005)          \n                                               \nrdpc_log                    -11.425***         \n                              (0.152)          \n                                               \nConstant                     92.321***         \n                              (0.726)          \n                                               \n-----------------------------------------------\nObservations                   5,565           \nR2                             0.646           \nAdjusted R2                    0.646           \nResidual Std. Error      4.359 (df = 5562)     \nF Statistic         5,067.019*** (df = 2; 5562)\n===============================================\nNote:               *p&lt;0.1; **p&lt;0.05; ***p&lt;0.01",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Regressão linear"
    ]
  },
  {
    "objectID": "08_regressao_linear.html#sugestões-de-exercícios",
    "href": "08_regressao_linear.html#sugestões-de-exercícios",
    "title": "Regressão linear",
    "section": "Sugestões de exercícios",
    "text": "Sugestões de exercícios\n\nUtilize os dados de 2010 do PNUD que já carregamos (pnud_muni_2010). Ajuste um modelo de regressão linear simples para investigar a relação entre a taxa de mortalidade infantil (até 5 anos de idade) (mort5) e a renda per capita (rdpc), disponível nos dados.\n\n\nIdentifique qual é a variável dependente e qual é a variável independente.\nVisualize a relação entre essas duas variáveis utilizando um gráfico de dispersão. Antes de ajustar o modelo, o que você espera encontrar? Parece haver uma relação linear entre as variáveis?\nAjuste um modelo de regressão linear simples.\nInterprete o coeficiente da variável rdpc.\nApós ajustar o modelo no exercício anterior, avalie se os pressupostos da regressão linear foram atendidos.\nVerifique o valor de (R^2) e interprete seu significado.\nO p-valor do coeficiente de rdpc é significativo? O que isso indica sobre a relação entre essas variáveis?\nCrie um gráfico de dispersão entre as variáveis, adicionando uma linha de regressão ao gráfico.\nEsse modelo é melhor para explicar a expectativa de vida do que o modelo anterior que ajustamos para a taxa de mortalidade infantil? Por quê?",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Regressão linear"
    ]
  },
  {
    "objectID": "08_regressao_linear.html#links-citados-na-aula",
    "href": "08_regressao_linear.html#links-citados-na-aula",
    "title": "Regressão linear",
    "section": "Links citados na aula",
    "text": "Links citados na aula\n\nPacote performance: funções para avaliar o ajuste de modelos de regressão, visualizar diagnósticos e comparar modelos.\nPacote modelsummary: para criar tabelas de regressão, que exportam para word.\nPacote coefplot: para visualizar os coeficientes do modelo de regressão linear.\nTidymodels - metapacote, segue uma filosofia similar ao pacote tidyverse, para quem tem interesse em machine learning no R.\nLivro R Packages - para quem tem interesse em criar pacotes no R.\nLivro “Uma senhora toma chá…: Como a estatística revolucionou a ciência no século XX” - David Salsburg",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Regressão linear"
    ]
  },
  {
    "objectID": "08_regressao_linear.html#sugestões-de-materiais",
    "href": "08_regressao_linear.html#sugestões-de-materiais",
    "title": "Regressão linear",
    "section": "Sugestões de materiais",
    "text": "Sugestões de materiais\n\nLivro Introduction to Modern Statistics de Mine Çetinkaya-Rundel e Johanna Hardin.\n\nRegressão linear simples\nRegressão linear múltipla\n\nIntroduction to Econometrics with R - conteúdo mais avançado, para quem tem experiência em econometria.",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Regressão linear"
    ]
  },
  {
    "objectID": "02_conceitos_basicos_r.html",
    "href": "02_conceitos_basicos_r.html",
    "title": "Linguagem R",
    "section": "",
    "text": "Existem muitos conceitos básicos que são fundamentais para quem está começando a programar em R.\nNesta aula, vamos abordar algun conceitos considerados mais importantes para as próximas aulas.",
    "crumbs": [
      "Conceitos básicos",
      "Linguagem R"
    ]
  },
  {
    "objectID": "02_conceitos_basicos_r.html#operações-matemáticas",
    "href": "02_conceitos_basicos_r.html#operações-matemáticas",
    "title": "Linguagem R",
    "section": "Operações matemáticas",
    "text": "Operações matemáticas\nO R permite realizar operações matemáticas básicas, como soma, subtração, multiplicação, divisão, potenciação, entre outras.\n\n1 + 1 # Soma\n\n[1] 2\n\n1 - 1 # Subtração\n\n[1] 0\n\n2 * 3 # Multiplicação\n\n[1] 6\n\n10 / 2 # Divisão\n\n[1] 5\n\n2 ^ 3 # Potenciação\n\n[1] 8\n\n\nA ordem matemática das operações também vale no R. Por exemplo, a expressão 2 + 3 * 4 será calculada como 2 + (3 * 4):\n\n2 + 3 * 4\n\n[1] 14",
    "crumbs": [
      "Conceitos básicos",
      "Linguagem R"
    ]
  },
  {
    "objectID": "02_conceitos_basicos_r.html#objetos",
    "href": "02_conceitos_basicos_r.html#objetos",
    "title": "Linguagem R",
    "section": "Objetos",
    "text": "Objetos\nNo R, um objeto é uma estrutura de dados que armazena valores: podemos armazenar um valor único, um conjunto de valores, uma base de dados, entre outros.\nÉ muito útil armazenar valores em objetos, pois podemos reutilizá-los em diferentes partes do código, sem precisar digitar o valor novamente.\n\nObjetos existentes no R\nExistem alguns objetos já criados no R, como por exemplo o objeto letters, que armazena as letras do alfabeto:\n\npi\n\n[1] 3.141593\n\nletters\n\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n[20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"\n\n\n\n\n\n\n\n\nAviso\n\n\n\nO R é case-sensitive, ou seja, ele diferencia letras maiúsculas de minúsculas. Portanto, nome é diferente de Nome.\nPor exemplo, o objeto pi armazena o valor de π (com um número limitado de casas decimais). O nome do objeto é escrito em minúsculas:\n\npi\n\n[1] 3.141593\n\n\nSe tentarmos acessar o objeto com o nome em maiúsculas, o R irá retornar um erro, pois esse objeto não existe:\n\nPi\n\nError: object 'Pi' not found\n\n\n\n\n\n\nCriando um objeto\nPara criar um objeto, precisamos definir um nome, e atribuir um valor à este nome. Para isso, usamos o operador de atribuição: &lt;-. Um atalho para esse operador é o Ctrl + - no Windows, ou Option + - no Mac .\nNo exemplo a seguir, criamos um objeto chamado nome_do_curso e atribuímos a ele o texto \"Introdução à análise de dados no R\":\n\nnome_do_curso &lt;- \"Introdução à análise de dados no R\"\n\nPodemos acessar o valor armazenado em um objeto digitando o nome do objeto:\n\nnome_do_curso\n\n[1] \"Introdução à análise de dados no R\"\n\n\nO objeto apenas será alterado se utilizarmos o operador de atribuição novamente. Por exemplo, a função tolower() transforma todas as letras de um texto em minúsculas:\n\ntolower(nome_do_curso)\n\n[1] \"introdução à análise de dados no r\"\n\n\nMas como não utilizamos a atribuição, o objeto nome_do_curso não foi alterado:\n\nnome_do_curso\n\n[1] \"Introdução à análise de dados no R\"\n\n\nPara alterar o objeto, precisamos atribuir o resultado da função tolower() ao objeto nome_do_curso:\n\nnome_do_curso &lt;- tolower(nome_do_curso)\n\nAgora, o objeto nome_do_curso foi alterado:\n\nnome_do_curso\n\n[1] \"introdução à análise de dados no r\"\n\n\nPortanto, cuidado: ao criar um objeto com nome igual à outro objeto existente, o objeto anterior será substituído pelo novo objeto.\n\n\nConsultando os objetos criados\nPara consultar os objetos criados, podemos usar a função ls() (list objects), que lista todos os objetos criados no Painel Environment:\n\nls()\n\n[1] \"nome_do_curso\"   \"pandoc_dir\"      \"quarto_bin_path\"\n\n\nOutra forma é consultar o Painel Environment no RStudio, que exibe todos os objetos criados, e permite acessar o valor de cada objeto:\n\n\n\nCaptura de tela do RStudio: Painel Environment\n\n\n\n\nRemovendo objetos\nCaso queira remover um objeto, podemos usar a função rm() (remove objects). Por exemplo, para remover o objeto nome_do_curso:\n\nrm(nome_do_curso)\n\nPodemos consultar novamente os objetos existentes e verificar se o objeto foi removido:\n\nls()\n\n[1] \"nome_do_curso\"   \"pandoc_dir\"      \"quarto_bin_path\"\n\n\nCaso queira remover todos os objetos carregados, podemos usar a função rm(list = ls()).\n\n1rm(list = ls())\n\n\n1\n\nRemover todos os objetos do Global Environment\n\n\n\n\n\n\nDestivando o .RData\nA configuração padrão do RStudio define que, quando fechamos o RStudio, o R salva todos os objetos criados em um arquivo chamado .RData1. Na próxima vez que o RStudio for aberto, os objetos serão carregados automaticamente.\nPorém isso não é uma boa prática. O importante é desenvolver um script que tenha todos os passos necessários para reproduzir os resultados, e não depender de objetos salvos em um arquivo como o .RData.\nPara desabilitar essas configurações, no menu Tools &gt; Global Options &gt; General:\n\nDesmarcar a opção Restore .RData into workspace at startup;\nEm Save workspace to .RData on exit, selecionar Never.\nDesmarcar a opção Always save history (even when not saving .RData).\n\n\n\n\nCaptura de tela do RStudio: Global Options &gt; General\n\n\nApós desativar essa opção, o RStudio não carregará os objetos salvos no .RData na próxima vez que for aberto. Dessa forma, se quisermos apagar todos os objetos, podemos reiniciar a sessão do R (clicando em Session &gt; Restart R no menu superior do RStudio).\n\n\nNomeando objetos\nExistem regras e boas práticas para nomear objetos no R. As regras são obrigatórias: se não seguirmos, o código irá gerar um erro. As boas práticas são recomendações, com o objetivo de evitar erros futuros, e facilitar a leitura do código.\n\n\n\n\n\n\nDica\n\n\n\nRecomendamos seguir essas recomendações não apenas para o nome dos objetos, mas também para nome de pastas e arquivos, nome de colunas, entre outros.\n\n\n\nRegras para nomear objetos no R\n\nO nome não deve começar com um número. Ex: 1objeto não é um nome válido.\n\n\n1objeto &lt;- \"exemplo\"\n\nError in parse(text = input): &lt;text&gt;:1:2: unexpected symbol\n1: 1objeto\n     ^\n\n\n\nO nome não deve começar com underline (_). Ex: _objeto não é um nome válido.\n\n\n_objeto &lt;- \"exemplo\"\n\nError in parse(text = input): &lt;text&gt;:1:2: unexpected symbol\n1: _objeto\n     ^\n\n\n\nO nome do objeto não deve conter traços (-), pois o R interpreta o traço como um operador de subtração. Ex: meu-objeto não é um nome válido.\n\n\nobjeto-1 &lt;- \"exemplo\"\n\nError: object 'objeto' not found\n\n\n\n\nBoas práticas para nomear objetos no R\n\nO nome não deve começar com um ponto. Isso não gerará um erro, porém é contra-indicado pois essa sintaxe é utilizada para nomear objetos ocultos no R (portanto, não aparecerá no Painel Environment), e isso pode dificultar o acesso posteriormente. Ex: .objeto não deve ser usado.\nNão utilizar acentos, cedilhas, ou outros caracteres especiais. Isso pode gerar problemas de compatibilidade com outros sistemas (chamamos de encoding). Ex: aviões não é um nome recomendado.\nNão utilizar espaços, pois dificulta o acesso ao objeto posteriormente: precisaremos utilizar a crase em volta do nome do objeto para acessá-lo.\nExistem diferentes estilos para nomear objetos2, como snake_case, onde todas as letras devem ser minúsculas, e as palavras separadas por underline. O importante é escolher um estilo e manter a consistência.",
    "crumbs": [
      "Conceitos básicos",
      "Linguagem R"
    ]
  },
  {
    "objectID": "02_conceitos_basicos_r.html#tipos-de-dados",
    "href": "02_conceitos_basicos_r.html#tipos-de-dados",
    "title": "Linguagem R",
    "section": "Tipos de dados",
    "text": "Tipos de dados\nExistem diferentes tipos de dados que podemos armazenar em objetos no R, como números, textos, lógicos, fatores, datas, entre outros.\nÉ muito importante identificar o tipo de dado que estamos trabalhando, pois cada tipo de dado permite usar funções específicas.\nA função class() permite verificar a classe de um objeto. Por exemplo, podemos verificar a classe do objeto pi:\n\nclass(pi)\n\n[1] \"numeric\"\n\n\n\nNumérico\nOs objetos numéricos no R podem ser de dois tipos:\n\ninteiros (integer): armazena apenas números inteiros, ou seja, sem casas decimais. Ex: 1, 2, 3, 4, 5.\nnuméricos (numeric ou double): armazena números que podem conter casas decimais. Ex: 1, 2, 3.14, 4, 5.\n\nNa maioria dos casos, utilizamos o tipo numeric para armazenar números, pois ele é mais flexível.\nPor exemplo, para criar um objeto que armazena o número 42:\n\nexemplo_numero &lt;- 42\nclass(exemplo_numero)\n\n[1] \"numeric\"\n\n\nPara criar um objeto que armazena um valor usado para converter dólar em reais (R$), podemos usar o tipo numeric:\n\nconversao_dolar &lt;- 5.45\nclass(conversao_dolar)\n\n[1] \"numeric\"\n\n\n\n\nLógico (booleano)\nO tipo lógico (logical) armazena valores booleanos: TRUE (verdadeiro) ou FALSE (falso). Os valores binários podem ser convertidos para números, onde TRUE será 1, e FALSE será 0.\nPor exemplo, para criar objetos com os valores lógicos TRUE e FALSE:\n\nexemplo_logico_verdadeiro &lt;- TRUE\nclass(exemplo_logico_verdadeiro)\n\n[1] \"logical\"\n\nexemplo_logico_falso &lt;- FALSE\nclass(exemplo_logico_falso)\n\n[1] \"logical\"\n\n\n\n\nCharacter (texto)\nO tipo texto (character, ou também conhecido como string) armazena textos. Para criar um objeto com um texto, precisamos colocar o texto entre aspas:\n\nnome_do_curso &lt;- \"Introdução à análise de dados no R\"\nclass(nome_do_curso)\n\n[1] \"character\"\n\n\n\n\nFator (categórico)\nO tipo fator (factor) armazena variáveis categóricas, ou seja, variáveis que possuem um número limitado de categorias. Os valores possíveis de categoria são chamados de levels. Os fatores podem ser ordenados ou não ordenados.\nOs fatores são muito úteis para a visualização de dados e para alguns modelos usados em análise de dados.\nNeste momento, não vamos aprofundar no conceito de fatores: falaremos mais sobre eles nas próximas aulas.\n\n\nDatas\nO tipo data (Date) armazena datas no formato aaaa-mm-dd (ano-mês-dia).\nPara criar um objeto com uma data, podemos usar a função as.Date(), que converte um texto para o tipo Date. Por exemplo, para criar um objeto com a data de início do curso:\n\ndata_inicio_curso &lt;- as.Date(\"2024-10-01\")\nclass(data_inicio_curso)\n\n[1] \"Date\"\n\n\nA função Sys.Date() retorna a data atual do sistema:\n\ndata_sistema &lt;- Sys.Date()\nclass(data_sistema)\n\n[1] \"Date\"\n\n\nPodemos fazer operações com datas:\n\n1data_inicio_curso - data_sistema\n2data_sistema + 1\n3as.Date(\"2024-02-29\") + 1\n\n\n1\n\nDiferença entre duas datas\n\n2\n\nSomar um dia à data em que o código foi executado\n\n3\n\nSomar um dia à data de 29 de fevereiro de 2024\n\n\n\n\nTime difference of -157 days\n[1] \"2025-03-08\"\n[1] \"2024-03-01\"",
    "crumbs": [
      "Conceitos básicos",
      "Linguagem R"
    ]
  },
  {
    "objectID": "02_conceitos_basicos_r.html#conversões-entre-tipos-de-dados",
    "href": "02_conceitos_basicos_r.html#conversões-entre-tipos-de-dados",
    "title": "Linguagem R",
    "section": "Conversões entre tipos de dados",
    "text": "Conversões entre tipos de dados\nExistem várias funções que podemos usar para transformar variáveis de um tipo para outro. Essas funções tem começam com as. seguido pelo tipo de dado que queremos que seja convertido. Por exemplo:\n\nas.character(): converte valores para texto\nas.numeric(): converte valores para número\nas.logical(): converte valores para lógico\nas.factor(): converte valores para fator\nas.Date(): converte valores para data\n\n\n1as.character(2024)\n\n2as.numeric(TRUE)\n\n3as.Date(\"2024-10-01\")\n\n4as.logical(\"TRUE\")\n\n\n1\n\nConverter número para texto\n\n2\n\nConverter lógico para número\n\n3\n\nConverter texto para data\n\n4\n\nConverter texto para lógico\n\n\n\n\n[1] \"2024\"\n[1] 1\n[1] \"2024-10-01\"\n[1] TRUE\n\n\nPorém, nem toda conversão fará sentido. Por exemplo, podemos converter um número para texto, porém nem toda conversão de texto para número funcionará como esperado:\n\n1as.numeric(\"2024\")\nas.numeric(\"Curso de R\")\n\n\n1\n\nConverter para número\n\n\n\n\n[1] 2024\n[1] NA\n\n\nQuando a conversão não é possível, o R irá retornar um valor NA (Not Available), que indica um valor faltante. Falaremos mais sobre valores faltantes na próxima seção.",
    "crumbs": [
      "Conceitos básicos",
      "Linguagem R"
    ]
  },
  {
    "objectID": "02_conceitos_basicos_r.html#valores-faltantes-na",
    "href": "02_conceitos_basicos_r.html#valores-faltantes-na",
    "title": "Linguagem R",
    "section": "Valores faltantes (NA)",
    "text": "Valores faltantes (NA)\nValores faltantes, conhecidos também como missing values, são valores que não estão disponíveis, ou que não foram informados. No R, esses valores são representados pelo valor NA (Not Available).\nPodemos testar se um valor é NA usando a função is.na(): essa função retornará TRUE se o valor for NA, e FALSE caso contrário.\n\nis.na(NA)\n\n[1] TRUE\n\n\nAlgo importante é que o R não consegue fazer operações matemáticas com valores NA. Por exemplo, se tentarmos realizar qualquer operação matemática com NA, o resultado será NA:\n\nNA + 1\n\n[1] NA\n\nNA + NA\n\n[1] NA\n\nNA * 2\n\n[1] NA\n\n\nÉ importante identificar os valores NA em nossos dados, pois eles podem afetar o resultado de nossas análises. Por exemplo, se tentarmos calcular a média de um conjunto com valores NA, o resultado será NA:\n\nnumeros_com_na &lt;- c(1, 2, NA, 4, 5)\nmean(numeros_com_na)\n\n[1] NA\n\n\nEm aulas futuras falaremos sobre como identificar os NA em nossos dados, e algumas estratégias para lidar com eles. Neste momento, podemos utilizar o argumento na.rm = TRUE para que os NA sejam removidos antes de executar a função que calcula a média:\n\nmean(numeros_com_na, na.rm = TRUE)\n\n[1] 3",
    "crumbs": [
      "Conceitos básicos",
      "Linguagem R"
    ]
  },
  {
    "objectID": "02_conceitos_basicos_r.html#tipos-de-objetos",
    "href": "02_conceitos_basicos_r.html#tipos-de-objetos",
    "title": "Linguagem R",
    "section": "Tipos de objetos",
    "text": "Tipos de objetos\nExistem diferentes tipos de objetos no R, e cada tipo de objeto possui diferentes propriedades. Os principais tipos de objetos que utilizaremos ao longo do curso são: vetores, data.frames e listas.\n\nVetores\nVetores armazenam um conjunto de valores de uma dimensão. Eles podem ser criados com a função c(), que significa combine (combinar). Por exemplo, para criar um vetor com os números de 1 a 5:\n\nvetor_de_numeros &lt;- c(1, 2, 3, 4, 5)\n\nOs vetores podem armazenar diferentes tipos de dados, como números, textos, fatores, entre outros. Porém cada vetor pode armazenar apenas um tipo de dado. Por exemplo, se tentarmos criar um vetor que armazena números e textos, o R irá converter todos os valores para texto. Essa propriedade é chamada de coerção.\n\nvetor_misto &lt;- c(1, 2, \"três\", 4, 5)\nclass(vetor_misto)\n\n[1] \"character\"\n\nvetor_misto\n\n[1] \"1\"    \"2\"    \"três\" \"4\"    \"5\"   \n\n\nNo geral, podemos converter dados sem perder informação seguindo essa ordem: Lógico &gt; Inteiro &gt; Numérico &gt; Texto.\n\n\n\n\n\n\n\n\n\n\nData.frames\nOs data.frames são conjuntos de valores com duas dimensões: linhas e colunas. Porém, diferente do que vimos para as matrizes, os data.frames podem armazenar diferentes tipos de dados em cada coluna.\nEsse é o principal tipo de objeto que utilizaremos nesse curso, pois ele é muito útil para armazenar dados tabulares.\nExistem alguns data.frames já criados no R, como o airquality, que armazena dados sobre a qualidade do ar na cidade de Nova York, em 1973. Essas são as primeiras linhas do data.frame airquality:\n\nhead(airquality)\n\n  Ozone Solar.R Wind Temp Month Day\n1    41     190  7.4   67     5   1\n2    36     118  8.0   72     5   2\n3    12     149 12.6   74     5   3\n4    18     313 11.5   62     5   4\n5    NA      NA 14.3   56     5   5\n6    28      NA 14.9   66     5   6\n\n\nPara criar um data.frame, podemos usar a função data.frame(). Entretanto, o mais comum é importar dados de arquivos, como CSV, Excel, ou de bancos de dados. Falaremos sobre como importar dados na próxima aula.\n\n\nListas\nAs listas são os objetos mais flexíveis do R: podemos armazenar diferentes tipos de objetos dentro de uma mesma lista. Por exemplo, podemos armazenar um vetor, uma matriz, um data.frame, e até mesmo outra lista dentro de uma lista.\nPodemos criar uma lista com a função list(). Os elementos da lista podem ser nomeados ou não. Vamos criar uma lista nomeada, com três elementos: o número π, o data.frame airquality, e o vetor letters:\n\nlista_exemplo &lt;- list(numero_pi = pi,\n                      df_qualidade_do_ar = airquality,\n                      letras = letters)\nclass(lista_exemplo)\n\n[1] \"list\"\n\n\nA função str() (structure) exibe a estrutura da lista, mostrando os elementos e seus tipos:\n\nstr(lista_exemplo)\n\nList of 3\n $ numero_pi         : num 3.14\n $ df_qualidade_do_ar:'data.frame': 153 obs. of  6 variables:\n  ..$ Ozone  : int [1:153] 41 36 12 18 NA 28 23 19 8 NA ...\n  ..$ Solar.R: int [1:153] 190 118 149 313 NA NA 299 99 19 194 ...\n  ..$ Wind   : num [1:153] 7.4 8 12.6 11.5 14.3 14.9 8.6 13.8 20.1 8.6 ...\n  ..$ Temp   : int [1:153] 67 72 74 62 56 66 65 59 61 69 ...\n  ..$ Month  : int [1:153] 5 5 5 5 5 5 5 5 5 5 ...\n  ..$ Day    : int [1:153] 1 2 3 4 5 6 7 8 9 10 ...\n $ letras            : chr [1:26] \"a\" \"b\" \"c\" \"d\" ...",
    "crumbs": [
      "Conceitos básicos",
      "Linguagem R"
    ]
  },
  {
    "objectID": "02_conceitos_basicos_r.html#sugestões-de-exercícios",
    "href": "02_conceitos_basicos_r.html#sugestões-de-exercícios",
    "title": "Linguagem R",
    "section": "Sugestões de exercícios",
    "text": "Sugestões de exercícios\n\nCrie um objeto chamado meu_nome e armazene seu nome nele. Depois, use a função toupper() para converter seu nome para letras maiúsculas e salve o resultado em um novo objeto chamado nome_maiusculo. Verifique se os dois objetos foram criados corretamente, consultando o painel Environment.\nObserve os nomes a seguir, e identifique se estão adequados para nomear objetos e colunas no R. Para os nomes que não estão adequados, explique o motivo:\n\ndados_altura\n1_dados\nmedia-altura\nmedia_altura\nMédia altura\n\nTente adivinhar a classe dos objetos a seguir, e depois confira no R usando a função class():\n\n\npi\nletters\ndplyr::starwars\ndplyr::starwars$mass\ndplyr::starwars$species\ndplyr::starwars$films",
    "crumbs": [
      "Conceitos básicos",
      "Linguagem R"
    ]
  },
  {
    "objectID": "02_conceitos_basicos_r.html#sugestões-de-materiais",
    "href": "02_conceitos_basicos_r.html#sugestões-de-materiais",
    "title": "Linguagem R",
    "section": "Sugestões de materiais",
    "text": "Sugestões de materiais\n\nLivro Zen do R:\n\nCapítulo .RData e .Rhistory\n\nLivro R para Ciência de Dados 2ed:\n\nFluxo de Trabalho: básico",
    "crumbs": [
      "Conceitos básicos",
      "Linguagem R"
    ]
  },
  {
    "objectID": "02_conceitos_basicos_r.html#footnotes",
    "href": "02_conceitos_basicos_r.html#footnotes",
    "title": "Linguagem R",
    "section": "Notas de rodapé",
    "text": "Notas de rodapé\n\n\nLeia mais sobre o arquivo .RData no Zen do R.↩︎\nA documentação da função snakecase::to_any_case() fornece uma lista de estilos de nomenclatura disponíveis no pacote snakecase.↩︎",
    "crumbs": [
      "Conceitos básicos",
      "Linguagem R"
    ]
  },
  {
    "objectID": "09_censobr_intro.html",
    "href": "09_censobr_intro.html",
    "title": "Explorando o Censo Demográfico",
    "section": "",
    "text": "O Censo Demográfico é uma das mais importantes fontes de dados sobre as características e condições de vida da população brasileira. Nesta aula, você vai aprender como baixar e manipular os dados das diversas edições do censo demográfico do Brasil de 1960 a 2022 usando o pacote {censobr} na linguagem de programação R.\nA oficina também vai demonstrar como o {censobr} permite trabalhar com grandes bases de dados (larger-than-memory data) e ser integrado com o pacote {geobr} para visualização espacial de dados em diferentes escalas geográficas.\n\n{censobr} e {geobr}\nO {censobr} é um pacote de R para acessar os dados e documentação dos censos demográficos do Brasil (Pereira e Barbosa 2023). O pacote disponibiliza microdados da amostra de todas as edições do censo demográfico desde 1960 (mais informações no site do pacote).\nPor sua vez, o {geobr} é um pacote para baixar dados espaciais oficiais do Brasil (Pereira e Gonçalves 2019). Ele inclui uma ampla variedade de dados geoespaciais disponíveis em várias escalas geográficas e para diversos anos, como municípios, regiões metropolitanas, biomas, estabelecimentos de saúde, etc (veja a lista completa no site do pacote).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInstalando pacotes de R para essa aula\nPara esta aula, você vai precisar dos pacotes abaixo instalados na máquina. A maneira mais simples de fazer isso é executando o código abaixo. Isso pode levar alguns minutos, caso seja a primeira vez que você instala esses pacotes.\n\npkgs &lt;- c(\n  'censobr',\n  'geobr',\n  'arrow',\n  'dplyr',\n  'ggplot2',\n  'quantreg',\n  'sf'\n  )\n\ninstall.packages(pkgs)\n\n\n\n\n\n\nReferências\n\nPereira, Rafael H. M., e Rogério J. Barbosa. 2023. censobr: Download Data from Brazil’s Population Census. CRAN. https://doi.org/10.32614/CRAN.package.censobr.\n\n\nPereira, Rafael H. M., e Caio N. Gonçalves. 2019. geobr: Download Official Spatial Data Sets of Brazil. CRAN. https://doi.org/10.32614/CRAN.package.geobr.",
    "crumbs": [
      "Explorando o Censo Demográfico",
      "Explorando o Censo Demográfico"
    ]
  },
  {
    "objectID": "index.html#introdução-ao-material",
    "href": "index.html#introdução-ao-material",
    "title": "Introdução à análise de dados no R",
    "section": "Introdução ao material",
    "text": "Introdução ao material\nEste site apresenta o material de apoio para o curso “Introdução à análise de dados no R”, oferecido em 2024 para servidores do Instituto de Pesquisa Econômica Aplicada (Ipea). O curso será realizado de forma remota híbrida, com aulas ao vivo e atividades práticas.\nAlém deste site, o material do curso também é composto por:\n\nScripts em R que foram utilizados nas aulas\nGravação das aulas, em um link disponibilizado para as pessoas matriculadas no curso.\n\n\n\n\n\n\n\nImportante\n\n\n\nRecomendamos que todas as pessoas participantes instalem o R e o RStudio antes do início do curso. Para isso, siga as instruções disponíveis na página Instruções de instalação.\nCaso tenha alguma dificuldade, entre em contato com a equipe do curso o quanto antes.",
    "crumbs": [
      "Pré-curso",
      "Introdução à análise de dados no R"
    ]
  },
  {
    "objectID": "index.html#equipe-do-curso",
    "href": "index.html#equipe-do-curso",
    "title": "Introdução à análise de dados no R",
    "section": "Equipe do curso",
    "text": "Equipe do curso\nBeatriz Milz  Pesquisadora Colaboradora | Estágio pós-doutoral  Laboratório de Planejamento Territorial (LaPlan) - Universidade Federal do ABC (UFABC)  Email | GitHub | LinkedIn | ResearchGate | Currículo Lattes | Orcid\nPedro Cavalcanti Gonçalves Ferreira  Coordenação de Ciência de Dados - COCD  Instituto de Pesquisa Econômica Aplicada (Ipea)  GitHub | LinkedIn | Currículo Lattes | Orcid\nRafael H. M. Pereira  Coordenador de Ciência de Dados  Instituto de Pesquisa Econômica Aplicada (Ipea)  Website | Google Scholar | Linkedin |",
    "crumbs": [
      "Pré-curso",
      "Introdução à análise de dados no R"
    ]
  },
  {
    "objectID": "index.html#sobre-este-material",
    "href": "index.html#sobre-este-material",
    "title": "Introdução à análise de dados no R",
    "section": "Sobre este material",
    "text": "Sobre este material\n\nContribuidores\nAlém da equipe do curso, esse material recebeu contribuições de:\n\nJulio Trecenti\n\n\n\nLicença\nEsse material está disponível sob a licença CC BY-SA 4.0.",
    "crumbs": [
      "Pré-curso",
      "Introdução à análise de dados no R"
    ]
  },
  {
    "objectID": "12_censobr_agregados_setores.html",
    "href": "12_censobr_agregados_setores.html",
    "title": "Agregados dos Setores Censitários",
    "section": "",
    "text": "Talvez os conjuntos de dados mais comumente usados dos censos brasileiros sejam os microdados de pessoas e domicílios. No entanto, o IBGE também disponibiliza dados muito ricos sobre as características populacionais e ambientais agregados no nível de setores censitários. Neste capítulo, mostramos como usar o pacote {censobr} para acessar facilmente esses dados usando a função read_tracts().\n\n\nNo seu formato original, os dados agregados no nível de setores censitários estão divididos em diferentes tipos de variáveis (e.g. variáveis de características de pessoas, de domicílios, etc). Em muitos casos, esses conjuntos de variáveis estão espalhadas por vários arquivos (em alguns casos com centenas variáveis). Para facilitar o entendimento desses dados, o {censobr} reúne todos os arquivos / variáveis em 8 tabelas:\n\n\"Basico\"\n\"Entorno\"\n\"Domicilio\"\n\"Pessoa\"\n\"Responsavel\"\n\"PessoaRenda\"\n\"DomicilioRenda\"\n\"ResponsavelRenda\"\n\nTodas estas tabelas estão organizadas seguindo a mesma lógica. Nos casos em que as variáveis de uma tabela provêm de arquivos diferentes, o nome da variável recebe um prefixo indicando a sua tabela de origem. Isso é feito para facilitar a consulta do significado de cada coluna no arquivo de dicionário variáveis (no próximo capítulo a gente vai ver como baixar os dicionários variáveis dos censos).\nPara ilustrar isso, vejamos a tabela com variáveis de \"Domicilio\". Essa tabela provêm de dois arquivos separados: Domicilio01 e Domicilio02. Assim, os nomes das colunas nessa tabela são organizados da seguinte maneira:\n\nlibrary(censobr)\n\n# baixa dados agregados de setores: variáveis de domicilios\ndom &lt;- read_tracts(year = 2010, \n                   dataset = 'Domicilio',\n                   as_data_frame = FALSE,\n                   showProgress = FALSE)\n\nnames(dom)[c(1:12,301:306)]\n\n [1] \"code_tract\"        \"code_weighting\"    \"code_muni\"        \n [4] \"code_state\"        \"abbrev_state\"      \"name_state\"       \n [7] \"code_region\"       \"name_region\"       \"domicilio01_V1005\"\n[10] \"domicilio01_V001\"  \"domicilio01_V002\"  \"domicilio01_V003\" \n[13] \"domicilio02_V050\"  \"domicilio02_V051\"  \"domicilio02_V052\" \n[16] \"domicilio02_V053\"  \"domicilio02_V054\"  \"domicilio02_V055\" \n\n\n\n\n\nPara verificar o significado de cada variável, você pode executar o comando data_dictionary(), que abrirá no navegador um arquivo .html ou .pdf com o dicionário de variáveis de cada conjunto de dados (ver mais info no capítulo 6 sobre Documentação).\n\ndata_dictionary(year = 2010,\n                dataset = 'tracts')\n\n\n\n\nEssa organização dos dados agregados por setores censitários parece confusa a primeira vista. E é mesmo. Mas essa organização fica mais clara com alguns exemplos práticos.\nNesta seção, nós vamos utilizar alguns exemplos para ilustrar como trabalhar com dados no nível de setor censitário. Primeiro, precisamos carregar as bibliotecas que usaremos neste tutorial.\n\nlibrary(censobr)\nlibrary(geobr)\nlibrary(arrow)\nlibrary(dplyr)\nlibrary(ggplot2)\n\nNos dois exemplos abaixo, usaremos a cidade de Belo Horizonte para fins de demonstração. No primeiro exemplo, nós vamos mapear a distribuição espacial da renda com dados de 2010. No segundo exemplo, nós vamos mapear a distribuição espacial da densidade populacional de BH com os dados preliminares do censo de 2022.\n\n\nNeste primeiro exemplo, criaremos um mapa da distribuição espacial da renda média per capita. A informação sobre o número total de residentes em cada setor censitário está disponível na tabela com conjunto de variáveis do bloco \"Basico\", na variável \"V002\". Já a informação sobre renda total do setor censiário pode ser encontradas na tabela do bloco \"DomicilioRenda\", na variável \"V003\".\nUtilizando o código abaixo, podemos baixar os dados e calcular a renda per capita de todos os setores censitários no Brasil. Posteriormente nós vamos filtrar esses resultados para ficar apenas com os setores de BH.\n\n# baixa os dados\n1tract_basico &lt;- read_tracts(year = 2010,\n                            dataset = \"Basico\",\n                            showProgress = FALSE)\n\n2tract_income &lt;- read_tracts(year = 2010,\n                            dataset = \"DomicilioRenda\",\n                            showProgress = FALSE)     \n\n# selecionar conlunas\n3tract_basico &lt;- tract_basico |&gt; select('code_tract','V002')\ntract_income &lt;- tract_income |&gt; select('code_tract','V003')\n\n# unir as tabelass\n4tracts_df10 &lt;- left_join(tract_basico, tract_income)\n                \n\n# calcular a renda per capita\ntracts_df10 &lt;- tracts_df10 |&gt; \n5                mutate(income_pc = V003 / V002) |&gt;\n6                collect()\n\nhead(tracts_df10)\n\n\n1\n\nDownload de dados do bloco Basico\n\n2\n\nDownload de dados do bloco DomicilioRenda\n\n3\n\nSeleciona apenas as variáveis que vamos utilizar\n\n4\n\nJunta as duas variáveis num único data.frame\n\n5\n\nCacula renda per capita de cada setor censitário\n\n6\n\nExtração dos resultados\n\n\n\n\n        code_tract  V002   V003 income_pc\n            &lt;char&gt; &lt;num&gt;  &lt;num&gt;     &lt;num&gt;\n1: 293076605000017   715 149721 209.40000\n2: 293076605000018   697 110160 158.04878\n3: 293076605000019   115  18905 164.39130\n4: 293076605000020   301  32147 106.80066\n5: 293076605000021    55   3904  70.98182\n6: 293076605000022   503  32177  63.97018\n\n\nO próximo passo é baixar as geometrias dos setores censitários de BH em 2010 com a função read_census_tract, do pacote {geobr}. Aqui, nós passamos o parâmetro code_tract = \"MG\" baixar os todos os setores do estado de Minas Gerais e depois filtramos apenas o município de Belo Horizonte.\n\n# busca qual o código do municipio de Belo Horizonte\nbh_info &lt;- geobr::lookup_muni(name_muni = 'Belo Horizonte')\n#&gt; code_muni: 3106200\n\n# baixa municipio de BH\nmuni_bh &lt;- geobr::read_municipality(code_muni = 'MG', \n                                    year = 2010,\n                                    showProgress = FALSE) |&gt;\n           filter(name_muni == \"Belo Horizonte\")\n\n# baixa todos setores de Minas Gerais\ntracts_2010 &lt;- geobr::read_census_tract(code_tract = \"MG\",\n                                        year = 2010,\n                                        simplified = FALSE,\n1                                        showProgress = FALSE)\n\n# filtra setores de BH\ntracts_2010 &lt;- filter(tracts_2010, name_muni == 'Belo Horizonte')\n\n# mapa de setores censitarios\nggplot() + \n  geom_sf(data=tracts_2010, fill = 'gray90', color='gray60') +\n  theme_void()\n\n\n1\n\nO comportamento padrão do {geobr} é baixar uma versão da malha espacial com geometrias ligeiramente simplificadas (simplified = TRUE) para agilizar o processamento e visualização de dados. Aqui, nós baixamos os dados com geometrias originais devido à escala espacial da visualização dos resultados.\n\n\n\n\n\n\n\n\n\n\n\nPor fim, a gente pode fazer um merge dos dados espaciais e de renda dos setores censitários usando como variável chave o código do setor censitário (code_tract) e criar o mapa da distribuição espacial da renda per capita do município.\n\nbh_tracts &lt;- left_join(tracts_2010, tracts_df10, by = 'code_tract')\n\nggplot() +\n  geom_sf(data = bh_tracts, aes(fill = ifelse(income_pc&lt;10000,income_pc,10000)), \n          color=NA) +\n  geom_sf(data = muni_bh, color='gray10', fill=NA) +\n  labs(title = 'Renda per capita dos setores censitários',\n       subtitle= 'Belo Horizonte, 2010') +\n  scale_fill_viridis_c(name = \"Reda per\\ncapita (R$)\",\n                       na.value=\"white\",\n                       option = 'cividis',\n                       breaks = c(0,  1e3, 4e3, 8e3, 1e4) ,\n                        labels  = c('0',  '1.000', '4.000', '8.000', '&gt; 10.000')\n                       ) +\n  theme_void()\n\n\n\n\n\n\n\n\n\n\n\nNeste segundo exemplo, nós vamos utilizar os resultados \"Preliminares\" dos agregados dos setores censitários do censo de 2022, que foram divulgados pelo IBGE em março de 2024. Em particular, vamos utilizar a variável V0001 que informa a população total dos setores. Além disso, como houve uma mudança na malha espacial de setores censitários entre 2010 e 2022, nós precisamos baixar a malha do ano correspondente.\n\n# download dados preliminares dos setores de 2022\ntracts_df22 &lt;- read_tracts(year = 2022,\n                          dataset = \"Preliminares\",\n                          showProgress = FALSE) |&gt;\n               filter(name_muni == 'Belo Horizonte') |&gt;\n               collect()\n\n# baixa todos setores de Minas Gerais\ntracts_2022 &lt;- geobr::read_census_tract(code_tract = \"MG\",\n                                        year = 2022,\n                                        simplified = FALSE,\n                                        showProgress = FALSE)\n\n# filtra setores de BH\ntracts_2022 &lt;- filter(tracts_2022, name_muni == 'Belo Horizonte')\n\nAgora a gente pode fazer um merge da tabela de população com os dados espaciais, calcular a área dos setores em Km2 e a densidade demográfica de cada setor, e criar o mapa.\n\n# merge tables\ntracts_df22$code_tract &lt;- as.numeric(tracts_df22$code_tract)\nbh_tracts22 &lt;- left_join(tracts_2022, tracts_df22, by = 'code_tract')\n\n# calcula a área dos setores\nbh_tracts22 &lt;- bh_tracts22 |&gt;\n              mutate(tract_aream2 = sf::st_area(tracts_2022),\n                     tract_areakm2 = units::set_units(tract_aream2, km2))\n\n# calcula densidade demografica\nbh_tracts22 &lt;- bh_tracts22 |&gt;\n               mutate(pop_km2 = as.numeric(V0001/ tract_areakm2))\n\n# map\nggplot() +\n  geom_sf(data = bh_tracts22, color=NA,\n          aes(fill = ifelse(pop_km2&lt;20000,pop_km2,20000))) +\n  geom_sf(data = muni_bh, color='gray10', fill=NA) +\n  labs(title = 'Densidade populacional dos setores censitários',\n       subtitle= 'Belo Horizonte, 2022') +\n  scale_fill_distiller(palette = \"Reds\", direction = 1, \n                       name='População por'~Km^2,\n                       breaks = c(0,  5e3, 10e3, 15e3, 2e4) ,\n                       labels  = c('0',  '5.000', '10.000', '15.000', '&gt; 20.000')) +\n  theme_void()",
    "crumbs": [
      "Explorando o Censo Demográfico",
      "Agregados dos Setores Censitários"
    ]
  },
  {
    "objectID": "12_censobr_agregados_setores.html#estrutura-dos-dados",
    "href": "12_censobr_agregados_setores.html#estrutura-dos-dados",
    "title": "Agregados dos Setores Censitários",
    "section": "",
    "text": "No seu formato original, os dados agregados no nível de setores censitários estão divididos em diferentes tipos de variáveis (e.g. variáveis de características de pessoas, de domicílios, etc). Em muitos casos, esses conjuntos de variáveis estão espalhadas por vários arquivos (em alguns casos com centenas variáveis). Para facilitar o entendimento desses dados, o {censobr} reúne todos os arquivos / variáveis em 8 tabelas:\n\n\"Basico\"\n\"Entorno\"\n\"Domicilio\"\n\"Pessoa\"\n\"Responsavel\"\n\"PessoaRenda\"\n\"DomicilioRenda\"\n\"ResponsavelRenda\"\n\nTodas estas tabelas estão organizadas seguindo a mesma lógica. Nos casos em que as variáveis de uma tabela provêm de arquivos diferentes, o nome da variável recebe um prefixo indicando a sua tabela de origem. Isso é feito para facilitar a consulta do significado de cada coluna no arquivo de dicionário variáveis (no próximo capítulo a gente vai ver como baixar os dicionários variáveis dos censos).\nPara ilustrar isso, vejamos a tabela com variáveis de \"Domicilio\". Essa tabela provêm de dois arquivos separados: Domicilio01 e Domicilio02. Assim, os nomes das colunas nessa tabela são organizados da seguinte maneira:\n\nlibrary(censobr)\n\n# baixa dados agregados de setores: variáveis de domicilios\ndom &lt;- read_tracts(year = 2010, \n                   dataset = 'Domicilio',\n                   as_data_frame = FALSE,\n                   showProgress = FALSE)\n\nnames(dom)[c(1:12,301:306)]\n\n [1] \"code_tract\"        \"code_weighting\"    \"code_muni\"        \n [4] \"code_state\"        \"abbrev_state\"      \"name_state\"       \n [7] \"code_region\"       \"name_region\"       \"domicilio01_V1005\"\n[10] \"domicilio01_V001\"  \"domicilio01_V002\"  \"domicilio01_V003\" \n[13] \"domicilio02_V050\"  \"domicilio02_V051\"  \"domicilio02_V052\" \n[16] \"domicilio02_V053\"  \"domicilio02_V054\"  \"domicilio02_V055\"",
    "crumbs": [
      "Explorando o Censo Demográfico",
      "Agregados dos Setores Censitários"
    ]
  },
  {
    "objectID": "12_censobr_agregados_setores.html#dicionário-de-variáveis",
    "href": "12_censobr_agregados_setores.html#dicionário-de-variáveis",
    "title": "Agregados dos Setores Censitários",
    "section": "",
    "text": "Para verificar o significado de cada variável, você pode executar o comando data_dictionary(), que abrirá no navegador um arquivo .html ou .pdf com o dicionário de variáveis de cada conjunto de dados (ver mais info no capítulo 6 sobre Documentação).\n\ndata_dictionary(year = 2010,\n                dataset = 'tracts')",
    "crumbs": [
      "Explorando o Censo Demográfico",
      "Agregados dos Setores Censitários"
    ]
  },
  {
    "objectID": "12_censobr_agregados_setores.html#exemplos-reproduzíveis",
    "href": "12_censobr_agregados_setores.html#exemplos-reproduzíveis",
    "title": "Agregados dos Setores Censitários",
    "section": "",
    "text": "Essa organização dos dados agregados por setores censitários parece confusa a primeira vista. E é mesmo. Mas essa organização fica mais clara com alguns exemplos práticos.\nNesta seção, nós vamos utilizar alguns exemplos para ilustrar como trabalhar com dados no nível de setor censitário. Primeiro, precisamos carregar as bibliotecas que usaremos neste tutorial.\n\nlibrary(censobr)\nlibrary(geobr)\nlibrary(arrow)\nlibrary(dplyr)\nlibrary(ggplot2)\n\nNos dois exemplos abaixo, usaremos a cidade de Belo Horizonte para fins de demonstração. No primeiro exemplo, nós vamos mapear a distribuição espacial da renda com dados de 2010. No segundo exemplo, nós vamos mapear a distribuição espacial da densidade populacional de BH com os dados preliminares do censo de 2022.\n\n\nNeste primeiro exemplo, criaremos um mapa da distribuição espacial da renda média per capita. A informação sobre o número total de residentes em cada setor censitário está disponível na tabela com conjunto de variáveis do bloco \"Basico\", na variável \"V002\". Já a informação sobre renda total do setor censiário pode ser encontradas na tabela do bloco \"DomicilioRenda\", na variável \"V003\".\nUtilizando o código abaixo, podemos baixar os dados e calcular a renda per capita de todos os setores censitários no Brasil. Posteriormente nós vamos filtrar esses resultados para ficar apenas com os setores de BH.\n\n# baixa os dados\n1tract_basico &lt;- read_tracts(year = 2010,\n                            dataset = \"Basico\",\n                            showProgress = FALSE)\n\n2tract_income &lt;- read_tracts(year = 2010,\n                            dataset = \"DomicilioRenda\",\n                            showProgress = FALSE)     \n\n# selecionar conlunas\n3tract_basico &lt;- tract_basico |&gt; select('code_tract','V002')\ntract_income &lt;- tract_income |&gt; select('code_tract','V003')\n\n# unir as tabelass\n4tracts_df10 &lt;- left_join(tract_basico, tract_income)\n                \n\n# calcular a renda per capita\ntracts_df10 &lt;- tracts_df10 |&gt; \n5                mutate(income_pc = V003 / V002) |&gt;\n6                collect()\n\nhead(tracts_df10)\n\n\n1\n\nDownload de dados do bloco Basico\n\n2\n\nDownload de dados do bloco DomicilioRenda\n\n3\n\nSeleciona apenas as variáveis que vamos utilizar\n\n4\n\nJunta as duas variáveis num único data.frame\n\n5\n\nCacula renda per capita de cada setor censitário\n\n6\n\nExtração dos resultados\n\n\n\n\n        code_tract  V002   V003 income_pc\n            &lt;char&gt; &lt;num&gt;  &lt;num&gt;     &lt;num&gt;\n1: 293076605000017   715 149721 209.40000\n2: 293076605000018   697 110160 158.04878\n3: 293076605000019   115  18905 164.39130\n4: 293076605000020   301  32147 106.80066\n5: 293076605000021    55   3904  70.98182\n6: 293076605000022   503  32177  63.97018\n\n\nO próximo passo é baixar as geometrias dos setores censitários de BH em 2010 com a função read_census_tract, do pacote {geobr}. Aqui, nós passamos o parâmetro code_tract = \"MG\" baixar os todos os setores do estado de Minas Gerais e depois filtramos apenas o município de Belo Horizonte.\n\n# busca qual o código do municipio de Belo Horizonte\nbh_info &lt;- geobr::lookup_muni(name_muni = 'Belo Horizonte')\n#&gt; code_muni: 3106200\n\n# baixa municipio de BH\nmuni_bh &lt;- geobr::read_municipality(code_muni = 'MG', \n                                    year = 2010,\n                                    showProgress = FALSE) |&gt;\n           filter(name_muni == \"Belo Horizonte\")\n\n# baixa todos setores de Minas Gerais\ntracts_2010 &lt;- geobr::read_census_tract(code_tract = \"MG\",\n                                        year = 2010,\n                                        simplified = FALSE,\n1                                        showProgress = FALSE)\n\n# filtra setores de BH\ntracts_2010 &lt;- filter(tracts_2010, name_muni == 'Belo Horizonte')\n\n# mapa de setores censitarios\nggplot() + \n  geom_sf(data=tracts_2010, fill = 'gray90', color='gray60') +\n  theme_void()\n\n\n1\n\nO comportamento padrão do {geobr} é baixar uma versão da malha espacial com geometrias ligeiramente simplificadas (simplified = TRUE) para agilizar o processamento e visualização de dados. Aqui, nós baixamos os dados com geometrias originais devido à escala espacial da visualização dos resultados.\n\n\n\n\n\n\n\n\n\n\n\nPor fim, a gente pode fazer um merge dos dados espaciais e de renda dos setores censitários usando como variável chave o código do setor censitário (code_tract) e criar o mapa da distribuição espacial da renda per capita do município.\n\nbh_tracts &lt;- left_join(tracts_2010, tracts_df10, by = 'code_tract')\n\nggplot() +\n  geom_sf(data = bh_tracts, aes(fill = ifelse(income_pc&lt;10000,income_pc,10000)), \n          color=NA) +\n  geom_sf(data = muni_bh, color='gray10', fill=NA) +\n  labs(title = 'Renda per capita dos setores censitários',\n       subtitle= 'Belo Horizonte, 2010') +\n  scale_fill_viridis_c(name = \"Reda per\\ncapita (R$)\",\n                       na.value=\"white\",\n                       option = 'cividis',\n                       breaks = c(0,  1e3, 4e3, 8e3, 1e4) ,\n                        labels  = c('0',  '1.000', '4.000', '8.000', '&gt; 10.000')\n                       ) +\n  theme_void()\n\n\n\n\n\n\n\n\n\n\n\nNeste segundo exemplo, nós vamos utilizar os resultados \"Preliminares\" dos agregados dos setores censitários do censo de 2022, que foram divulgados pelo IBGE em março de 2024. Em particular, vamos utilizar a variável V0001 que informa a população total dos setores. Além disso, como houve uma mudança na malha espacial de setores censitários entre 2010 e 2022, nós precisamos baixar a malha do ano correspondente.\n\n# download dados preliminares dos setores de 2022\ntracts_df22 &lt;- read_tracts(year = 2022,\n                          dataset = \"Preliminares\",\n                          showProgress = FALSE) |&gt;\n               filter(name_muni == 'Belo Horizonte') |&gt;\n               collect()\n\n# baixa todos setores de Minas Gerais\ntracts_2022 &lt;- geobr::read_census_tract(code_tract = \"MG\",\n                                        year = 2022,\n                                        simplified = FALSE,\n                                        showProgress = FALSE)\n\n# filtra setores de BH\ntracts_2022 &lt;- filter(tracts_2022, name_muni == 'Belo Horizonte')\n\nAgora a gente pode fazer um merge da tabela de população com os dados espaciais, calcular a área dos setores em Km2 e a densidade demográfica de cada setor, e criar o mapa.\n\n# merge tables\ntracts_df22$code_tract &lt;- as.numeric(tracts_df22$code_tract)\nbh_tracts22 &lt;- left_join(tracts_2022, tracts_df22, by = 'code_tract')\n\n# calcula a área dos setores\nbh_tracts22 &lt;- bh_tracts22 |&gt;\n              mutate(tract_aream2 = sf::st_area(tracts_2022),\n                     tract_areakm2 = units::set_units(tract_aream2, km2))\n\n# calcula densidade demografica\nbh_tracts22 &lt;- bh_tracts22 |&gt;\n               mutate(pop_km2 = as.numeric(V0001/ tract_areakm2))\n\n# map\nggplot() +\n  geom_sf(data = bh_tracts22, color=NA,\n          aes(fill = ifelse(pop_km2&lt;20000,pop_km2,20000))) +\n  geom_sf(data = muni_bh, color='gray10', fill=NA) +\n  labs(title = 'Densidade populacional dos setores censitários',\n       subtitle= 'Belo Horizonte, 2022') +\n  scale_fill_distiller(palette = \"Reds\", direction = 1, \n                       name='População por'~Km^2,\n                       breaks = c(0,  5e3, 10e3, 15e3, 2e4) ,\n                       labels  = c('0',  '5.000', '10.000', '15.000', '&gt; 20.000')) +\n  theme_void()",
    "crumbs": [
      "Explorando o Censo Demográfico",
      "Agregados dos Setores Censitários"
    ]
  },
  {
    "objectID": "11_censobr_microdados.html",
    "href": "11_censobr_microdados.html",
    "title": "Microdados do Censo",
    "section": "",
    "text": "A Tabela 1 apresenta abaixo todas as bases de dados do censo que você consegue acessar com o {censobr}.\nTabela 1. Funções de dados disponíveis no {censobr}\n\n\n\n  \n  \n    \n    \n\n\n\n\n\n\n\nFunção\nOrigem\nUnidade\nDefinição\nDisponibilidade\n\n\n1960\n70\n80\n91\n2000\n10\n22\n\n\n\n\nread_population()\nAmostra\nMicrodado\nLê os microdados de pessoas\nX\nX\nX\nX\nX\nX\nem breve\n\n\nread_households()\nAmostra\nMicrodado\nLê os microdados de domicílios\nX\nX\nX\nX\nX\nX\nem breve\n\n\nread_families()\nAmostra\nMicrodado\nLê os microdados de famílias do censo de 2000\n\n\n\nX\n\n\n\n\n\nread_emigration()\nAmostra\nMicrodado\nLê os microdados de emigração\n\n\n\n\n\nX\nem breve\n\n\nread_mortality()\nAmostra\nMicrodado\nLê os microdados de mortalidade\n\n\n\n\n\nX\nem breve\n\n\nread_tracts()\nUniverso\nSetor Censitário\nLê os dados do Universo agregados por setores censitários\n\n\n\n\nem breve\nX\nem breve\n\n\n\n\n\n\n\nTodas as funções do {censobr} para leitura de microdados possuem a mesma estrutra (sintaxe), o que permite o usuário baixar os dados de maneira fácil e intuitiva com um único comando. As funções possuem os seguintes parâmetros:\n\nread_households(\n  year,          # ano de referência do censo\n  columns,       # seleciona colunas que devem ser lidas\n  add_labels,    # adiciona os 'labels' das variáveis categóricas\n  as_data_frame, # retorna resultado como um `Arrow DataSet` ou `data.frame`\n  showProgress,  # mostra barra de progresso do download\n  cache          # salva arquivo em cache para rapida leitura posteriormente\n  )\n\n\n\n\n\n\n\nCache local dos dados\n\n\n\nA primeira vez que o usuário executa uma função, o {censobr} fará o download dos dados e os armazenará localmente numa pasta do pacote. Dessa forma, os dados precisam ser baixados apenas uma vez. Mais informações na seção Cache de Dados abaixo.",
    "crumbs": [
      "Explorando o Censo Demográfico",
      "Microdados do Censo"
    ]
  },
  {
    "objectID": "11_censobr_microdados.html#dados-disponíveis-no-censobr",
    "href": "11_censobr_microdados.html#dados-disponíveis-no-censobr",
    "title": "Microdados do Censo",
    "section": "",
    "text": "A Tabela 1 apresenta abaixo todas as bases de dados do censo que você consegue acessar com o {censobr}.\nTabela 1. Funções de dados disponíveis no {censobr}\n\n\n\n  \n  \n    \n    \n\n\n\n\n\n\n\nFunção\nOrigem\nUnidade\nDefinição\nDisponibilidade\n\n\n1960\n70\n80\n91\n2000\n10\n22\n\n\n\n\nread_population()\nAmostra\nMicrodado\nLê os microdados de pessoas\nX\nX\nX\nX\nX\nX\nem breve\n\n\nread_households()\nAmostra\nMicrodado\nLê os microdados de domicílios\nX\nX\nX\nX\nX\nX\nem breve\n\n\nread_families()\nAmostra\nMicrodado\nLê os microdados de famílias do censo de 2000\n\n\n\nX\n\n\n\n\n\nread_emigration()\nAmostra\nMicrodado\nLê os microdados de emigração\n\n\n\n\n\nX\nem breve\n\n\nread_mortality()\nAmostra\nMicrodado\nLê os microdados de mortalidade\n\n\n\n\n\nX\nem breve\n\n\nread_tracts()\nUniverso\nSetor Censitário\nLê os dados do Universo agregados por setores censitários\n\n\n\n\nem breve\nX\nem breve\n\n\n\n\n\n\n\nTodas as funções do {censobr} para leitura de microdados possuem a mesma estrutra (sintaxe), o que permite o usuário baixar os dados de maneira fácil e intuitiva com um único comando. As funções possuem os seguintes parâmetros:\n\nread_households(\n  year,          # ano de referência do censo\n  columns,       # seleciona colunas que devem ser lidas\n  add_labels,    # adiciona os 'labels' das variáveis categóricas\n  as_data_frame, # retorna resultado como um `Arrow DataSet` ou `data.frame`\n  showProgress,  # mostra barra de progresso do download\n  cache          # salva arquivo em cache para rapida leitura posteriormente\n  )\n\n\n\n\n\n\n\nCache local dos dados\n\n\n\nA primeira vez que o usuário executa uma função, o {censobr} fará o download dos dados e os armazenará localmente numa pasta do pacote. Dessa forma, os dados precisam ser baixados apenas uma vez. Mais informações na seção Cache de Dados abaixo.",
    "crumbs": [
      "Explorando o Censo Demográfico",
      "Microdados do Censo"
    ]
  },
  {
    "objectID": "11_censobr_microdados.html#trabalhando-com-dados-maior-do-que-a-ram",
    "href": "11_censobr_microdados.html#trabalhando-com-dados-maior-do-que-a-ram",
    "title": "Microdados do Censo",
    "section": "Trabalhando com dados maior do que a RAM",
    "text": "Trabalhando com dados maior do que a RAM\n\n\n\n\n\nÉ muito comum que os microdados do censo brasileiro sejam grandes demais para serem carregados na memória RAM do usuário. Para resolver esse problema, o {censobr} foi construído sobre a plataforma Arrow e arquivos em formato .parquet, o que permite que o usuário trabalhe de maneira eficiente até mesmo com bases de dados muito grandes utilizando funções já bem conhecidas do pacote {dplyr}.\nVamos então partir para exemplos na prática, e começar carregando as bibliotecas que usamos.\n\n# carrega bibliotecas\nlibrary(censobr)\nlibrary(arrow)\nlibrary(dplyr)\nlibrary(ggplot2)",
    "crumbs": [
      "Explorando o Censo Demográfico",
      "Microdados do Censo"
    ]
  },
  {
    "objectID": "11_censobr_microdados.html#dados-de-população",
    "href": "11_censobr_microdados.html#dados-de-população",
    "title": "Microdados do Censo",
    "section": "Dados de população",
    "text": "Dados de população\nNeste exemplo, nós vamos criar um gráfico da pirâmica populacional do Brasil no ano de 2010. O primeiro passo é usar a função read_population() para carregar os microdados de população.\nO comportamento padrão das funções do {censobr} é retornar todas as variáveis das bases de dados. No entanto, como vamos fazer uma análise simples, o mais eficiente é passarmos um vetor com os nomes das colunas que vamos utilizar. Neste caso, usaremos somente as variáveis de peso amostral, sexo e idade (códigos \"V0010\", \"V0601\" e \"V6036\", respectivamente). No último capítulo do curso a gente vai ver como baixar os dicionários variáveis dos censos.\n\npop &lt;- read_population(\n  year = 2010,\n1  columns = c('V0010', 'V0601', 'V6036'),\n2  add_labels = 'pt',\n  showProgress = FALSE\n  )\n\nclass(pop)\n\n\n1\n\nAumentando eficiência ao ler apenas as colunas que vamos usar\n\n2\n\nAdicionando os ‘labels’ em Português das variáveis categóricas.\n\n\n\n\n[1] \"arrow_dplyr_query\"\n\n\nAo rodar o comando nrow(pop), você verá que a tabela de microdados de população do Censo de 2010 tinha mais de vinte milhões de observações (20.635.472), mas essas observações não estão carregadas na sua memória RAM. Isso porque, por padrão, a saída da função é um \"arrow_dplyr_query\" ou \"ArrowObject\". Isso permite que você trabalhe com os dados do censo de maneira super rápida e eficiente, mesmo que a tabela de dados seja grande demais para a memória do seu computador. Note que se você passar o parâmetro as_data_frame = TRUE, a função carregará os dados como um data.frame na memória RAM. Atenção: isso pode fazer com que a sessão do R trave em ambientes com pouca memória.\nEsse output em arrow pode ser analisado de maneira similar a como se analisaria um data.frame utilizando-se funções do pacote {dplyr}. Uma diferença, no entanto, é que as operações somente são executadas e resultados extraídos quando o usuário roda a função dplyr::collect().\nNeste exemplo, abaixo, nós visualizamos as primeiras linhas 6 da tabela de dados com head(pop), e somente essas poucas observações são carregas para memória com o commando collect():\n\nhead(pop) |&gt; \n  collect()\n\n      V0010     V0601 V6036\n1 11.996452  Feminino    14\n2 11.996452 Masculino    45\n3 11.996452  Feminino     3\n4 10.298796  Feminino    57\n5 10.298796 Masculino    53\n6  7.872739  Feminino    29\n\n\nO próximo passo para criamos nossa pirâmide populacional é criar um variável categória com grupos de idade. No exemplo abaix, nós utilizadmos grupos de 5 anos.\n\npop &lt;- pop |&gt;\n  mutate(\n    age_group = dplyr::case_when(\n      V6036 &lt;= 04              ~ \"00-05\",\n      V6036 &gt;= 05 & V6036 &lt; 10 ~ \"05-10\",\n      V6036 &gt;= 10 & V6036 &lt; 15 ~ \"10-15\",\n      V6036 &gt;= 15 & V6036 &lt; 20 ~ \"15-20\",\n      V6036 &gt;= 20 & V6036 &lt; 25 ~ \"20-25\",\n      V6036 &gt;= 25 & V6036 &lt; 30 ~ \"25-30\",\n      V6036 &gt;= 30 & V6036 &lt; 35 ~ \"30-35\",\n      V6036 &gt;= 35 & V6036 &lt; 40 ~ \"35-40\",\n      V6036 &gt;= 40 & V6036 &lt; 45 ~ \"40-45\",\n      V6036 &gt;= 45 & V6036 &lt; 50 ~ \"45-50\",\n      V6036 &gt;= 50 & V6036 &lt; 55 ~ \"50-55\",\n      V6036 &gt;= 55 & V6036 &lt; 60 ~ \"55-60\",\n      V6036 &gt;= 60 & V6036 &lt; 65 ~ \"60-65\",\n      V6036 &gt;= 65 & V6036 &lt; 70 ~ \"65-70\",\n      V6036 &gt;= 70              ~ \"70+\"\n      ))\n\nhead(pop) |&gt; \n  collect()\n\n     V0010     V0601 V6036 age_group\n1 8.705865 Masculino    22     20-25\n2 8.705865  Feminino    17     15-20\n3 9.818689 Masculino    38     35-40\n4 9.495608  Feminino    44     40-45\n5 9.495608 Masculino    11     10-15\n6 9.495608 Masculino    16     15-20\n\n\nE em seguida, nós só precisamos somar o número de homens e mulheres em cada grupo de idade. Para isso, nós somamos os valores da variável de peso amostral V0010 em cada grupo. Repare que ao chamarmos a função collect(), o código é executado e retorna um data.frame com a contagem de pessoas por sexo e faixa de idade. Repare que nós processamos todos os mais de 20 milhões de registro do censo, mas só precisamos carregar na memória essa tabela com 30 observações.\n\n# cacula tabela de contagem de pessoas por idade\npiramide_df &lt;- pop |&gt;\n               group_by(V0601, age_group) |&gt;\n               summarise(pop_count = sum(V0010)) |&gt;\n               collect()\n\nhead(piramide_df)\n\n# A tibble: 6 × 3\n# Groups:   V0601 [2]\n  V0601     age_group pop_count\n  &lt;chr&gt;     &lt;chr&gt;         &lt;dbl&gt;\n1 Masculino 20-25      8627665.\n2 Feminino  15-20      8429180.\n3 Masculino 35-40      6767177.\n4 Feminino  40-45      6688525.\n5 Masculino 10-15      8727095.\n6 Masculino 15-20      8557608.\n\n\nPronto, no último passo é só fazer o gráfico de pirâmide populacional utilizando o pacote {ggplot2}.\n\n\nCódigo\n# remove grupo com idade missing `NA`\npiramide_df &lt;- filter(piramide_df, !is.na(age_group))\n\n# transforma a contagem de mulheres para valores negativos\npiramide_df &lt;- piramide_df |&gt;\n  mutate(pop_count = if_else(V0601 == \"Masculino\", pop_count, -pop_count))\n\n# figura\nggplot(data = piramide_df,\n       aes(x = pop_count / 1000,\n           y = age_group,\n           fill = V0601)) +\n  geom_col() +\n  scale_fill_discrete(name=\"\", type=c(\"#ffcb69\",\"#437297\")) +\n  scale_x_continuous(labels = function(x){scales::comma(abs(x))},\n                     breaks = c(-8000, -4000,0,4000, 8000),\n                     name = \"População (em milhares)\") +\n  theme_classic() +\n  theme(\n    legend.position = \"top\",\n    axis.title.y=element_blank(),\n    panel.grid.major.x = element_line(color = \"grey90\")\n  )\n\n\n\n\n\nPirâmide demográfica, Brasil, 2010",
    "crumbs": [
      "Explorando o Censo Demográfico",
      "Microdados do Censo"
    ]
  },
  {
    "objectID": "11_censobr_microdados.html#dados-de-domicílios",
    "href": "11_censobr_microdados.html#dados-de-domicílios",
    "title": "Microdados do Censo",
    "section": "Dados de domicílios",
    "text": "Dados de domicílios\n\nSaneamento:\nNeste exemplo, nós vamos usar os dados de domicílios do censo de 2010 para calcular qual a proporção de domicílios que estavam conectados à rede de esgoto nos municípios de cada região do Brasil. O primeiro passo é baixar os dados utilizando a função read_households().\n\ndom &lt;- read_households(year = 2010, \n                      showProgress = FALSE)\n\nAgora vamos (1) agrupar as observações por região e município, (2) obter o número de domicílios conectados à rede de esgoto, (3) obter o número total de domicílios, (4) calcular a proporção de domicílios conectados e (5) coletar os resultados.\n\nesg &lt;- dom |&gt; \n        compute() |&gt;\n1        group_by(name_region, code_muni) |&gt;\n2        summarize(rede = sum(V0010[which(V0207=='1')]),\n3                  total = sum(V0010)) |&gt;\n4        mutate(cobertura = rede / total) |&gt;\n5        collect()\n\nhead(esg)\n\n\n1\n\nAgrupar as observações por região e município\n\n2\n\nObter o número de domicílios conectados à rede de esgoto\n\n3\n\nObter o número total de domicílios\n\n4\n\nCalcular a proporção de domicílios conectados\n\n5\n\nColetar os resultados.\n\n\n\n\n# A tibble: 6 × 5\n# Groups:   name_region [1]\n  name_region  code_muni   rede  total cobertura\n  &lt;chr&gt;            &lt;int&gt;  &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;\n1 Centro-oeste   5000203   73.4  4534.   0.0162 \n2 Centro-oeste   5000252   10.3  1596.   0.00646\n3 Centro-oeste   5000609 2150.  11012.   0.195  \n4 Centro-oeste   5000708 1705.   7419.   0.230  \n5 Centro-oeste   5000807   35.9  2759.   0.0130 \n6 Centro-oeste   5000856   12.4  3053.   0.00407\n\n\nUma rápida análise da dispersão dos valores com o box-plot abaixo já revela um dos retratos da desigualdade regional brasileira. Em todos municípios da região Norte e quase metade dos municípios da região Nordeste, a gente encontra que menos de 50% dos domicílios estavam conectados à rede de esgoto em 2010. No próximo bloco, nós vamos visualizar como essas diferenças se distribuem espacialmente.\n\nggplot(esg) +\n  geom_boxplot(aes(x=reorder(name_region, -cobertura), y=cobertura, \n                   weight  = rede, color=name_region), \n               show.legend = F, outlier.alpha = 0.1) +\n  scale_y_continuous(labels = scales::percent) +\n  labs(x=\"Região\", y=\"Quantidade de domicílios\\nconectados à rede de esgoto\") +\n  theme_classic()",
    "crumbs": [
      "Explorando o Censo Demográfico",
      "Microdados do Censo"
    ]
  },
  {
    "objectID": "11_censobr_microdados.html#análise-espacial-com-geobr",
    "href": "11_censobr_microdados.html#análise-espacial-com-geobr",
    "title": "Microdados do Censo",
    "section": "Análise espacial com {geobr}",
    "text": "Análise espacial com {geobr}\nO {geobr} é um pacote para baixar dados espaciais oficiais do Brasil (Pereira e Gonçalves 2019). Ele inclui uma ampla variedade de dados geoespaciais disponíveis em várias escalas geográficas e para diversos anos, como municípios, regiões metropolitanas, biomas, estabelecimentos de saúde, etc (veja a lista completa no site do pacote).",
    "crumbs": [
      "Explorando o Censo Demográfico",
      "Microdados do Censo"
    ]
  },
  {
    "objectID": "11_censobr_microdados.html#integração-entre-censobr-e-geobr",
    "href": "11_censobr_microdados.html#integração-entre-censobr-e-geobr",
    "title": "Microdados do Censo",
    "section": "Integração entre {censobr} e {geobr}",
    "text": "Integração entre {censobr} e {geobr}\n\n \n\n\nTodos os dados do {censobr} são enriquecidos com colunas de geografia, seguindo os padrões de nomenclatura do pacote {geobr} para facilitar a manipulação e a integração de dados espaciais dos censos demográficos do Brasil. As colunas adicionadas são: c('code_muni', 'code_state', 'abbrev_state', 'name_state', 'code_region', 'name_region', 'code_weighting', 'code_tract').\n\nPara criarmos uma mapa com a distribuição espacial da cobertura da rede de esgoto no Brasil, nós vamos primeiro usar o pacote {geobr} para baixar as geometrias dos municípios brasileiros no ano de 2010. Vamos também sobrepor os limites das grandes regiões do país para dar um pouco mais de contexto à figura.\n\nlibrary(geobr)\n\nregioes_df &lt;- read_region(year = 2010,\n                          showProgress = FALSE)\n\nmuni_sf &lt;- read_municipality(year = 2010,\n                             showProgress = FALSE)\n\nhead(muni_sf)\n\nSimple feature collection with 6 features and 4 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -63.61822 ymin: -13.6937 xmax: -60.33317 ymax: -9.66916\nGeodetic CRS:  SIRGAS 2000\n  code_muni             name_muni code_state abbrev_state\n1   1100015 Alta Floresta D'oeste         11           RO\n2   1100023             Ariquemes         11           RO\n3   1100031                Cabixi         11           RO\n4   1100049                Cacoal         11           RO\n5   1100056            Cerejeiras         11           RO\n6   1100064     Colorado Do Oeste         11           RO\n                            geom\n1 MULTIPOLYGON (((-62.2462 -1...\n2 MULTIPOLYGON (((-63.13712 -...\n3 MULTIPOLYGON (((-60.52408 -...\n4 MULTIPOLYGON (((-61.42679 -...\n5 MULTIPOLYGON (((-61.41347 -...\n6 MULTIPOLYGON (((-60.66352 -...\n\n\nAgora nós só precisamos unir os dados espaciais com nossas estimativas utilizando a variável chave code_muni e mapear os resultados.\n\n# merge data\nesg_sf &lt;- dplyr::left_join(muni_sf, esg, by = 'code_muni')\n\n# plot map\nggplot() +\n  geom_sf(data = esg_sf, aes(fill = cobertura), color=NA) +\n  geom_sf(data = regioes_df, color = 'gray20', fill=NA) +\n  labs(title = \"Quantidade de domicílios conectados à rede de esgoto\") +\n  scale_fill_distiller(palette = \"Greens\", direction = 1, \n                       name='Proporção de\\ndomicílios', \n                       labels = scales::percent) +\n  theme_void() +\n  theme(legend.position = 'bottom')\n\n\n\n\n\n\n\n\n\nDistribuição espacial do valor do aluguel:\nNo exemplo anterior, nós agregamos os microdados do censo no nível de municípios. Neste próximo exemplo, faremos uma análise espacial no nível de áreas de ponderação. Aqui nós vamos visualizar como o valor do aluguel varia espacialmente na região metropolitana de São Paulo.\nPrimeiro, vamos baixar os municípios da região metropolitana de São Paulo com o {geobr}.\n\nmetro_sp &lt;- geobr::read_metro_area(year = 2010,\n                                     showProgress = FALSE) |&gt; \n              filter(name_metro == \"RM São Paulo\")\n\nTambém precisamos dos polígonos das áreas de ponderação. Com o código abaixo, baixamos todas as áreas de ponderação do estado de São Paulo e, em seguida, mantemos apenas aquelas na região metropolitana de São Paulo.\n\nwt_areas &lt;- geobr::read_weighting_area(code_weighting = \"SP\",\n                                       year = 2010,\n                                       simplified = FALSE,\n1                                       showProgress = FALSE)\n\nwt_areas &lt;- filter(wt_areas, code_muni %in% metro_sp$code_muni)\nhead(wt_areas)\n\n\n1\n\nO comportamento padrão do {geobr} é baixar uma versão da malha espacial com geometrias ligeiramente simplificadas (simplified = TRUE) para agilizar o processamento e visualização de dados. Aqui, nós baixamos os dados com geometrias originais devido à escala espacial da visualização dos resultados.\n\n\n\n\nSimple feature collection with 6 features and 7 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -46.73454 ymin: -23.64487 xmax: -46.64756 ymax: -23.53528\nGeodetic CRS:  SIRGAS 2000\n  code_weighting code_muni name_muni code_state abbrev_state code_region\n1  3550308005100   3550308 São Paulo         35           SP           3\n2  3550308005102   3550308 São Paulo         35           SP           3\n3  3550308005101   3550308 São Paulo         35           SP           3\n4  3550308005104   3550308 São Paulo         35           SP           3\n5  3550308005103   3550308 São Paulo         35           SP           3\n6  3550308005106   3550308 São Paulo         35           SP           3\n  name_region                           geom\n1     Sudeste MULTIPOLYGON (((-46.67201 -...\n2     Sudeste MULTIPOLYGON (((-46.67663 -...\n3     Sudeste MULTIPOLYGON (((-46.67257 -...\n4     Sudeste MULTIPOLYGON (((-46.70138 -...\n5     Sudeste MULTIPOLYGON (((-46.69581 -...\n6     Sudeste MULTIPOLYGON (((-46.73454 -...\n\n\nAgora voltamos para a base de dados de domicílios do censo de 2010. Com essa base, nós precisamos calcular o valor médio do aluguel gasto em cada área de ponderação. Note que para isso nós usamos a média do aluguel (variável V2011) ponderada pelo peso do domicílio (variável V0010). Para encontrar esses valores, o código abaixo (1) filtra apenas as observações nos nossos municípios de interesse, (2) computa temporariamente o resultado, (3) agrupa as observações por área de ponderação, (4) calcula o valor médio do aluguel e (5) coleta os resultados.\n\nrent &lt;- dom |&gt;\n1        filter(code_muni %in% metro_sp$code_muni) |&gt;\n2        compute() |&gt;\n3        group_by(code_weighting) |&gt;\n4        summarize(avgrent=weighted.mean(x=V2011, w=V0010, na.rm=TRUE)) |&gt;\n5        collect()\n\nhead(rent)\n\n\n1\n\nFiltra apenas as observações nos nossos municípios de interesse\n\n2\n\nComputa temporariamente o resultado\n\n3\n\nAgrupa as observações por área de ponderação\n\n4\n\nCalcula o valor médio do aluguel\n\n5\n\nColeta os resultados.\n\n\n\n\n# A tibble: 6 × 2\n  code_weighting avgrent\n  &lt;chr&gt;            &lt;dbl&gt;\n1 3503901003001     355.\n2 3503901003002     627.\n3 3503901003003     358.\n4 3505708005001     577.\n5 3505708005002     397.\n6 3505708005003     327.\n\n\nPor fim, basta unirmos os dados espaciais com nossas estimativas de aluguel pela variável chave de código da área de ponderação (code_weighting), e mapear os resultados.\n\nrent_sf &lt;- left_join(wt_areas, rent, by = 'code_weighting')\n\nggplot() +\n  geom_sf(data = rent_sf, aes(fill = avgrent), color=NA) +\n  geom_sf(data = metro_sp, color='gray', fill=NA) +\n  labs(title = \"Valor médio do aluguel por área de ponderação\",\n       subtitle = \"Região Metropolitana de São Paulo, 2010\") +\n  scale_fill_distiller(palette = \"Purples\", direction = 1, \n                       name='Valores\\nem R$',\n                       labels = scales::number_format(big.mark = \".\")) +\n  theme_void()",
    "crumbs": [
      "Explorando o Censo Demográfico",
      "Microdados do Censo"
    ]
  },
  {
    "objectID": "11_censobr_microdados.html#data-cache",
    "href": "11_censobr_microdados.html#data-cache",
    "title": "Microdados do Censo",
    "section": "Data cache",
    "text": "Data cache\nNa primeira vez que o usuário executa uma função, o {censobr} fará o download do arquivo e o armazenará localmente. Dessa forma, os dados só precisam ser baixados uma vez. Quando o parâmetro cache está configurado como TRUE (que é o comportamento padrão do pacote), a função lerá os dados que já estão armanezados em cache, o que é praticamente instantâneo.\nOs usuários podem gerenciar os conjuntos de dados em cache usando a função censobr_cache(). Por exemplo, os usuários podem:\nListar arquivos em cache:\n\ncensobr_cache(list_files = TRUE)\n\nDeletar um arquivo específico:\n\ncensobr_cache(delete_file = \"2010_emigration\")\n\nDeletar todos arquivos do cache:\n\ncensobr_cache(delete_file = \"all\")\n\nPor padrão, os arquivos do {censobr} são salvos no diretório ‘User’. No entanto, os usuários podem executar a função set_censobr_cache_dir() para definir um diretório de cache personalizado. Note que essa definição personalizada precisa ser definida a cada nova sessão do R.\n\ntempf &lt;- tempdir()\n\nset_censobr_cache_dir(path = tempf)",
    "crumbs": [
      "Explorando o Censo Demográfico",
      "Microdados do Censo"
    ]
  },
  {
    "objectID": "LICENSE.html",
    "href": "LICENSE.html",
    "title": "Introdução à análise de dados no R",
    "section": "",
    "text": "Attribution-ShareAlike 4.0 International\n=======================================================================\nCreative Commons Corporation (“Creative Commons”) is not a law firm and does not provide legal services or legal advice. Distribution of Creative Commons public licenses does not create a lawyer-client or other relationship. Creative Commons makes its licenses and related information available on an “as-is” basis. Creative Commons gives no warranties regarding its licenses, any material licensed under their terms and conditions, or any related information. Creative Commons disclaims all liability for damages resulting from their use to the fullest extent possible.\nUsing Creative Commons Public Licenses\nCreative Commons public licenses provide a standard set of terms and conditions that creators and other rights holders may use to share original works of authorship and other material subject to copyright and certain other rights specified in the public license below. The following considerations are for informational purposes only, are not exhaustive, and do not form part of our licenses.\n Considerations for licensors: Our public licenses are\n intended for use by those authorized to give the public\n permission to use material in ways otherwise restricted by\n copyright and certain other rights. Our licenses are\n irrevocable. Licensors should read and understand the terms\n and conditions of the license they choose before applying it.\n Licensors should also secure all rights necessary before\n applying our licenses so that the public can reuse the\n material as expected. Licensors should clearly mark any\n material not subject to the license. This includes other CC-\n licensed material, or material used under an exception or\n limitation to copyright. More considerations for licensors:\nwiki.creativecommons.org/Considerations_for_licensors\n\n Considerations for the public: By using one of our public\n licenses, a licensor grants the public permission to use the\n licensed material under specified terms and conditions. If\n the licensor's permission is not necessary for any reason--for\n example, because of any applicable exception or limitation to\n copyright--then that use is not regulated by the license. Our\n licenses grant only permissions under copyright and certain\n other rights that a licensor has authority to grant. Use of\n the licensed material may still be restricted for other\n reasons, including because others have copyright or other\n rights in the material. A licensor may make special requests,\n such as asking that all changes be marked or described.\n Although not required by our licenses, you are encouraged to\n respect those requests where reasonable. More considerations\n for the public:\nwiki.creativecommons.org/Considerations_for_licensees\n=======================================================================\nCreative Commons Attribution-ShareAlike 4.0 International Public License\nBy exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution-ShareAlike 4.0 International Public License (“Public License”). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions.\nSection 1 – Definitions.\n\nAdapted Material means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image.\nAdapter’s License means the license You apply to Your Copyright and Similar Rights in Your contributions to Adapted Material in accordance with the terms and conditions of this Public License.\nBY-SA Compatible License means a license listed at creativecommons.org/compatiblelicenses, approved by Creative Commons as essentially the equivalent of this Public License.\nCopyright and Similar Rights means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights.\nEffective Technological Measures means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements.\nExceptions and Limitations means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material.\nLicense Elements means the license attributes listed in the name of a Creative Commons Public License. The License Elements of this Public License are Attribution and ShareAlike.\nLicensed Material means the artistic or literary work, database, or other material to which the Licensor applied this Public License.\nLicensed Rights means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license.\nLicensor means the individual(s) or entity(ies) granting rights under this Public License.\nShare means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them.\nSui Generis Database Rights means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world.\nYou means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning.\n\nSection 2 – Scope.\n\nLicense grant.\n\nSubject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to:\n\nreproduce and Share the Licensed Material, in whole or in part; and\nproduce, reproduce, and Share Adapted Material.\n\nExceptions and Limitations. For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions.\nTerm. The term of this Public License is specified in Section 6(a).\nMedia and formats; technical modifications allowed. The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a)\n\nnever produces Adapted Material.\n\nDownstream recipients.\n\nOffer from the Licensor – Licensed Material. Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License.\nAdditional offer from the Licensor – Adapted Material. Every recipient of Adapted Material from You automatically receives an offer from the Licensor to exercise the Licensed Rights in the Adapted Material under the conditions of the Adapter’s License You apply.\nNo downstream restrictions. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material.\n\nNo endorsement. Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i).\n\nOther rights.\n\nMoral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise.\nPatent and trademark rights are not licensed under this Public License.\nTo the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties.\n\n\nSection 3 – License Conditions.\nYour exercise of the Licensed Rights is expressly made subject to the following conditions.\n\nAttribution.\n\nIf You Share the Licensed Material (including in modified form), You must:\n\nretain the following if it is supplied by the Licensor with the Licensed Material:\n\nidentification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated);\na copyright notice;\na notice that refers to this Public License;\na notice that refers to the disclaimer of warranties;\na URI or hyperlink to the Licensed Material to the extent reasonably practicable;\n\nindicate if You modified the Licensed Material and retain an indication of any previous modifications; and\nindicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License.\n\nYou may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information.\nIf requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable.\n\nShareAlike.\nIn addition to the conditions in Section 3(a), if You Share Adapted Material You produce, the following conditions also apply.\n\nThe Adapter’s License You apply must be a Creative Commons license with the same License Elements, this version or later, or a BY-SA Compatible License.\nYou must include the text of, or the URI or hyperlink to, the Adapter’s License You apply. You may satisfy this condition in any reasonable manner based on the medium, means, and context in which You Share Adapted Material.\nYou may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, Adapted Material that restrict exercise of the rights granted under the Adapter’s License You apply.\n\n\nSection 4 – Sui Generis Database Rights.\nWhere the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material:\n\nfor the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database;\nif You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material, including for purposes of Section 3(b); and\nYou must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database.\n\nFor the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights.\nSection 5 – Disclaimer of Warranties and Limitation of Liability.\n\nUNLESS OTHERWISE SEPARATELY UNDERTAKEN BY THE LICENSOR, TO THE EXTENT POSSIBLE, THE LICENSOR OFFERS THE LICENSED MATERIAL AS-IS AND AS-AVAILABLE, AND MAKES NO REPRESENTATIONS OR WARRANTIES OF ANY KIND CONCERNING THE LICENSED MATERIAL, WHETHER EXPRESS, IMPLIED, STATUTORY, OR OTHER. THIS INCLUDES, WITHOUT LIMITATION, WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, ABSENCE OF LATENT OR OTHER DEFECTS, ACCURACY, OR THE PRESENCE OR ABSENCE OF ERRORS, WHETHER OR NOT KNOWN OR DISCOVERABLE. WHERE DISCLAIMERS OF WARRANTIES ARE NOT ALLOWED IN FULL OR IN PART, THIS DISCLAIMER MAY NOT APPLY TO YOU.\nTO THE EXTENT POSSIBLE, IN NO EVENT WILL THE LICENSOR BE LIABLE TO YOU ON ANY LEGAL THEORY (INCLUDING, WITHOUT LIMITATION, NEGLIGENCE) OR OTHERWISE FOR ANY DIRECT, SPECIAL, INDIRECT, INCIDENTAL, CONSEQUENTIAL, PUNITIVE, EXEMPLARY, OR OTHER LOSSES, COSTS, EXPENSES, OR DAMAGES ARISING OUT OF THIS PUBLIC LICENSE OR USE OF THE LICENSED MATERIAL, EVEN IF THE LICENSOR HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSSES, COSTS, EXPENSES, OR DAMAGES. WHERE A LIMITATION OF LIABILITY IS NOT ALLOWED IN FULL OR IN PART, THIS LIMITATION MAY NOT APPLY TO YOU.\nThe disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability.\n\nSection 6 – Term and Termination.\n\nThis Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically.\nWhere Your right to use the Licensed Material has terminated under Section 6(a), it reinstates:\n\nautomatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or\nupon express reinstatement by the Licensor.\n\nFor the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License.\nFor the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License.\nSections 1, 5, 6, 7, and 8 survive termination of this Public License.\n\nSection 7 – Other Terms and Conditions.\n\nThe Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed.\nAny arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License.\n\nSection 8 – Interpretation.\n\nFor the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License.\nTo the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions.\nNo term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor.\nNothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority.\n\n=======================================================================\nCreative Commons is not a party to its public licenses. Notwithstanding, Creative Commons may elect to apply one of its public licenses to material it publishes and in those instances will be considered the “Licensor.” The text of the Creative Commons public licenses is dedicated to the public domain under the CC0 Public Domain Dedication. Except for the limited purpose of indicating that material is shared under a Creative Commons public license or as otherwise permitted by the Creative Commons policies published at creativecommons.org/policies, Creative Commons does not authorize the use of the trademark “Creative Commons” or any other trademark or logo of Creative Commons without its prior written consent including, without limitation, in connection with any unauthorized modifications to any of its public licenses or any other arrangements, understandings, or agreements concerning use of licensed material. For the avoidance of doubt, this paragraph does not form part of the public licenses.\nCreative Commons may be contacted at creativecommons.org."
  },
  {
    "objectID": "06_analise_exploratoria.html",
    "href": "06_analise_exploratoria.html",
    "title": "Análise exploratória de dados",
    "section": "",
    "text": "Nesta aula:\nUma etapa importante da análise exploratória de dados envolve visualizar dados. Isso será apresentado na próxima aula!",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Análise exploratória de dados"
    ]
  },
  {
    "objectID": "06_analise_exploratoria.html#importando-dados",
    "href": "06_analise_exploratoria.html#importando-dados",
    "title": "Análise exploratória de dados",
    "section": "Importando dados",
    "text": "Importando dados\nNesta aula, utilizaremos a tabela preparada na aula anterior: \"dados_output/sidra_4092_arrumado.rds\".\n\n\n\n\n\n\nExpanda para fazer download da base de dados\n\n\n\n\n\nCaso não tenha o arquivo da tabela que utilizaremos, você pode baixar aqui, e copiar o arquivo para a pasta dados_output do seu projeto.\nOutra opção é executar o código abaixo:\n\ndownload.file(\n1  url = \"https://github.com/ipeadata-lab/curso_r_intro_202409/raw/refs/heads/main/dados_output/sidra_4092_arrumado.rds\",\n2  destfile = \"dados_output/sidra_4092_arrumado.rds\",\n3  mode = \"wb\"\n  )\n\n\n1\n\nURL que desejamos baixar\n\n2\n\nCaminho onde queremos baixar o arquivo (diretório + nome do arquivo + extensão do arquivo)\n\n3\n\nConfiguração que evita corromper arquivos binários.\n\n\n\n\n\n\n\nVamos carregar a base de dados com a função read_rds():\n\n1library(dplyr)\n2dados &lt;- readr::read_rds(\"dados_output/sidra_4092_arrumado.rds\")\n3glimpse(dados)\n\n\n1\n\nCarregando o pacote dplyr\n\n2\n\nImportando os dados\n\n3\n\nEspiando a tabela\n\n\n\n\nRows: 1,350\nColumns: 16\n$ uf                                       &lt;chr&gt; \"Amapá\", \"Bahia\", \"Rio Grande…\n$ uf_codigo                                &lt;fct&gt; 16, 29, 24, 27, 13, 28, 25, 2…\n$ uf_sigla                                 &lt;chr&gt; \"AP\", \"BA\", \"RN\", \"AL\", \"AM\",…\n$ regiao                                   &lt;chr&gt; \"Norte\", \"Nordeste\", \"Nordest…\n$ trimestre                                &lt;chr&gt; \"1º trimestre 2012\", \"1º trim…\n$ trimestre_codigo                         &lt;chr&gt; \"201201\", \"201201\", \"201201\",…\n$ ano                                      &lt;dbl&gt; 2012, 2012, 2012, 2012, 2012,…\n$ trimestre_inicio                         &lt;date&gt; 2012-01-01, 2012-01-01, 2012…\n$ mil_pessoas_total                        &lt;dbl&gt; 487, 10986, 2540, 2383, 2463,…\n$ mil_pessoas_forca_de_trabalho            &lt;dbl&gt; 318, 6888, 1370, 1173, 1558, …\n$ mil_pessoas_forca_de_trabalho_ocupada    &lt;dbl&gt; 278, 6086, 1211, 1041, 1386, …\n$ mil_pessoas_forca_de_trabalho_desocupada &lt;dbl&gt; 40, 802, 159, 133, 173, 99, 1…\n$ mil_pessoas_fora_da_forca_de_trabalho    &lt;dbl&gt; 170, 4098, 1170, 1210, 905, 6…\n$ prop_desocupacao                         &lt;dbl&gt; 0.12578616, 0.11643438, 0.116…\n$ perc_desocupacao                         &lt;dbl&gt; 12.578616, 11.643438, 11.6058…\n$ periodo_pandemia                         &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Análise exploratória de dados"
    ]
  },
  {
    "objectID": "06_analise_exploratoria.html#estatísticas-descritivas",
    "href": "06_analise_exploratoria.html#estatísticas-descritivas",
    "title": "Análise exploratória de dados",
    "section": "Estatísticas descritivas",
    "text": "Estatísticas descritivas\nNa aula conhecendo os dados, vimos algumas funções que são interessantes para ver estatísticas descritivas de todas as variáveis de uma vez, como a summary() e a skim().\nPodemos utilizar também funções do R para calcular estatísticas descritivas de uma variável.\nPor exemplo, para calcular a média da variável perc_desocupacao, podemos usar a função mean():\n\nmean(dados$perc_desocupacao)\n\n[1] 10.2724\n\n\nNesse caso, estamos fazendo a média de TODOS os valores da variável prop_desocupacao, incluindo proporções de períodos diferentes. Veremos em breve como podemos calcular a média considerando grupos (por exemplo, qual é a média em cada período?).\nA seguir, temos uma lista de funções que podem ser utilizadas para calcular estatísticas descritivas de uma variável:\n\n\n\nFunção\nO que retorna?\n\n\n\n\nmin()\nValor mínimo\n\n\nmax()\nValor máximo\n\n\nsum()\nSoma\n\n\nmean()\nMédia\n\n\nweighted.mean()\nMédia ponderada\n\n\nmedian()\nMediana\n\n\nquantile()\nQuantil\n\n\nvar()\nVariância (simples)\n\n\nsd()\nDesvio Padrão\n\n\n\nVamos calcular algumas dessas estatísticas para a variável perc_desocupacao:\n\nmin(dados$perc_desocupacao)\n\n[1] 2.344666\n\nmax(dados$perc_desocupacao)\n\n[1] 21.7527\n\nmean(dados$perc_desocupacao)\n\n[1] 10.2724\n\nmedian(dados$perc_desocupacao)\n\n[1] 9.776482\n\nvar(dados$perc_desocupacao)\n\n[1] 14.88816\n\nsd(dados$perc_desocupacao)\n\n[1] 3.858517\n\n\n\n\n\n\n\n\nAviso\n\n\n\nAs variáveis que estamos trabalhando não possuem valores faltantes (NA). Caso a variável que você esteja trabalhando possua valores faltantes, é importante considerar o argumento na.rm = TRUE nas funções de estatísticas descritivas, para que os valores faltantes sejam ignorados ao realizar os cálculos.\nPor exemplo:\n\n1altura_personagens_starwars &lt;- dplyr::starwars$height\n2mean(altura_personagens_starwars)\n\n\n1\n\nAtribuindo a variável height (altura) da base starwars ao objeto altura_personagens_starwars.\n\n2\n\nTentando calcular a média da altura dos personagens de Star Wars. O resultado será NA pois temos NA na variável altura_personagens_starwars.\n\n\n\n\n[1] NA\n\n\n\n1mean(altura_personagens_starwars, na.rm = TRUE)\n\n\n1\n\nCalculando a média da altura dos personagens de Star Wars, ignorando os valores faltantes (NA).\n\n\n\n\n[1] 174.6049",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Análise exploratória de dados"
    ]
  },
  {
    "objectID": "06_analise_exploratoria.html#estatísticas-agregadas-summarise",
    "href": "06_analise_exploratoria.html#estatísticas-agregadas-summarise",
    "title": "Análise exploratória de dados",
    "section": "Estatísticas agregadas (summarise())",
    "text": "Estatísticas agregadas (summarise())\nUma função importante do pacote dplyr é a summarise(). Ela permite calcular estatísticas descritivas de variáveis de uma base de dados, usando as funções que vimos anteriormente. A diferença é que retornará um novo data frame com as estatísticas calculadas.\n\ntabela_resumo_perc_desocupacao &lt;- dados |&gt; \n  summarise(\n    minimo = min(perc_desocupacao),\n    maximo = max(perc_desocupacao),\n    amplitude = maximo - minimo,\n  )\n\ntabela_resumo_perc_desocupacao\n\n# A tibble: 1 × 3\n  minimo maximo amplitude\n   &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;\n1   2.34   21.8      19.4\n\n\nPorém isso não é muito diferente de usar as funções do R diretamente, como fizemos anteriormente.\nA grande vantagem da função summarise() é que podemos calcular estatísticas descritivas para grupos de dados, o que veremos a seguir.",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Análise exploratória de dados"
    ]
  },
  {
    "objectID": "06_analise_exploratoria.html#agrupando-dados-group_by",
    "href": "06_analise_exploratoria.html#agrupando-dados-group_by",
    "title": "Análise exploratória de dados",
    "section": "Agrupando dados (group_by())",
    "text": "Agrupando dados (group_by())\nImagine que queremos calcular a média da taxa de desemprego para cada estado. Para isso, precisaríamos agrupar a base de dados por cada estado.\nA função group_by() do pacote dplyr permite agrupar dados usando uma ou mais variáveis. Ela não faz alterações nas linhas e colunas da base de dados, porém ela cria um atributo que indica que a base de dados está agrupada. Assim, as etapas seguintes que utilizarem a base de dados agrupada irão considerar os grupos criados.\nVeja o exemplo a seguir: ao agrupar a base dados por uf, estamos criando grupos de dados para cada estado. Veja que o resultado é uma tibble, mas a diferença é que agora temos um grupo para cada estado (# Groups:   uf [27]):\n\ndados |&gt; \n  group_by(uf)\n\n# A tibble: 1,350 × 16\n# Groups:   uf [27]\n   uf                 uf_codigo uf_sigla regiao trimestre trimestre_codigo   ano\n   &lt;chr&gt;              &lt;fct&gt;     &lt;chr&gt;    &lt;chr&gt;  &lt;chr&gt;     &lt;chr&gt;            &lt;dbl&gt;\n 1 Amapá              16        AP       Norte  1º trime… 201201            2012\n 2 Bahia              29        BA       Norde… 1º trime… 201201            2012\n 3 Rio Grande do Nor… 24        RN       Norde… 1º trime… 201201            2012\n 4 Alagoas            27        AL       Norde… 1º trime… 201201            2012\n 5 Amazonas           13        AM       Norte  1º trime… 201201            2012\n 6 Sergipe            28        SE       Norde… 1º trime… 201201            2012\n 7 Paraíba            25        PB       Norde… 1º trime… 201201            2012\n 8 Pernambuco         26        PE       Norde… 1º trime… 201201            2012\n 9 Acre               12        AC       Norte  1º trime… 201201            2012\n10 Distrito Federal   53        DF       Centr… 1º trime… 201201            2012\n# ℹ 1,340 more rows\n# ℹ 9 more variables: trimestre_inicio &lt;date&gt;, mil_pessoas_total &lt;dbl&gt;,\n#   mil_pessoas_forca_de_trabalho &lt;dbl&gt;,\n#   mil_pessoas_forca_de_trabalho_ocupada &lt;dbl&gt;,\n#   mil_pessoas_forca_de_trabalho_desocupada &lt;dbl&gt;,\n#   mil_pessoas_fora_da_forca_de_trabalho &lt;dbl&gt;, prop_desocupacao &lt;dbl&gt;,\n#   perc_desocupacao &lt;dbl&gt;, periodo_pandemia &lt;dbl&gt;\n\n\nPodemos agrupar também usando mais que uma variável. Neste exemplo, vamos agrupar por uf e ano: uf, ano [351]. Isso significa que temos um grupo para cada combinação de estado (27) e ano (13), totalizando 351 grupos.\n\ndados |&gt; \n  group_by(uf, ano)\n\n# A tibble: 1,350 × 16\n# Groups:   uf, ano [351]\n   uf                 uf_codigo uf_sigla regiao trimestre trimestre_codigo   ano\n   &lt;chr&gt;              &lt;fct&gt;     &lt;chr&gt;    &lt;chr&gt;  &lt;chr&gt;     &lt;chr&gt;            &lt;dbl&gt;\n 1 Amapá              16        AP       Norte  1º trime… 201201            2012\n 2 Bahia              29        BA       Norde… 1º trime… 201201            2012\n 3 Rio Grande do Nor… 24        RN       Norde… 1º trime… 201201            2012\n 4 Alagoas            27        AL       Norde… 1º trime… 201201            2012\n 5 Amazonas           13        AM       Norte  1º trime… 201201            2012\n 6 Sergipe            28        SE       Norde… 1º trime… 201201            2012\n 7 Paraíba            25        PB       Norde… 1º trime… 201201            2012\n 8 Pernambuco         26        PE       Norde… 1º trime… 201201            2012\n 9 Acre               12        AC       Norte  1º trime… 201201            2012\n10 Distrito Federal   53        DF       Centr… 1º trime… 201201            2012\n# ℹ 1,340 more rows\n# ℹ 9 more variables: trimestre_inicio &lt;date&gt;, mil_pessoas_total &lt;dbl&gt;,\n#   mil_pessoas_forca_de_trabalho &lt;dbl&gt;,\n#   mil_pessoas_forca_de_trabalho_ocupada &lt;dbl&gt;,\n#   mil_pessoas_forca_de_trabalho_desocupada &lt;dbl&gt;,\n#   mil_pessoas_fora_da_forca_de_trabalho &lt;dbl&gt;, prop_desocupacao &lt;dbl&gt;,\n#   perc_desocupacao &lt;dbl&gt;, periodo_pandemia &lt;dbl&gt;\n\n\nPodemos usar função ungroup() para remover os grupos criados. Porém as funções que utilizaremos muitas vezes já remove os grupos. Veremos exemplos a seguir.",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Análise exploratória de dados"
    ]
  },
  {
    "objectID": "06_analise_exploratoria.html#estatísticas-agregadas-utilizando-grupos-group_by-summarise",
    "href": "06_analise_exploratoria.html#estatísticas-agregadas-utilizando-grupos-group_by-summarise",
    "title": "Análise exploratória de dados",
    "section": "Estatísticas agregadas utilizando grupos (group_by() + summarise())",
    "text": "Estatísticas agregadas utilizando grupos (group_by() + summarise())\nAgora que sabemos como agrupar dados, podemos calcular estatísticas descritivas para cada grupo.\n\nExemplo com um grupo\n\ndados |&gt; \n  group_by(uf) |&gt;\n  summarise(\n    minimo = min(perc_desocupacao),\n    media = mean(perc_desocupacao),\n    mediana = median(perc_desocupacao),\n    maximo = max(perc_desocupacao),\n    amplitude = maximo - minimo\n  )\n\n# A tibble: 27 × 6\n   uf               minimo media mediana maximo amplitude\n   &lt;chr&gt;             &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;\n 1 Acre               6.18 11.4    11.1    18.2     12.0 \n 2 Alagoas            8.15 13.5    12.6    20.4     12.3 \n 3 Amapá              8.88 14.4    14.4    21.7     12.9 \n 4 Amazonas           6.82 12.0    12.0    18.0     11.2 \n 5 Bahia              9.10 15.0    15.3    21.7     12.6 \n 6 Ceará              6.65 10.3    10.3    15.1      8.46\n 7 Distrito Federal   8.49 11.5    11.4    15.7      7.19\n 8 Espírito Santo     4.50  9.39    9.24   14.7     10.2 \n 9 Goiás              3.95  8.39    8.05   13.9      9.91\n10 Maranhão           5.59 11.4    10.9    17.5     11.9 \n# ℹ 17 more rows\n\n\nImportante: A função summarise() retorna um novo data frame com as colunas utilizadas para agrupar os dados e as estatísticas calculadas.\n\n\nExemplo com mais de um grupo\nPodemos utilizar mais que uma variável para agrupar. No exemplo a seguir, vamos agrupar por uf e ano:\n\ndados |&gt; \n  group_by(uf, ano) |&gt;\n  summarise(\n    media = mean(perc_desocupacao)\n  )\n\n`summarise()` has grouped output by 'uf'. You can override using the `.groups`\nargument.\n\n\n# A tibble: 351 × 3\n# Groups:   uf [27]\n   uf      ano media\n   &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 Acre   2012  8.55\n 2 Acre   2013  9.06\n 3 Acre   2014  7.82\n 4 Acre   2015  8.68\n 5 Acre   2016 11.0 \n 6 Acre   2017 14.3 \n 7 Acre   2018 13.8 \n 8 Acre   2019 14.7 \n 9 Acre   2020 15.4 \n10 Acre   2021 15.4 \n# ℹ 341 more rows\n\n\nA função retornou o seguinte warning:\n`summarise()` has grouped output by 'uf'. You can override using the `.groups` argument.\nIsso significa que a função summarise() retornou um data frame agrupado por uf. Se quisermos remover o agrupamento, podemos usar o argumento .groups = \"drop\":\n\ndados |&gt; \n  group_by(uf, ano) |&gt;\n  summarise(\n    media = mean(perc_desocupacao),\n1    .groups = \"drop\"\n  )\n\n\n1\n\nO argumento .groups = \"drop\" retorna uma tibble sem grupos.\n\n\n\n\n# A tibble: 351 × 3\n   uf      ano media\n   &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 Acre   2012  8.55\n 2 Acre   2013  9.06\n 3 Acre   2014  7.82\n 4 Acre   2015  8.68\n 5 Acre   2016 11.0 \n 6 Acre   2017 14.3 \n 7 Acre   2018 13.8 \n 8 Acre   2019 14.7 \n 9 Acre   2020 15.4 \n10 Acre   2021 15.4 \n# ℹ 341 more rows\n\n\nOutra opção é usar a função ungroup():\n\ndados |&gt; \n  group_by(uf, ano) |&gt;\n  summarise(\n    media = mean(perc_desocupacao)\n  ) |&gt; \n  ungroup()\n\n`summarise()` has grouped output by 'uf'. You can override using the `.groups`\nargument.\n\n\n# A tibble: 351 × 3\n   uf      ano media\n   &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 Acre   2012  8.55\n 2 Acre   2013  9.06\n 3 Acre   2014  7.82\n 4 Acre   2015  8.68\n 5 Acre   2016 11.0 \n 6 Acre   2017 14.3 \n 7 Acre   2018 13.8 \n 8 Acre   2019 14.7 \n 9 Acre   2020 15.4 \n10 Acre   2021 15.4 \n# ℹ 341 more rows",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Análise exploratória de dados"
    ]
  },
  {
    "objectID": "06_analise_exploratoria.html#filtros-com-grupos-group_by-filter",
    "href": "06_analise_exploratoria.html#filtros-com-grupos-group_by-filter",
    "title": "Análise exploratória de dados",
    "section": "Filtros com grupos (group_by() + filter())",
    "text": "Filtros com grupos (group_by() + filter())\nPodemos combinar a função group_by() com a função filter() para realizar filtros que respeitem o agrupamento dos dados.\nPor exemplo, queremos responder a pergunta: Qual foi período (trimestre) para cada estado onde a taxa de desocupação foi maior?\nPara isso, primeiro precisamos agrupar com o estado. A primeira coisa que vem em mente é utilizar a função summarise() e buscar o valor máximo:\n\ndados |&gt; \n  group_by(uf) |&gt; \n  summarise(maximo = max(perc_desocupacao))\n\n# A tibble: 27 × 2\n   uf               maximo\n   &lt;chr&gt;             &lt;dbl&gt;\n 1 Acre               18.2\n 2 Alagoas            20.4\n 3 Amapá              21.7\n 4 Amazonas           18.0\n 5 Bahia              21.7\n 6 Ceará              15.1\n 7 Distrito Federal   15.7\n 8 Espírito Santo     14.7\n 9 Goiás              13.9\n10 Maranhão           17.5\n# ℹ 17 more rows\n\n\nPorém como o summarise() apenas retorna as colunas de grupo e as colunas criadas, não temos a informação do trimestre.\nPara isso, podemos utilizar a função filter() para filtrar os dados por estado, filtrando a linha que apresenta o maior valor encontrado (max(perc_desocupacao)) na coluna perc_desocupacao:\n\ndados |&gt;\n1  group_by(uf) |&gt;\n2  filter(perc_desocupacao == max(perc_desocupacao)) |&gt;\n3  arrange(desc(perc_desocupacao)) |&gt;\n4  select(uf, trimestre, perc_desocupacao)\n\n\n1\n\nAgrupando por estado (uf).\n\n2\n\nFiltrando as linhas que apresentam o maior valor encontrado na coluna perc_desocupacao.\n\n3\n\nOrdenando os dados de forma decrescente, segundo o perc_desocupacao.\n\n4\n\nSelecionando apenas as colunas relevantes para a pergunta.\n\n\n\n\n# A tibble: 27 × 3\n# Groups:   uf [27]\n   uf                  trimestre         perc_desocupacao\n   &lt;chr&gt;               &lt;chr&gt;                        &lt;dbl&gt;\n 1 Pernambuco          2º trimestre 2021             21.8\n 2 Amapá               2º trimestre 2018             21.7\n 3 Bahia               1º trimestre 2021             21.7\n 4 Sergipe             3º trimestre 2020             20.8\n 5 Alagoas             4º trimestre 2020             20.4\n 6 Rio de Janeiro      1º trimestre 2021             19.6\n 7 Roraima             3º trimestre 2020             19.1\n 8 Acre                1º trimestre 2019             18.2\n 9 Amazonas            1º trimestre 2017             18.0\n10 Rio Grande do Norte 3º trimestre 2020             17.9\n# ℹ 17 more rows\n\n\n\nCriando colunas utilizando grupos (group_by() + mutate())\nPodemos criar novas colunas utilizando a função mutate().\nPodemos utilizar essa pergunta como exemplo: - Qual é a média da taxa de desocupação para cada trimestre?\nPodemos fazer calcular a média com a função summarise():\n\ndados |&gt;\n  group_by(trimestre) |&gt;\n  summarise(\n1    media_ponderada = weighted.mean(perc_desocupacao, mil_pessoas_total)\n  ) \n\n\n1\n\nCalculando a média ponderada da taxa de desocupação, considerando a coluna mil_pessoas_total como peso.\n\n\n\n\n# A tibble: 50 × 2\n   trimestre         media_ponderada\n   &lt;chr&gt;                       &lt;dbl&gt;\n 1 1º trimestre 2012            8.05\n 2 1º trimestre 2013            8.15\n 3 1º trimestre 2014            7.29\n 4 1º trimestre 2015            8.07\n 5 1º trimestre 2016           11.1 \n 6 1º trimestre 2017           14.0 \n 7 1º trimestre 2018           13.4 \n 8 1º trimestre 2019           13.0 \n 9 1º trimestre 2020           12.5 \n10 1º trimestre 2021           15.1 \n# ℹ 40 more rows\n\n\nA média foi calculada, porém o resultado é apenas uma tabela contendo o trimestre (a coluna de agrupamento), e a média (a coluna criada dentro do summarise()). Porém, se quisermos ter essa média como uma coluna da tabela, podemos fazer esse cálculo utilizando o mutate()\n\ndados_media_trimestre &lt;- dados |&gt;\n  group_by(trimestre) |&gt;\n1  mutate(\n2    media_ponderada = weighted.mean(perc_desocupacao, mil_pessoas_total)\n  ) \n\n\n1\n\nCriando uma nova coluna com mutate()\n\n2\n\nCalculando a média ponderada da taxa de desocupação, considerando a coluna mil_pessoas_total como peso.",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Análise exploratória de dados"
    ]
  },
  {
    "objectID": "06_analise_exploratoria.html#tabelas-de-frequência",
    "href": "06_analise_exploratoria.html#tabelas-de-frequência",
    "title": "Análise exploratória de dados",
    "section": "Tabelas de frequência",
    "text": "Tabelas de frequência\nUtilizamos tabelas de frequência para representar a quantidade de ocorrências de linhas segundo um grupo de variáveis.\nA função count() do pacote dplyr é uma forma simples de criar tabelas de frequência.\nPor exemplo: Se queremos saber quantos estados temos em cada região, podemos filtrar para apenas um período (para que não haja duplicações), e contar a quantidade de linhas em cada categoria da coluna regiao, usando a função count():\n\ndados_tri_recente &lt;- dados |&gt; \n1  dplyr::filter(trimestre_codigo == \"202402\")\n\n\n1\n\nFiltrando o trimestre mais recente\n\n\n\n\n\n1dados_tri_recente |&gt;\n2  count(regiao)\n\n\n1\n\nUsando dados filtrados para o trimestre mais recente\n\n2\n\nContando a quantidade de linhas para cada região (nesse caso, quantos estados tem por região).\n\n\n\n\n# A tibble: 5 × 2\n  regiao           n\n  &lt;chr&gt;        &lt;int&gt;\n1 Centro Oeste     4\n2 Nordeste         9\n3 Norte            7\n4 Sudeste          4\n5 Sul              3\n\n\nOutras funções que podem ser utilizadas para criar tabelas de frequência são: table() (do R base) e tabyl() (do pacote janitor).\nA função table() retorna uma tabela de frequência em formato largo. Nesse caso, o argumento é um vetor:\n\ntable(dados_tri_recente$regiao)\n\n\nCentro Oeste     Nordeste        Norte      Sudeste          Sul \n           4            9            7            4            3 \n\n\nA função janitor::tabyl() gera uma tabela de frequência com o percentual de cada categoria. Nele, o argumento é um data frame, e passamos a variável que queremos contar (podemos informar mais que uma variável):\n\njanitor::tabyl(dados_tri_recente, regiao)\n\n       regiao n   percent\n Centro Oeste 4 0.1481481\n     Nordeste 9 0.3333333\n        Norte 7 0.2592593\n      Sudeste 4 0.1481481\n          Sul 3 0.1111111",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Análise exploratória de dados"
    ]
  },
  {
    "objectID": "06_analise_exploratoria.html#exercícios-sugeridos",
    "href": "06_analise_exploratoria.html#exercícios-sugeridos",
    "title": "Análise exploratória de dados",
    "section": "Exercícios sugeridos",
    "text": "Exercícios sugeridos\n\nCalcule a média da taxa de desocupação nos dois primeiros trimestres de 2024, por região.\n\n\n\n\n\n\n\nDicas\n\n\n\n\n\nO resultado esperado é:\n\n\n# A tibble: 5 × 2\n  regiao       media\n  &lt;chr&gt;        &lt;dbl&gt;\n1 Centro Oeste  5.80\n2 Nordeste      9.60\n3 Norte         7.24\n4 Sudeste       6.96\n5 Sul           4.66\n\n\n\n\n\n\nQual foi o período (trimestre) para cada estado onde a taxa de desocupação foi menor? Ordene o resultado de forma crescente.\n\n\n\n\n\n\n\nDicas\n\n\n\n\n\nLembre-se de que podemos fazer filtros agrupados!\nO resultado esperado é:\n\n\n# A tibble: 27 × 3\n   uf                 trimestre         perc_desocupacao\n   &lt;chr&gt;              &lt;chr&gt;                        &lt;dbl&gt;\n 1 Rondônia           3º trimestre 2023             2.34\n 2 Mato Grosso        3º trimestre 2023             2.42\n 3 Santa Catarina     4º trimestre 2013             2.57\n 4 Mato Grosso do Sul 4º trimestre 2022             3.35\n 5 Paraná             4º trimestre 2014             3.75\n 6 Goiás              4º trimestre 2013             3.95\n 7 Tocantins          2º trimestre 2024             4.31\n 8 Rio Grande do Sul  4º trimestre 2012             4.39\n 9 Roraima            4º trimestre 2022             4.49\n10 Espírito Santo     2º trimestre 2024             4.50\n# ℹ 17 more rows\n\n\n\n\n\n\nQual foi a mediana da taxa de desocupação para cada estado, durante o período da pandemia? Ordene o resultado de forma decrescente.\n\n\n\n\n\n\n\nDicas\n\n\n\n\n\nO resultado esperado é:\n\n\n# A tibble: 27 × 2\n   uf                  mediana\n   &lt;chr&gt;                 &lt;dbl&gt;\n 1 Bahia                  20.2\n 2 Pernambuco             19.3\n 3 Sergipe                18.3\n 4 Alagoas                18.3\n 5 Rio de Janeiro         16.8\n 6 Maranhão               16.3\n 7 Amapá                  15.9\n 8 Amazonas               15.7\n 9 Rio Grande do Norte    15.5\n10 Acre                   14.9\n# ℹ 17 more rows",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Análise exploratória de dados"
    ]
  },
  {
    "objectID": "06_analise_exploratoria.html#sugestões-de-materiais",
    "href": "06_analise_exploratoria.html#sugestões-de-materiais",
    "title": "Análise exploratória de dados",
    "section": "Sugestões de materiais",
    "text": "Sugestões de materiais\n\nLivro Metodologia de Pesquisa Jurimétrica:\n\nCapítulo 3 - Estatísticas",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Análise exploratória de dados"
    ]
  },
  {
    "objectID": "00_instrucoes_pre_curso.html",
    "href": "00_instrucoes_pre_curso.html",
    "title": "Instalação",
    "section": "",
    "text": "Importante\n\n\n\nRecomendamos que todas as pessoas participantes instalem o R e o RStudio antes do início do curso.\nCaso tenha alguma dificuldade, entre em contato com a equipe do curso o quanto antes.",
    "crumbs": [
      "Pré-curso",
      "Instalação"
    ]
  },
  {
    "objectID": "00_instrucoes_pre_curso.html#instalação-do-r-e-rstudio",
    "href": "00_instrucoes_pre_curso.html#instalação-do-r-e-rstudio",
    "title": "Instalação",
    "section": "Instalação do R e RStudio",
    "text": "Instalação do R e RStudio\nPara a utilização do R, é necessário instalar o software R e o RStudio. O R é a linguagem de programação e o RStudio é um ambiente de desenvolvimento integrado (IDE - Integrated Development Environment) que facilita a utilização do R.\n\n\n\n\n\n\nAviso\n\n\n\nAtenção: O R deve ser instalado antes do RStudio.\n\n\n\nInstalação do R\nPara instalar o R, acesse o site CRAN e escolha o link de download de acordo com o seu sistema operacional:\n\n\n\n\n\n\n\nCaptura de tela do site CRAN\n\n\nInstale o R utilizando o instalador baixado.\n\n\nInstalação do RStudio\nApós instalar o R, acesse o site RStudio Desktop e escolha o link de download de acordo com o seu sistema operacional:\n\n\n\n\n\n\n\nCaptura de tela do site RStudio Desktop\n\n\nInstale o RStudio utilizando o instalador baixado.\n\n\nVerificação da instalação\nPara verificar se a instalação foi realizada com sucesso, abra o RStudio. Para isso, procure o ícone do RStudio no menu de programas do seu sistema operacional.\nA tela inicial do RStudio é semelhante à imagem abaixo:\n\n\n\nCaptura de tela da IDE RStudio\n\n\n\n\nVerificação da versão do R\nO R possui versões, e é importante verificar se a versão instalada é recente.\n\n\n\n\n\n\nAviso\n\n\n\nRecomendamos que utilizem o R na versão 4.1.0 ou superior.\nCaso a versão do R seja inferior a 4.1.0, recomendamos que atualizem o R para a versão mais recente.\nVersões mais antigas podem ter incompatibilidades com alguns códigos que utilizaremos durante o curso.\n\n\nExiste mais de uma forma para verificar a versão do R. A forma mais simples é verificando o texto que aparece no painel “Console” ao abrir o RStudio:\n\n\n\nCaptura de tela da IDE RStudio\n\n\nOutra forma é utilizando o comando R.version.string. Para isso, execute o seguinte comando no console do RStudio. Por exemplo, a versão do R utilizada para a elaboração deste material é 4.4.3:\nO comando R.version retorna um objeto com diversas informações sobre a versão do R, o sistema operacional utilizado, etc:\n\nR.version\n\n               _                           \nplatform       x86_64-pc-linux-gnu         \narch           x86_64                      \nos             linux-gnu                   \nsystem         x86_64, linux-gnu           \nstatus                                     \nmajor          4                           \nminor          4.3                         \nyear           2025                        \nmonth          02                          \nday            28                          \nsvn rev        87843                       \nlanguage       R                           \nversion.string R version 4.4.3 (2025-02-28)\nnickname       Trophy Case",
    "crumbs": [
      "Pré-curso",
      "Instalação"
    ]
  },
  {
    "objectID": "01_1_rproj.html",
    "href": "01_1_rproj.html",
    "title": "Diretório de trabalho e Projetos",
    "section": "",
    "text": "Para conseguir importar os dados no R e salvar os resultados no computador, precisamos conhecer alguns conceitos importantes, como caminhos de arquivos, diretório de trabalho, e os projetos do RStudio.",
    "crumbs": [
      "Conceitos básicos",
      "Diretório de trabalho e Projetos"
    ]
  },
  {
    "objectID": "01_1_rproj.html#caminhos-de-arquivos",
    "href": "01_1_rproj.html#caminhos-de-arquivos",
    "title": "Diretório de trabalho e Projetos",
    "section": "Caminhos de arquivos",
    "text": "Caminhos de arquivos\nQuando queremos importar um arquivo no R, precisamos informar para o R um texto que indica onde o arquivo está localizado no computador, partindo de uma pasta de referência. Esse texto é chamado de caminho.\nPor exemplo:\n\n\"/Users/beatrizmilz/Documents/IPEA-DATALAB/curso_r_intro_202409/dados/sidrar_4092_bruto.xlsx\"\n\n[1] \"/Users/beatrizmilz/Documents/IPEA-DATALAB/curso_r_intro_202409/dados/sidrar_4092_bruto.xlsx\"\n\n\nOs caminhos podem ser absolutos ou relativos.\n\nCaminho absoluto: é o caminho completo, desde a raiz do computador até o arquivo ou pasta desejada. Por exemplo: \"/Users/beatrizmilz/Documents/IPEA-DATALAB/curso_r_intro_202409/dados/sidrar_4092_bruto.xlsx.\nCaminho relativo: é o caminho a partir de uma pasta de referência. No geral, a pasta de referência é o diretório de trabalho, um conceito que veremos a seguir. Por exemplo, dados/sidrar_4092_bruto.xlsx.\n\nUtilizar caminhos relativos é uma boa prática, pois queremos que o código funcione em diferentes computadores.Se usarmos caminhos absolutos, dificilmente o código funcionará em outros computadores, pois as pessoas podem ter organizado os arquivos de forma diferente. Ao usar caminhos relativos, o código funcionará em qualquer computador.",
    "crumbs": [
      "Conceitos básicos",
      "Diretório de trabalho e Projetos"
    ]
  },
  {
    "objectID": "01_1_rproj.html#diretório-de-trabalho",
    "href": "01_1_rproj.html#diretório-de-trabalho",
    "title": "Diretório de trabalho e Projetos",
    "section": "Diretório de trabalho",
    "text": "Diretório de trabalho\nNo R, o diretório de trabalho (working directory) é o diretório (uma pasta no computador) onde o R irá partir quando precisarmos interagir com os arquivos do computador: buscar os arquivos que queremos importar, salvar arquivos, entre outros.\nPara saber qual é o diretório de trabalho atual, podemos usar a função getwd():\n\ngetwd()\n\n[1] \"/home/runner/work/curso_r_intro_202409/curso_r_intro_202409\"",
    "crumbs": [
      "Conceitos básicos",
      "Diretório de trabalho e Projetos"
    ]
  },
  {
    "objectID": "01_1_rproj.html#projetos-do-rstudio",
    "href": "01_1_rproj.html#projetos-do-rstudio",
    "title": "Diretório de trabalho e Projetos",
    "section": "Projetos do RStudio",
    "text": "Projetos do RStudio\nO RStudio possui uma funcionalidade chamada projetos. Quando criamos um projeto no RStudio, uma nova pasta é criada no computador, e o RStudio define essa pasta como o diretório de trabalho. Além disso, o RStudio também cria um arquivo com a extensão .Rproj dentro dessa pasta, que contém informações sobre o projeto.\nÉ recomendado que sempre trabalhemos em projetos no RStudio, pois isso facilita a organização dos arquivos e a reprodução do código.\nÉ recomendado também salvar os arquivos referentes ao projeto (como scripts, bases de dados, resultados, etc) dentro do projeto. Isso não significa que precisamos colocar todos os arquivos dentro da pasta principal do projeto: podemos criar sub-pastas para organizar os arquivos.\nPara criar um projeto no RStudio, primeiro precisamos acessar o menu de criação de projetos (New project Wizard). Podemos fazer isso de três formas:\n\nNo menu superior, clicando em File &gt; New Project...\nClicando no ícone de novo projeto na barra de ferramentas do RStudio: \nNo canto superior esquerdo, clicando no botão referente à projetos, e depois em New Project...:\n\n\n\n\nCaptura de tela do RStudio: Menu de projetos\n\n\nDepois, escolhemos o tipo de projeto que queremos criar. No geral, escolhemos a opção New Directory, para criar uma nova pasta no computador:\n\n\n\nCaptura de tela do RStudio: Criando um projeto\n\n\nDepois, escolhemos o tipo de projeto que queremos criar. Cada tipo de projeto apresenta arquivos específicos de template. O RStudio apresenta algumas opções de projeto, porém é possível adicionar novos tipos de projeto instalandos pacotes específicos.\nNo geral, escolhemos a opção New Project, para criar um projeto simples:\n\n\n\nCaptura de tela do RStudio: Escolhendo o tipo de projeto\n\n\nNa tela seguinte, precisamos informar o nome do projeto (no campo Directory name) e o diretório onde ele será criado (no campo Create project as subdirectory of):\n\n\n\nCaptura de tela do RStudio: Nomeando o projeto\n\n\nApós preencher as informações solicitadas, clicamos em Create Project. O RStudio criará o projeto e o abrirá:\n\n\n\nCaptura de tela do RStudio: projeto criado\n\n\n\n\n\n\n\n\nDica\n\n\n\nNote que o nome do projeto que criamos aparece no canto superior direito do RStudio.",
    "crumbs": [
      "Conceitos básicos",
      "Diretório de trabalho e Projetos"
    ]
  },
  {
    "objectID": "01_1_rproj.html#abrindo-um-projeto",
    "href": "01_1_rproj.html#abrindo-um-projeto",
    "title": "Diretório de trabalho e Projetos",
    "section": "Abrindo um projeto",
    "text": "Abrindo um projeto\nSempre que abrir o RStudio, verifique se você está com o projeto correto aberto. Se não estiver, abra o projeto clicando no ícone de projetos e depois em Open Project.\n\n\n\n\n\nVocê também pode abrir um projeto encontrando-o no seu computador e clicando duas vezes no arquivo .Rproj.",
    "crumbs": [
      "Conceitos básicos",
      "Diretório de trabalho e Projetos"
    ]
  },
  {
    "objectID": "01_1_rproj.html#preparando-o-projeto-para-o-curso",
    "href": "01_1_rproj.html#preparando-o-projeto-para-o-curso",
    "title": "Diretório de trabalho e Projetos",
    "section": "Preparando o projeto para o curso",
    "text": "Preparando o projeto para o curso\nAgora que já sabemos como criar um projeto no RStudio, vamos criar um projeto para o curso e salvar os materiais necessários. Esse projeto será usado em todas as aulas.\n\nCrie um projeto no RStudio, seguindo os passos acima. Use um nome que descreva o conteúdo do projeto, por exemplo: curso_r_intro_ipea_2024. Salve o projeto em uma pasta onde seja fácil de encontrar o projeto depois.\nVerifique se está no projeto correto. Para isso, verifique se o nome do projeto criado aparece no canto superior direito do RStudio.\nVamos criar algumas pastas para manter o conteúdo organizado. Essas pastas devem ser criadas dentro do projeto que acabamos de criar.\n\ndados/: bases de dados brutas que usaremos no curso.\ndados_output/: bases de dados que criaremos no curso (ex: bases de dados arrumadas).\nscripts/: scripts que criaremos no curso.\ngraficos/: gráficos que criaremos no curso.\n\n\nVocê pode criar as pastas diretamente no seu computador, ou pode criar as pastas usando a função dir.create(\"nome_da_pasta\"):\n\n1dir.create(\"dados\")\ndir.create(\"dados_output\") \ndir.create(\"scripts\")\ndir.create(\"graficos\")\n\n\n1\n\nAtenção: não use espaços, acentos ou caracteres especiais nos nomes das pastas, pois isso pode causar problemas ao referenciar os arquivos no R.\n\n\n\n\nApós criar as pastas, o seu projeto deve ter uma estrutura parecida com essa:\n.\n├── dados\n├── dados_output\n├── graficos\n├── nome_do_projeto.Rproj\n└── scripts\n\nPara os exemplos de importação de dados, vamos utilizar alguns arquivos que estão disponíveis no repositório do curso. Para fazer download dos arquivos, verifique se está no projeto criado para o curso, e se sim, copie o código e abaixo, cole e execute-o no console:\n\n\n# Arquivo .csv (texto separado por  vírgula)\ndownload.file(\n  url = \"https://github.com/ipeadata-lab/curso_r_intro_202409/raw/refs/heads/main/dados/sidrar_4092_bruto.csv\",\n  destfile = \"dados/sidrar_4092_bruto.csv\",\n  mode = \"wb\")\n\n# Arquivo .csv (texto separado por ponto e vírgula)\ndownload.file(\n  url = \"https://github.com/ipeadata-lab/curso_r_intro_202409/raw/refs/heads/main/dados/sidrar_4092_bruto_2.csv\",\n  destfile = \"dados/sidrar_4092_bruto_2.csv\",\n  mode = \"wb\")\n\n# Arquivo .xlsx (Excel)\ndownload.file(\n  url = \"https://github.com/ipeadata-lab/curso_r_intro_202409/raw/refs/heads/main/dados/sidrar_4092_bruto.xlsx\", \n  destfile = \"dados/sidrar_4092_bruto.xlsx\",\n  mode = \"wb\")\n\n# Arquivo .rds (binário do R)\ndownload.file(\n  url = \"https://github.com/ipeadata-lab/curso_r_intro_202409/raw/refs/heads/main/dados/sidrar_4092_bruto.rds\", \n  destfile = \"dados/sidrar_4092_bruto.rds\",\n  mode = \"wb\")\n\n# Arquivo .dta (Stata)\ndownload.file(\n  url = \"https://github.com/ipeadata-lab/curso_r_intro_202409/raw/refs/heads/main/dados/sidrar_4092_bruto.dta\", \n  destfile = \"dados/sidrar_4092_bruto.dta\",\n  mode = \"wb\")\n\nCaso tenha dificuldades baixando os arquivos utilizando os códigos acima, você também pode baixar os arquivos manualmente, clicando nos links abaixo, e copiar e colar para a pasta dados do seu projeto:\n\nsidrar_4092_bruto.csv\nsidrar_4092_bruto_2.csv\nsidrar_4092_bruto.xlsx\nsidrar_4092_bruto.rds\nsidrar_4092_bruto.dta\n\nÉ importante verificar se os arquivos foram baixados corretamente. Para isso, você pode usar a função dir() para listar os arquivos no diretório dados:\n\ndir(\"dados\")\n\n\"sidrar_4092_bruto_2.csv\" \n\"sidrar_4092_bruto.csv\"\n\"sidrar_4092_bruto.dta\"\n\"sidrar_4092_bruto.rds\"  \n\"sidrar_4092_bruto.xlsx\"\n\n\n\n\n\n\nAviso\n\n\n\nAlém de criar o projeto e salvar os arquivos que utilizaremos, também é importante instalar os pacotes necessários para o curso. Para isso, você pode seguir as instruções que estão na aula anterior: Instalação de pacotes necessários no curso.",
    "crumbs": [
      "Conceitos básicos",
      "Diretório de trabalho e Projetos"
    ]
  },
  {
    "objectID": "01_1_rproj.html#sugestões-de-materiais",
    "href": "01_1_rproj.html#sugestões-de-materiais",
    "title": "Diretório de trabalho e Projetos",
    "section": "Sugestões de materiais",
    "text": "Sugestões de materiais\n\nLivro R para Ciência de Dados 2ed:\n\nFluxo de Trabalho: scripts e projetos\n\nLivro Zen do R:\n\nCapítulo Rproj e Diretórios",
    "crumbs": [
      "Conceitos básicos",
      "Diretório de trabalho e Projetos"
    ]
  },
  {
    "objectID": "01_r_rstudio.html",
    "href": "01_r_rstudio.html",
    "title": "Conhecendo o R e o RStudio",
    "section": "",
    "text": "Pré-requisitos:\n\nInstalar o R\nInstalar o RStudio",
    "crumbs": [
      "Conceitos básicos",
      "Conhecendo o R e o RStudio"
    ]
  },
  {
    "objectID": "01_r_rstudio.html#linguagem-r",
    "href": "01_r_rstudio.html#linguagem-r",
    "title": "Conhecendo o R e o RStudio",
    "section": "Linguagem R",
    "text": "Linguagem R\nR é uma linguagem de programação com o foco em estatística, análise e visualização de dados.\nEla é uma linguagem de código aberto, o que significa que qualquer pessoa pode utilizá-la gratuitamente. Além disso, as pessoas com mais experiência na linguagem podem contribuir com o desenvolvimento de novas funcionalidades e pacotes.\nCaso queira saber mais sobre a linguagem R, acesse o site oficial (R-Project).\nAo instalar o R, você terá acesso a um programa chamado “R Console” que permite escrever e executar códigos em R:\n\n\n\nCaptura de tela do R Console no MacOS\n\n\n\n\n\nCaptura de tela do R Console no Windows\n\n\nPorém o R Console não é muito amigável para escrever códigos complexos ou realizar análises de dados. Por isso, é recomendado utilizar um ambiente de desenvolvimento integrado (IDE). Existem várias IDEs que podemos utilizar com o R, como: RStudio, Visual Studio Code, Positron, entre outros. A IDE mais utilizada por pessoas que programam em R é o RStudio.",
    "crumbs": [
      "Conceitos básicos",
      "Conhecendo o R e o RStudio"
    ]
  },
  {
    "objectID": "01_r_rstudio.html#ide-rstudio-desktop",
    "href": "01_r_rstudio.html#ide-rstudio-desktop",
    "title": "Conhecendo o R e o RStudio",
    "section": "IDE RStudio Desktop",
    "text": "IDE RStudio Desktop\nO RStudio é um IDE focada em programação em R, e é desenvolvido pela Posit. Ele facilita a escrita de códigos, execução de scripts, e visualização dos resultados.\nExistem algumas versões do RStudio. Neste curso, utilizaremos o RStudio Desktop, pois é a versão de código aberto (portanto é gratuita). Daqui em diante, sempre que mencionarmos “RStudio”, estaremos nos referindo ao RStudio Desktop.\n\n\n\n\n\n\nDica\n\n\n\nCaso o seu computador tenha limitações para instalação de programas, você pode utilizar o Posit Cloud, uma versão online do RStudio. Entretanto, a versão gratuita do Posit Cloud tem algumas limitações, como limite de tempo de uso (25 horas por mês) e de memória RAM (1 GB).\n\n\nAo abrir o RStudio, veremos a seguinte tela:\n Aos poucos, conheceremos os painéis e funcionalidades do RStudio. Neste momento, podemos destacar os três painéis que são apresentados:\n\nConsole: painel onde os códigos são executados. É similar ao “R Console”, citado anteriormente.\nEnvironment: painel onde as variáveis e dados carregados ficam listados.\nFiles: painel onde podemos navegar por arquivos no computador. A página inicial é o diretório de trabalho: esse conceito será explicado mais adiante.",
    "crumbs": [
      "Conceitos básicos",
      "Conhecendo o R e o RStudio"
    ]
  },
  {
    "objectID": "01_r_rstudio.html#scripts",
    "href": "01_r_rstudio.html#scripts",
    "title": "Conhecendo o R e o RStudio",
    "section": "Scripts",
    "text": "Scripts\nNo RStudio, podemos escrever e executar códigos no Console, porém os códigos são perdidos quando fechamos o programa. Para salvar os códigos e reutilizá-los posteriormente, utilizamos scripts.\nOs scripts são arquivos de texto onde podemos escrever códigos R e salvá-los para utilizar posteriormente. É recomendado que qualquer código que você deseje reutilizar ou que seja importante para a análise que você fizer seja salvo em um script.\nExistem algumas formas de criar um novo script:\n\nNo menu superior, clicando em File &gt; New File &gt; R Script.\nUtilizando o atalho Ctrl + Shift + N (Windows) ou Cmd + Shift + N (Mac).\nClicando no ícone de um arquivo com um sinal de + no canto superior esquerdo do RStudio e selecionando R Script:\n\n\n\n\nCaptura de tela do RStudio: Opção para criar novo Script\n\n\nApós abrir um script, o RStudio exibirá 4 paineis:\n\n\n\nCaptura de tela do RStudio\n\n\n\n\n\n\n\n\nDica\n\n\n\nO script é um arquivo salvo no nosso computador. Lembre-se de salvar os scripts com frequência para evitar perder o nosso trabalho.\nPodemos salvar um script de algumas formas, como:\n\nClicando em File &gt; Save no menu superior.\nClicando no ícone do disquete ().\nUtilizando o atalho Ctrl + S (Windows) ou Cmd + S (Mac).\n\n\n\n\nComo executar os códigos?\nPodemos escrever e executar códigos no Console ou em um script.\nNo Console, escrevemos o código diretamente e pressionamos Enter para executá-lo.\nEm um Script, escrevemos o código e podemos executá-lo de algumas formas:\n\nSelecionando o trecho de código que queremos executar e clicando no botão Run do RStudio, ou utilizando o atalho Ctrl + Enter (Windows) ou Cmd + Enter (Mac).\nClicando no trecho que queremos executar e clicando no botão Run do RStudio, ou utilizando o atalho Ctrl + Enter (Windows) ou Cmd + Enter (Mac).\n\n\n\nComentários\nComentários são textos que não são executados pelo R. Podemos usar comentários para explicar o que um bloco de código faz, para anotar ideias e explicar escolhas feitas, ou para desativar temporariamente um trecho de código.\nNo R, todo texto em uma linha após um hashtag (#) é um comentário. Por exemplo:\n\n# Este é um comentário",
    "crumbs": [
      "Conceitos básicos",
      "Conhecendo o R e o RStudio"
    ]
  },
  {
    "objectID": "01_r_rstudio.html#funções",
    "href": "01_r_rstudio.html#funções",
    "title": "Conhecendo o R e o RStudio",
    "section": "Funções",
    "text": "Funções\nAgora que já sabemos onde escrever nossos códigos em R (no Console ou em um script), é importante entender o conceito de funções.\nUma função é tipo de objeto no R, que quando executado, executa um bloco de código específico. As funções são úteis para evitar repetição de códigos e organizar o nosso trabalho.\nNo R, existem muitas funções prontas que podemos utilizar. Por exemplo, a função Sys.Date() retorna a data atual do sistema:\n\nSys.Date()\n\n[1] \"2025-03-07\"\n\n\nPara utilizar uma função, escrevemos o nome dela seguido de parênteses. Dentro dos parênteses, podemos colocar dados e informações úteis para a função executar a tarefa desejada, e são chamados de argumentos.\nPor exemplo, a função sqrt() calcula a raiz quadrada de um número. Para utilizá-la, podemos escrever mean() e informar esse número entre parênteses:\n\nsqrt(25)\n\n[1] 5\n\n\n\n\n\n\n\n\nDica\n\n\n\nAo adquirir experiência com o R, podemos criar nossas próprias funções. Isso é útil para automatizar tarefas repetitivas e para organizar o código.",
    "crumbs": [
      "Conceitos básicos",
      "Conhecendo o R e o RStudio"
    ]
  },
  {
    "objectID": "01_r_rstudio.html#pacotes",
    "href": "01_r_rstudio.html#pacotes",
    "title": "Conhecendo o R e o RStudio",
    "section": "Pacotes",
    "text": "Pacotes\nPacotes do R são coleções de funções, dados e documentação que estendem a funcionalidade básica da linguagem.\nO CRAN (Comprehensive R Archive Network) é o repositório oficial de pacotes do R. Ele contém milhares de pacotes que podem ser instalados e utilizados gratuitamente. Em setembro de 2024, o CRAN continha mais de 21.000 pacotes disponíveis.\nPara instalar um pacote, utilizamos a função install.packages() e informando o nome do pacote como texto entre aspas. Por exemplo, para instalar o pacote {tidyverse}, utilizamos o seguinte comando:\n\n1install.packages(\"tidyverse\")\n\n\n1\n\nInstala o pacote tidyverse\n\n\n\n\nApenas precisamos instalar um pacote uma vez.\nDepois de instalado, podemos carregá-lo com a função library(), para que as funções do pacote fiquem disponíveis para uso:\n\n1library(tidyverse)\n\n\n1\n\nCarrega o pacote tidyverse\n\n\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nPrecisamos carregar o pacote sempre que abrirmos um novo script, ou quando reiniciamos o RStudio. Uma pratica frequente é carregar os principais pacotes necessários no início do script.\n\n\n\n\n\n\nCuidado\n\n\n\nUma outra forma de acessar uma função é utilizando o operador ::. Por exemplo, para acessar a função read_csv() do pacote {readr}, podemos escrever readr::read_csv().\nEssa sintaxe é menos frequente, porém útil para evitar problemas de conflito de funções com o mesmo nome em pacotes diferentes. Esse problema acontece mais frequentemente quando carregamos muitos pacotes em um mesmo script.\nPor exemplo: o pacote {dplyr} apresenta uma função filter(), e o pacote {stats} também apresenta uma função filter(). Se não usarmos o operador ::, a função utilizada será a do pacote que foi carregado por último. Usando o operador ::, podemos escolher qual função queremos utilizar.",
    "crumbs": [
      "Conceitos básicos",
      "Conhecendo o R e o RStudio"
    ]
  },
  {
    "objectID": "01_r_rstudio.html#documentação",
    "href": "01_r_rstudio.html#documentação",
    "title": "Conhecendo o R e o RStudio",
    "section": "Documentação",
    "text": "Documentação\nAs funções e pacotes do R apresentam textos com explicações e exemplos de uso, chamados de documentação.\nAs documentações podem ser acessadas online, ou diretamente no RStudio.\n\nDocumentação no RStudio\nNo RStudio, podemos acessar a documentação de uma função ou pacote das seguintes formas:\n\nPara buscar informações sobre funções de pacotes já carregados (com library), podemos utilizar a função help(), informando o nome da função que queremos buscar como argumento (ex: help(mean)), ou utilizar o operador ?, seguido do nome da função (ex: ?mean).\n\n\n1help(mean)\n?mean\n\n\n1\n\nAbre a documentação da função mean()\n\n\n\n\n\nPara fazer uma por funções presentes em todos os pacotes instalados no computador, podemos utilizar o operador ??, seguido pelo termo que queremos buscar (ex: ??mean). Essa é uma busca mais ampla, que procura pelo termo no nome e na descrição das funções.\n\n\n1??mean\n\n\n1\n\nBusca por funções que contenham o termo “mean”\n\n\n\n\n\nPodemos utilizar o painel Help para buscar informações sobre funções e pacotes:\n\n\n\n\nCaptura de tela do RStudio: Painel Help\n\n\nAlém disso, a maioria dos pacotes vem com textos explicativos sobre como usá-los, chamadas de vignettes. Elas estão disponíveis online, mas também podem ser acessadas diretamente no RStudio.\nPara acessar no RStudio, podemos usar a função browseVignettes() para listar as vignettes disponíveis para um pacote específico. A lista será apresentada em uma janela do navegador (ex: Google Chrome, Firefox, Safari, etc):\n\nbrowseVignettes(\"dplyr\")\n\n\n\n\nCaptura de tela: Lista de Vignettes do pacote dplyr\n\n\n\n\nDocumentação online\nComo citado anteriormente, é possível acessar a documentação dos pacotes diretamente no RStudio e também online. No geral, o conteúdo disponível online é igual ao disponível no RStudio, mas pode ser mais fácil de buscar e navegar.\nUma forma de acessar a documentação online é fazendo uma busca no Google com os termos “R documentation {nome da função}”. Por exemplo: “R documentation mean()”.\nAlguns pacotes apresentam também sites próprios com documentações e vignettes.\nPor exemplo, o pacote {dplyr} (que usaremos no curso) tem um site próprio onde conseguimos acessar a documentação. Os pacotes do tidyverse apresentam sites similares, com páginas com os seguintes conteúdos:\n\nEm Get started encontramos uma introdução ao pacote, e exemplos de uso para quem quer aprender a usá-lo.\nEm Reference, encontramos a lista de funções disponíveis no pacote, e podemos acessar a documentação de cada uma delas:\n\n\n\n\nCaptura de tela: Site do pacote dplyr - Reference\n\n\n\nEm Articles podemos acessar as vignettes:\n\n\n\n\nCaptura de tela: Site do pacote dplyr - Vignettes\n\n\n\n\nCheatsheets\nAs cheatsheets (ou folhas de cola) são documentos resumidos com informações sobre funções e pacotes. Elas são úteis para consulta rápida.\nA Posit (empresa que desenvolve o RStudio) disponibiliza cheatsheets para diversos pacotes e tópicos. Elas podem ser acessadas no site Posit Cheatsheets.\nA lista a seguir apresenta algumas cheatsheets sobre temas que serão abordados ao longo do curso:\n\nRStudio IDE\nImportação de dados com o tidyverse\nTransformação de dados com dplyr\nVisualização de dados com ggplot2\nArrumando dados com tidyr\nArrow",
    "crumbs": [
      "Conceitos básicos",
      "Conhecendo o R e o RStudio"
    ]
  },
  {
    "objectID": "01_r_rstudio.html#instalação-de-pacotes-necessários-no-curso",
    "href": "01_r_rstudio.html#instalação-de-pacotes-necessários-no-curso",
    "title": "Conhecendo o R e o RStudio",
    "section": "Instalação de pacotes necessários no curso",
    "text": "Instalação de pacotes necessários no curso\nDurante o curso, utilizaremos diversos pacotes do R.\nVamos instalar os pacotes ao longo das aulas. Neste momento, vamos instalar os pacotes que utilizaremos nas primeiras aulas do curso. Copie o código abaixo no console, e execute-o para instalar os pacotes necessários:\n\n1pacotes_necessarios &lt;- c(\n  \"tidyverse\",\n  \"janitor\",\n  \"sidrar\",\n  \"readxl\",\n  \"writexl\",\n  \"fs\",\n  \"naniar\",\n  \"skimr\",\n  \"esquisse\",\n  \"geobr\",\n  \"sf\",\n  \"ipeaplot\",\n  \"ggthemes\",\n  \"censobr\",\n  \"arrow\",\n  \"knitr\",\n  \"abjData\",\n  \"DT\",\n  \"broom\",\n  \"report\",\n  \"car\",\n  \"stargazer\"\n)\n\n2install.packages(pacotes_necessarios)\n\n\n1\n\nCriando um conjunto com o nome dos pacotes necessários\n\n2\n\nInstalando os pacotes necessários",
    "crumbs": [
      "Conceitos básicos",
      "Conhecendo o R e o RStudio"
    ]
  },
  {
    "objectID": "01_r_rstudio.html#sugestões-de-materiais",
    "href": "01_r_rstudio.html#sugestões-de-materiais",
    "title": "Conhecendo o R e o RStudio",
    "section": "Sugestões de materiais",
    "text": "Sugestões de materiais\n\nLivro R para Ciência de Dados 2ed:\n\nIntrodução &gt; Pré-requisitos em diante\nFluxo de Trabalho: obtendo ajuda",
    "crumbs": [
      "Conceitos básicos",
      "Conhecendo o R e o RStudio"
    ]
  },
  {
    "objectID": "05_transformacao.html",
    "href": "05_transformacao.html",
    "title": "Transformando dados",
    "section": "",
    "text": "Primeiramente, precisamos carregar o pacote tidyverse e a base de dados que vamos utilizar. A base de dados é a tabela 4092 do SIDRA, que apresenta dados sobre “pessoas de 14 anos ou mais de idade por condição em relação à força de trabalho e condição de ocupação”1, e foi baixada previamente (em Importando dados).\nNeste capítulo, vamos explorar as funções de transformação de dados do pacote dplyr, a partir da pergunta norteadora abaixo:\n\nConsiderando que a tabela 4092 apresenta dados sobre “pessoas de 14 anos ou mais de idade por condição em relação à força de trabalho e condição de ocupação”, qual é a taxa de desocupação de cada estado e região do Brasil ao longo do tempo?\n\n\nlibrary(dplyr)\ndados_brutos &lt;- readr::read_rds(\"dados/sidrar_4092_bruto.rds\")",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Transformando dados"
    ]
  },
  {
    "objectID": "05_transformacao.html#introdução",
    "href": "05_transformacao.html#introdução",
    "title": "Transformando dados",
    "section": "",
    "text": "Primeiramente, precisamos carregar o pacote tidyverse e a base de dados que vamos utilizar. A base de dados é a tabela 4092 do SIDRA, que apresenta dados sobre “pessoas de 14 anos ou mais de idade por condição em relação à força de trabalho e condição de ocupação”1, e foi baixada previamente (em Importando dados).\nNeste capítulo, vamos explorar as funções de transformação de dados do pacote dplyr, a partir da pergunta norteadora abaixo:\n\nConsiderando que a tabela 4092 apresenta dados sobre “pessoas de 14 anos ou mais de idade por condição em relação à força de trabalho e condição de ocupação”, qual é a taxa de desocupação de cada estado e região do Brasil ao longo do tempo?\n\n\nlibrary(dplyr)\ndados_brutos &lt;- readr::read_rds(\"dados/sidrar_4092_bruto.rds\")",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Transformando dados"
    ]
  },
  {
    "objectID": "05_transformacao.html#linhas-colunas-e-objetivo-de-análise",
    "href": "05_transformacao.html#linhas-colunas-e-objetivo-de-análise",
    "title": "Transformando dados",
    "section": "Linhas, colunas e objetivo de análise",
    "text": "Linhas, colunas e objetivo de análise\nUma pergunta que é sempre importante ter em mente ao analisar dados é: O que cada linha representa? Na estatística, esse é o conceito da unidade observacional.\nO objeto dados_brutos apresenta uma linha para cada combinação das seguintes variáveis:\n\nTrimestre (Código) / Trimestre\nUnidade da Federação / Unidade da Federação (Código)\nVariável / Variável (Código)\nCondição em relação à força de trabalho e condição de ocupação e Condição em relação à força de trabalho e condição de ocupação (Código)\n\nPodemos consultar os valores distintos possíveis no R, para garantir que estamos selecionando corretamente os valores de interesse.\nAs variáveis disponíveis na base de dados, e suas unidades de medida são:\n\ndados_brutos |&gt;\n1  distinct(`Variável`, `Unidade de Medida`)\n\n\n1\n\nColunas que queremos buscar os valores distintos\n\n\n\n\n                                                                                   Variável\n1                                                       Pessoas de 14 anos ou mais de idade\n2                             Coeficiente de variação - Pessoas de 14 anos ou mais de idade\n3                           Distribuição percentual das pessoas de 14 anos ou mais de idade\n4 Coeficiente de variação - Distribuição percentual das pessoas de 14 anos ou mais de idade\n  Unidade de Medida\n1       Mil pessoas\n2                 %\n3                 %\n4                 %\n\n\nPodemos observar, cada linha representa uma combinação de trimestre, unidade da federação e variável.\nOutras perguntas relevantes ao analisar dados são:\n\nQual é a pergunta que eu quero responder com esses dados?\nQuais são as variáveis que eu preciso para responder essa pergunta?",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Transformando dados"
    ]
  },
  {
    "objectID": "05_transformacao.html#padronizar-nome-das-colunas",
    "href": "05_transformacao.html#padronizar-nome-das-colunas",
    "title": "Transformando dados",
    "section": "Padronizar nome das colunas",
    "text": "Padronizar nome das colunas\nÉ uma boa prática padronizar o nome das colunas de um data frame. Assim evitamos problemas de codificação de caracteres (encoding), facilitamos a legibilidade do código e evitamos possíveis erros ao acessar as colunas.\nO pacote janitor possui a função clean_names(), que padroniza os nomes das colunas de um data frame. Ele substitui espaços por underline (_), remove caracteres especiais, e transforma o texto em minúsculo, garantindo maior consistência ao lidar com os dados. Isso evita erros ao acessar colunas.\n\n1names(dados_brutos)\n\n\n1\n\nChecar o nome das colunas da base de dados\n\n\n\n\n [1] \"Nível Territorial (Código)\"                                             \n [2] \"Nível Territorial\"                                                      \n [3] \"Unidade de Medida (Código)\"                                             \n [4] \"Unidade de Medida\"                                                      \n [5] \"Valor\"                                                                  \n [6] \"Unidade da Federação (Código)\"                                          \n [7] \"Unidade da Federação\"                                                   \n [8] \"Trimestre (Código)\"                                                     \n [9] \"Trimestre\"                                                              \n[10] \"Variável (Código)\"                                                      \n[11] \"Variável\"                                                               \n[12] \"Condição em relação à força de trabalho e condição de ocupação (Código)\"\n[13] \"Condição em relação à força de trabalho e condição de ocupação\"         \n\n\n\n1dados_renomeados &lt;- janitor::clean_names(dados_brutos)\n\n2names(dados_renomeados)\n\n\n1\n\nLimpar nomes das colunas da base de dados, e salvar em um novo objeto chamado dados_renomeados\n\n2\n\nChecar o nome das colunas da base de dados renomeada\n\n\n\n\n [1] \"nivel_territorial_codigo\"                                             \n [2] \"nivel_territorial\"                                                    \n [3] \"unidade_de_medida_codigo\"                                             \n [4] \"unidade_de_medida\"                                                    \n [5] \"valor\"                                                                \n [6] \"unidade_da_federacao_codigo\"                                          \n [7] \"unidade_da_federacao\"                                                 \n [8] \"trimestre_codigo\"                                                     \n [9] \"trimestre\"                                                            \n[10] \"variavel_codigo\"                                                      \n[11] \"variavel\"                                                             \n[12] \"condicao_em_relacao_a_forca_de_trabalho_e_condicao_de_ocupacao_codigo\"\n[13] \"condicao_em_relacao_a_forca_de_trabalho_e_condicao_de_ocupacao\"",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Transformando dados"
    ]
  },
  {
    "objectID": "05_transformacao.html#pipe---encadeando-funções",
    "href": "05_transformacao.html#pipe---encadeando-funções",
    "title": "Transformando dados",
    "section": "Pipe - Encadeando funções",
    "text": "Pipe - Encadeando funções\nNos exemplos anteriores, utilizamos uma função por vez, para facilitar a compreensão de cada etapa. No entanto, à medida que nos familiarizamos com as funções, podemos encadear várias delas em um único fluxo de código usando o operador pipe (%&gt;% ou |&gt;). Isso torna o código mais conciso e elimina a criação de objetos intermediários desnecessários.\nPorém, é importante ter cuidado para não criar sequências muito longas e difíceis de entender.",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Transformando dados"
    ]
  },
  {
    "objectID": "05_transformacao.html#filtrando-linhas-filter",
    "href": "05_transformacao.html#filtrando-linhas-filter",
    "title": "Transformando dados",
    "section": "Filtrando linhas (filter())",
    "text": "Filtrando linhas (filter())\nPara responder à pergunta norteadora, não precisamos de todas as variáveis presentes na base de dados. Podemos filtrar as linhas que são relevantes para a análise, escolhendo as variáveis de interesse.\nNesse caso, podemos filtrar os dados onde a variável é igual à \"Pessoas de 14 anos ou mais de idade\".\n\ndados_filtrados &lt;- dados_renomeados |&gt;\n  filter(variavel == \"Pessoas de 14 anos ou mais de idade\")\n\nPara verificar se o filtro foi feito corretamente, podemos checar o número de linhas de cada base de dados:\n\nnrow(dados_renomeados)\n\n[1] 27000\n\nnrow(dados_filtrados)\n\n[1] 6750\n\n\nPodemos verificar também os valores distintos para as colunas variavel e unidade_de_medida na base de dados dados_filtrados:\n\ndados_filtrados |&gt;\n  distinct(variavel, unidade_de_medida)\n\n                             variavel unidade_de_medida\n1 Pessoas de 14 anos ou mais de idade       Mil pessoas\n\n\nAgora sabemos que a base de dados dados_filtrados contém apenas dados sobre a variável \"Pessoas de 14 anos ou mais de idade\", e que a unidade de medida da coluna valor é mil pessoas.\n\n\n\n\n\n\nVárias formas de filtrar as linhas\n\n\n\nComo citamos anteriormente, em algumas situações existem várias formas diferentes de realizar uma tarefa.\nNo caso da função filter(), podemos utilizar diferentes operadores lógicos ou funções auxiliares para fazer filtros.\nOs exemplos abaixo podem ser úteis para consulta futura!\nPara esses exemplos, vamos utilizar a tabela starwars do pacote dplyr. Nessa tabela, cada linha representa um personagem de Star Wars, e as colunas representam diferentes características desses personagens.\n\nExemplos de operadores lógicos:\n\n\n\n\n\n\n\n\n\nOperador\nDescrição\nExemplo\nInterpretação\n\n\n\n\n==\nIgual à\nspecies == \"Human\"\nTodas as linhas cuja espécie é “Human”\n\n\n!=\nDiferente de\nspecies != \"Human\"\nTodas as linhas cuja espécie não é “Human”\n\n\n&gt;\nMaior que\nheight &gt; 180\nTodas as linhas cuja altura é maior que 180\n\n\n&gt;=\nMaior ou igual a\nheight &gt;= 180\nTodas as linhas cuja altura é maior ou igual a 180\n\n\n&lt;\nMenor que\nheight &lt; 180\nTodas as linhas cuja altura é menor que 180\n\n\n&lt;=\nMenor ou igual a\nheight &lt;= 180\nTodas as linhas cuja altura é menor ou igual a 180\n\n\n%in%\nEstá em um conjunto\nspecies %in% c(\"Human\", \"Droid\")\nTodas as linhas cuja espécie é “Human” ou “Droid”\n\n\n!\nNegação\n!is.na(height)\nTodas as linhas cuja altura não é NA\n\n\n! e %in%\nNegação de um conjunto\n!(species %in% c(\"Human\", \"Droid\"))\nTodas as linhas cuja espécie não é “Human” ou “Droid”\n\n\n\n\n\nExemplos de funções auxiliares:\n\n\n\n\n\n\n\n\n\nFunção\nDescrição\nExemplo\nInterpretação\n\n\n\n\nstr_detect()\nDetecta padrões em textos\nstr_detect(name, \"Skywalker\")\nTodas as linhas cujo nome contém “Skywalker”\n\n\nstr_starts()\nDetecta padrões no início de textos\nstr_starts(name, \"Luke\")\nTodas as linhas cujo nome começa com “Luke”\n\n\nstr_ends()\nDetecta padrões no final de textos\nstr_ends(name, \"Vader\")\nTodas as linhas cujo nome termina com “Vader”",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Transformando dados"
    ]
  },
  {
    "objectID": "05_transformacao.html#selecionando-colunas-select",
    "href": "05_transformacao.html#selecionando-colunas-select",
    "title": "Transformando dados",
    "section": "Selecionando colunas (select())",
    "text": "Selecionando colunas (select())\nAlgumas colunas não são relevantes para responder à pergunta norteadora. Podemos selecionar apenas as colunas que vamos utilizar através da função select():\n\ndados_selecionados &lt;-\n  dados_filtrados |&gt;\n  select(\n    # colunas que queremos manter\n    unidade_da_federacao,\n    unidade_da_federacao_codigo,\n    trimestre,\n    trimestre_codigo,\n    condicao_em_relacao_a_forca_de_trabalho_e_condicao_de_ocupacao,\n    valor\n  )\n\nglimpse(dados_selecionados)\n\nRows: 6,750\nColumns: 6\n$ unidade_da_federacao                                           &lt;chr&gt; \"Rondôn…\n$ unidade_da_federacao_codigo                                    &lt;chr&gt; \"11\", \"…\n$ trimestre                                                      &lt;chr&gt; \"1º tri…\n$ trimestre_codigo                                               &lt;chr&gt; \"201201…\n$ condicao_em_relacao_a_forca_de_trabalho_e_condicao_de_ocupacao &lt;chr&gt; \"Total\"…\n$ valor                                                          &lt;dbl&gt; 1210, 7…\n\n\n\n\n\n\n\n\nVárias formas de selecionar colunas\n\n\n\nOs exemplos abaixo podem ser úteis para consulta futura!\nPara esses exemplos, vamos utilizar a tabela starwars do pacote dplyr:\n\nExemplos de seleção de colunas:\n\n\n\n\n\n\n\n\n\nOperador\nDescrição\nExemplo\nInterpretação\n\n\n\n\n:\nSeleciona um intervalo de colunas\nname:mass\nTodas as colunas entre name e mass\n\n\nc()\nSeleciona colunas específicas\nc(name, height, mass)\nApenas as colunas name, height e mass\n\n\n-c()\nExclui colunas específicas\n-c(name, height, mass)\nTodas as colunas, exceto name, height e mass\n\n\n\n\n\nExemplos de funções auxiliares:\n\n\n\n\n\n\n\n\n\nFunção\nDescrição\nExemplo\nInterpretação\n\n\n\n\nstarts_with()\nSeleciona colunas que começam com um prefixo\nstarts_with(\"h\")\nTodas as colunas que começam com “h”\n\n\nends_with()\nSeleciona colunas que terminam com um sufixo\nends_with(\"color\")\nTodas as colunas que terminam com “color”\n\n\ncontains()\nSeleciona colunas que contêm um padrão\ncontains(\"e\")\nTodas as colunas que contêm “e”",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Transformando dados"
    ]
  },
  {
    "objectID": "05_transformacao.html#renomeando-colunas-rename",
    "href": "05_transformacao.html#renomeando-colunas-rename",
    "title": "Transformando dados",
    "section": "Renomeando colunas (rename())",
    "text": "Renomeando colunas (rename())\nPodemos renomear colunas com a função rename(). Vamos renomear algumas colunas para facilitar o uso posteriormente:\n\ndados_renomeados_2 &lt;- dados_selecionados |&gt;\n  rename(\n    # colunas que queremos renomear: novo_nome = nome_atual\n    condicao = condicao_em_relacao_a_forca_de_trabalho_e_condicao_de_ocupacao,\n    valor_mil_pessoas = valor,\n    uf = unidade_da_federacao,\n    uf_codigo = unidade_da_federacao_codigo\n  )\n\nglimpse(dados_renomeados_2)\n\nRows: 6,750\nColumns: 6\n$ uf                &lt;chr&gt; \"Rondônia\", \"Rondônia\", \"Rondônia\", \"Rondônia\", \"Ron…\n$ uf_codigo         &lt;chr&gt; \"11\", \"11\", \"11\", \"11\", \"11\", \"11\", \"11\", \"11\", \"11\"…\n$ trimestre         &lt;chr&gt; \"1º trimestre 2012\", \"1º trimestre 2012\", \"1º trimes…\n$ trimestre_codigo  &lt;chr&gt; \"201201\", \"201201\", \"201201\", \"201201\", \"201201\", \"2…\n$ condicao          &lt;chr&gt; \"Total\", \"Força de trabalho\", \"Força de trabalho - o…\n$ valor_mil_pessoas &lt;dbl&gt; 1210, 765, 703, 62, 446, 1217, 782, 733, 49, 434, 12…",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Transformando dados"
    ]
  },
  {
    "objectID": "05_transformacao.html#transformando-a-estrutura-da-tabela-pivot_wider-e-pivot_longer",
    "href": "05_transformacao.html#transformando-a-estrutura-da-tabela-pivot_wider-e-pivot_longer",
    "title": "Transformando dados",
    "section": "Transformando a estrutura da tabela (pivot_wider() e pivot_longer())",
    "text": "Transformando a estrutura da tabela (pivot_wider() e pivot_longer())\nAinda considerando nossa pergunta norteadora, queremos calcular a taxa de desocupação de cada estado e região do Brasil ao longo do tempo. Para isso, é mais fácil trabalhar com a tabela onde cada linha represente uma UF por trimestre, e as categorias da variável condicao sejam transformadas em colunas.\nPara fazer essa transformação, podemos usar a função pivot_wider(), do pacote {tidyr}.\nA função pivot_wider() é útil quando queremos reorganizar uma tabela, transformando variáveis categóricas em novas colunas. Essa estrutura facilita cálculos comparativos e análises entre as diferentes categorias.\nPor exemplo, no formato atual (dados longos), temos uma linha para cada combinação de UF, trimestre e condição de ocupação. Ao usarmos pivot_wider(), vamos transformar a tabela para que cada linha represente uma UF por trimestre, e as diferentes condições de ocupação (empregado, desocupado, etc.) se tornem colunas.\n\ndados_largos &lt;- dados_renomeados_2 |&gt; \n  tidyr::pivot_wider(\n1  names_from = condicao,\n2  values_from = valor_mil_pessoas,\n3  names_prefix = \"mil_pessoas_\"\n)\n\n\n1\n\nnames_from =: Nome da coluna de onde os nomes das novas colunas serão extraídos\n\n2\n\nvalues_from =: Nome da coluna de onde os valores para preencher as novas colunas serão extraídos\n\n3\n\nnames_prefix =: Podemos adicionar um texto como prefixo. Nesse caso, isso é opcional, mas é útil para ficar claro qual é a unidade de medida das variáveis.\n\n\n\n\n\nglimpse(dados_largos)\n\nRows: 1,350\nColumns: 9\n$ uf                                           &lt;chr&gt; \"Rondônia\", \"Rondônia\", \"…\n$ uf_codigo                                    &lt;chr&gt; \"11\", \"11\", \"11\", \"11\", \"…\n$ trimestre                                    &lt;chr&gt; \"1º trimestre 2012\", \"2º …\n$ trimestre_codigo                             &lt;chr&gt; \"201201\", \"201202\", \"2012…\n$ mil_pessoas_Total                            &lt;dbl&gt; 1210, 1217, 1226, 1219, 1…\n$ `mil_pessoas_Força de trabalho`              &lt;dbl&gt; 765, 782, 784, 805, 796, …\n$ `mil_pessoas_Força de trabalho - ocupada`    &lt;dbl&gt; 703, 733, 738, 762, 746, …\n$ `mil_pessoas_Força de trabalho - desocupada` &lt;dbl&gt; 62, 49, 46, 42, 49, 39, 3…\n$ `mil_pessoas_Fora da força de trabalho`      &lt;dbl&gt; 446, 434, 441, 415, 437, …\n\n\nAgora temos uma tabela onde cada linha representa uma UF por trimestre, e as categorias da variável condicao se tornaram colunas. Porém agora temos colunas com nomes que estão com caracteres especiais, e podemos arrumar isso com a função clean_names().\n\ndados_largos_renomeados &lt;- janitor::clean_names(dados_largos)\nglimpse(dados_largos_renomeados)\n\nRows: 1,350\nColumns: 9\n$ uf                                       &lt;chr&gt; \"Rondônia\", \"Rondônia\", \"Rond…\n$ uf_codigo                                &lt;chr&gt; \"11\", \"11\", \"11\", \"11\", \"11\",…\n$ trimestre                                &lt;chr&gt; \"1º trimestre 2012\", \"2º trim…\n$ trimestre_codigo                         &lt;chr&gt; \"201201\", \"201202\", \"201203\",…\n$ mil_pessoas_total                        &lt;dbl&gt; 1210, 1217, 1226, 1219, 1233,…\n$ mil_pessoas_forca_de_trabalho            &lt;dbl&gt; 765, 782, 784, 805, 796, 800,…\n$ mil_pessoas_forca_de_trabalho_ocupada    &lt;dbl&gt; 703, 733, 738, 762, 746, 761,…\n$ mil_pessoas_forca_de_trabalho_desocupada &lt;dbl&gt; 62, 49, 46, 42, 49, 39, 36, 3…\n$ mil_pessoas_fora_da_forca_de_trabalho    &lt;dbl&gt; 446, 434, 441, 415, 437, 443,…\n\n\n\nAs funções pivot_longer() e pivot_wider() são usadas para alternar entre dados ‘longos’ e ‘largos’. Normalmente, dados longos são mais fáceis de visualizar, enquanto dados largos são melhores para realizar cálculos comparativos entre categorias. Para cada análise, sempre existe um formato mais apropriado a considerar.",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Transformando dados"
    ]
  },
  {
    "objectID": "05_transformacao.html#criando-e-transformando-colunas-mutate",
    "href": "05_transformacao.html#criando-e-transformando-colunas-mutate",
    "title": "Transformando dados",
    "section": "Criando e transformando colunas (mutate())",
    "text": "Criando e transformando colunas (mutate())\nPara criar novas colunas, ou transformar colunas que já existem, podemos usar a função mutate().\n\nAlterando os tipos de variáveis\nA variável uf_codigo está armazenada como valor numérico. No entanto, como não realizaremos operações matemáticas com esses valores, é mais apropriado transformá-los em fatores, o que facilita a análise e previne erros em cálculos futuros.\nExistem várias funções para transformar variáveis de um tipo para outro, como as.factor(), as.character(), as.numeric(), as.Date(), etc.\n\ndados_tipo &lt;- dados_largos_renomeados |&gt;\n  mutate(\n    # nova variável:\n    # nome_da_coluna = o que queremos calcular\n    uf_codigo = as.factor(uf_codigo)\n    )\n\n\n\nCalculando a taxa de desocupação\nPara calcular a taxa de desocupação, precisamos criar uma nova variável representando a proporção de pessoas desocupadas em relação ao total de pessoas economicamente ativas.\n\ndados_com_proporcao &lt;- dados_tipo |&gt;\n  mutate(\n1    prop_desocupacao = mil_pessoas_forca_de_trabalho_desocupada / mil_pessoas_forca_de_trabalho,\n2    perc_desocupacao = prop_desocupacao * 100\n  )\n\n\n1\n\nCalculando a proporção da desocupação: para cada linha, vamos dividir o valor mil_pessoas_forca_de_trabalho_desocupada por mil_pessoas_forca_de_trabalho.\n\n2\n\nMultiplicando por 100 para transformar em percentual.\n\n\n\n\n\n\nCriando uma variável trimestre_inicio\nPodemos criar uma nova variável chamada trimestre_inicio para representar a data de início de cada trimestre. Para isso, precisaremos criar algumas outras variáveis “auxiliares” a partir da variável trimestre_codigo: ano, trimestre_numero e trimestre_mes_inicio.\n\ndados_com_trimestre &lt;- dados_com_proporcao |&gt;\n  mutate(\n1    ano = stringr::str_sub(trimestre_codigo, 1, 4),\n2    ano = as.numeric(ano),\n    \n3    trimestre_numero = stringr::str_sub(trimestre_codigo, 5, 6),\n4    trimestre_numero = as.numeric(trimestre_numero),\n    \n5    trimestre_mes_inicio = case_when(\n      trimestre_numero == 1 ~ 1,\n      trimestre_numero == 2 ~ 4,\n      trimestre_numero == 3 ~ 7,\n      trimestre_numero == 4 ~ 10\n    ),\n    \n6    trimestre_inicio = paste0(ano, \"-\", trimestre_mes_inicio, \"-01\"),\n7    trimestre_inicio = as.Date(trimestre_inicio),\n    \n8    .after = trimestre_codigo\n  ) |&gt; \n9  select(-trimestre_mes_inicio, -trimestre_numero)\n\n\n1\n\nExtrair os 4 primeiros caracteres do código do trimestre\n\n2\n\nConvertendo a coluna ano de texto para numérico\n\n3\n\nExtrair os 2 últimos caracteres do código do trimestre\n\n4\n\nConvertendo a coluna trimestre_numero de texto para numérico\n\n5\n\nCriar variável com o mês de início do trimestre\n\n6\n\nCriar variável com data de início do trimestre (neste momento, com tipo texto), colando os valores do mês e ano.\n\n7\n\nConvertendo a coluna trimestre_inicio de texto para Data\n\n8\n\nQueremos adicionar as colunas novas após a coluna trimestre_codigo\n\n9\n\nRemovendo colunas que não serão necessárias\n\n\n\n\n\n\nCriando uma variável dummy\nUma variável dummy é uma variável binária que indica a presença ou ausência de algum atributo.\nPodemos criar uma variável dummy para identificar os trimestres que ocorreram durante o período de emergência em saúde pública de importância nacional de COVID-19. Para isso, vamos criar uma nova variável chamada periodo_pandemia, que será 1 para os trimestres que ocorreram durante a pandemia, e 0 para os demais trimestres. A função que utilizaremos é a case_when() do pacote {dplyr}.\n\nComeço: Fevereiro de 2020\nFinal: Abril de 2022\n\n\ndados_com_dummy &lt;- dados_com_trimestre |&gt; \n  mutate(\n    periodo_pandemia = case_when(\n    trimestre_codigo %in% c(\"202001\", \"202002\", \"202003\", \"202004\",\n                            \"202101\", \"202102\", \"202103\", \"202104\",\n1                            \"202201\") ~ 1,\n2    .default = 0\n  ))\n\n\n1\n\nCaso o trimestre_codigo sejam um dos listados dentro do vetor, queremos salvar o valor 1 na coluna periodo_pandemia.\n\n2\n\nO valor padrão é 0. Se nenhuma regra listada contemplar alguma linha, a coluna criada (periodo_pandemia) receberá o valor padrão (0). Ou seja, as linhas cujo período que não estão no vetor listado receberão o valor 0.",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Transformando dados"
    ]
  },
  {
    "objectID": "05_transformacao.html#ordenando-as-linhas-arrange",
    "href": "05_transformacao.html#ordenando-as-linhas-arrange",
    "title": "Transformando dados",
    "section": "Ordenando as linhas (arrange())",
    "text": "Ordenando as linhas (arrange())\nA base atual está ordada por trimestre e código da unidade da federação. Para facilitar a análise, podemos ordenar as linhas segundo a proporção de desocupação calculada no passo anterior, usando a função arrange():\n\ndados_com_dummy |&gt;\n1  select(trimestre_codigo, uf, perc_desocupacao) |&gt;\n2  arrange(perc_desocupacao)\n\n\n1\n\nSelecionando colunas relevantes, para facilitar ver o resultado\n\n2\n\nOrdenar linhas usando a coluna perc_desocupacao, de forma crescente\n\n\n\n\n# A tibble: 1,350 × 3\n   trimestre_codigo uf             perc_desocupacao\n   &lt;chr&gt;            &lt;chr&gt;                     &lt;dbl&gt;\n 1 202303           Rondônia                   2.34\n 2 202302           Rondônia                   2.38\n 3 202303           Mato Grosso                2.42\n 4 201304           Santa Catarina             2.57\n 5 201204           Santa Catarina             2.69\n 6 201404           Santa Catarina             2.70\n 7 201402           Santa Catarina             2.83\n 8 201303           Santa Catarina             2.84\n 9 201403           Santa Catarina             2.95\n10 202302           Mato Grosso                3.00\n# ℹ 1,340 more rows\n\n\nA função arrange() ordena, por padrão, de forma crescente. Podemos ordenar de forma decrescente, utilizando a função desc() junto à coluna que queremos ordenar de forma decrescente:\n\ndados_com_dummy |&gt;\n1  select(trimestre_codigo, uf, perc_desocupacao) |&gt;\n2  arrange(desc(perc_desocupacao))\n\n\n1\n\nSelecionando colunas relevantes, para facilitar ver o resultado\n\n2\n\nOrdenar linhas usando a coluna perc_desocupacao, de forma decrescente\n\n\n\n\n# A tibble: 1,350 × 3\n   trimestre_codigo uf         perc_desocupacao\n   &lt;chr&gt;            &lt;chr&gt;                 &lt;dbl&gt;\n 1 202102           Pernambuco             21.8\n 2 201802           Amapá                  21.7\n 3 202101           Bahia                  21.7\n 4 201801           Amapá                  21.6\n 5 202101           Pernambuco             21.4\n 6 202003           Bahia                  21.1\n 7 202003           Sergipe                20.8\n 8 202004           Bahia                  20.7\n 9 202101           Sergipe                20.7\n10 202002           Bahia                  20.5\n# ℹ 1,340 more rows\n\n\nNesse caso, as linhas ficaram ordenadas de forma decrescente, de acordo com a proporção de desocupação. Porém os trimestres não estão ordenados! A função arrange() permite que ordenemos por mais de uma coluna, e a ordem de prioridade é dada pela ordem em que as colunas são passadas para a função:\n\ndados_ordenados &lt;- dados_com_dummy |&gt; \n  arrange(\n  # colunas que queremos usar ordenar\n  trimestre_codigo, desc(prop_desocupacao)\n)\n\nglimpse(dados_ordenados)\n\nRows: 1,350\nColumns: 14\n$ uf                                       &lt;chr&gt; \"Amapá\", \"Bahia\", \"Rio Grande…\n$ uf_codigo                                &lt;fct&gt; 16, 29, 24, 27, 13, 28, 25, 2…\n$ trimestre                                &lt;chr&gt; \"1º trimestre 2012\", \"1º trim…\n$ trimestre_codigo                         &lt;chr&gt; \"201201\", \"201201\", \"201201\",…\n$ ano                                      &lt;dbl&gt; 2012, 2012, 2012, 2012, 2012,…\n$ trimestre_inicio                         &lt;date&gt; 2012-01-01, 2012-01-01, 2012…\n$ mil_pessoas_total                        &lt;dbl&gt; 487, 10986, 2540, 2383, 2463,…\n$ mil_pessoas_forca_de_trabalho            &lt;dbl&gt; 318, 6888, 1370, 1173, 1558, …\n$ mil_pessoas_forca_de_trabalho_ocupada    &lt;dbl&gt; 278, 6086, 1211, 1041, 1386, …\n$ mil_pessoas_forca_de_trabalho_desocupada &lt;dbl&gt; 40, 802, 159, 133, 173, 99, 1…\n$ mil_pessoas_fora_da_forca_de_trabalho    &lt;dbl&gt; 170, 4098, 1170, 1210, 905, 6…\n$ prop_desocupacao                         &lt;dbl&gt; 0.12578616, 0.11643438, 0.116…\n$ perc_desocupacao                         &lt;dbl&gt; 12.578616, 11.643438, 11.6058…\n$ periodo_pandemia                         &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n\n\nAgora temos a base de dados ordenada por trimestre, e dentro de cada trimestre, por proporção de desocupação (de forma descrecente).",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Transformando dados"
    ]
  },
  {
    "objectID": "05_transformacao.html#unindo-duas-bases-de-dados-left_join",
    "href": "05_transformacao.html#unindo-duas-bases-de-dados-left_join",
    "title": "Transformando dados",
    "section": "Unindo duas bases de dados (left_join())",
    "text": "Unindo duas bases de dados (left_join())\nUnir duas tabelas é algo comum em análises de dados. Usamos operações do tipo join para combinar duas tabelas, utilizando uma ou mais colunas como “chave”. As colunas do tipo chave têm valores comuns nas duas tabelas e são usadas para identificar as linhas correspondentes entre elas.\nO pacote {dplyr} fornece um conjunto de funções para realizar diferentes tipos de uniões, como left_join(), inner_join(), full_join(), entre outras.\nA função left_join() é a mais frequentemente usada: ela mantém todas as linhas da primeira tabela e adiciona colunas da segunda tabela onde houver correspondência.\n\nExemplo 1: Introdutório\nA base de dados que temos apresenta o nome e o código da UF, mas seria interessante ter a região, para futuramente usar essa variável em análises.\nA base de dados importada abaixo é um arquivo .csv preparado com as informações necessárias:\n\nuf_regiao &lt;- readr::read_csv(\"https://raw.githubusercontent.com/ipeadata-lab/curso_r_intro_202409/refs/heads/main/dados/uf_regiao.csv\")\n\nRows: 27 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): uf_sigla, regiao\ndbl (1): uf_codigo\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nVamos verificar a estrutura da base de dados uf_regiao:\n\nglimpse(uf_regiao)\n\nRows: 27\nColumns: 3\n$ uf_sigla  &lt;chr&gt; \"RO\", \"AC\", \"AM\", \"RR\", \"PA\", \"AP\", \"TO\", \"MA\", \"PI\", \"CE\", …\n$ uf_codigo &lt;dbl&gt; 11, 12, 13, 14, 15, 16, 17, 21, 22, 23, 24, 25, 26, 27, 28, …\n$ regiao    &lt;chr&gt; \"Norte\", \"Norte\", \"Norte\", \"Norte\", \"Norte\", \"Norte\", \"Norte…\n\n\nPodemos tentar unir as tabelas, sem informar a chave. Quando não informamos a chave, a função buscará os nomes de colunas em comum para utilizar essas colunas como chave:\n\ndados_ordenados |&gt; \n  left_join(uf_regiao, by = \"uf_codigo\")\n\nError in `left_join()`:\n! Can't join `x$uf_codigo` with `y$uf_codigo` due to incompatible types.\nℹ `x$uf_codigo` is a &lt;factor&lt;48524&gt;&gt;.\nℹ `y$uf_codigo` is a &lt;double&gt;.\n\n\nNo exemplo acima, a função left_join() tentou unir as tabelas com a coluna uf_codigo, presente nas duas tabelas.\nPorém essas colunas apresentam tipos diferentes (fator e numérico). Precisamos deixá-las com o mesmo tipo para que a função left_join() consiga fazer a união corretamente. Vamos então transformar a coluna uf_codigo da tabela uf_regiao em fator:\n\nuf_regiao_fct &lt;- uf_regiao |&gt; \n  mutate(uf_codigo = as.factor(uf_codigo)) \n\nAgora podemos unir as tabelas dados_ordenados e uf_regiao_fct:\n\ndados_com_regiao &lt;- dados_ordenados |&gt;\n1  left_join(uf_regiao_fct, by = \"uf_codigo\") |&gt;\n2  relocate(uf_sigla, regiao, .after = uf_codigo)\n\n\n1\n\nUnindo a tabela dados ordenados e uf_regiao_fct usando como chave a coluna uf_codigo.\n\n2\n\nMover as colunas uf_sigla e regiao para após a coluna uf_codigo.\n\n\n\n\nA nova tabela dados_com_regiao contém as colunas de uf_sigla e regiao, que foram adicionadas a partir da tabela uf_regiao_fct:\n\nglimpse(dados_com_regiao)\n\nRows: 1,350\nColumns: 16\n$ uf                                       &lt;chr&gt; \"Amapá\", \"Bahia\", \"Rio Grande…\n$ uf_codigo                                &lt;fct&gt; 16, 29, 24, 27, 13, 28, 25, 2…\n$ uf_sigla                                 &lt;chr&gt; \"AP\", \"BA\", \"RN\", \"AL\", \"AM\",…\n$ regiao                                   &lt;chr&gt; \"Norte\", \"Nordeste\", \"Nordest…\n$ trimestre                                &lt;chr&gt; \"1º trimestre 2012\", \"1º trim…\n$ trimestre_codigo                         &lt;chr&gt; \"201201\", \"201201\", \"201201\",…\n$ ano                                      &lt;dbl&gt; 2012, 2012, 2012, 2012, 2012,…\n$ trimestre_inicio                         &lt;date&gt; 2012-01-01, 2012-01-01, 2012…\n$ mil_pessoas_total                        &lt;dbl&gt; 487, 10986, 2540, 2383, 2463,…\n$ mil_pessoas_forca_de_trabalho            &lt;dbl&gt; 318, 6888, 1370, 1173, 1558, …\n$ mil_pessoas_forca_de_trabalho_ocupada    &lt;dbl&gt; 278, 6086, 1211, 1041, 1386, …\n$ mil_pessoas_forca_de_trabalho_desocupada &lt;dbl&gt; 40, 802, 159, 133, 173, 99, 1…\n$ mil_pessoas_fora_da_forca_de_trabalho    &lt;dbl&gt; 170, 4098, 1170, 1210, 905, 6…\n$ prop_desocupacao                         &lt;dbl&gt; 0.12578616, 0.11643438, 0.116…\n$ perc_desocupacao                         &lt;dbl&gt; 12.578616, 11.643438, 11.6058…\n$ periodo_pandemia                         &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n\n\n\n\nExemplo 2: Intermediário\nUm exemplo comum de uso é quando temos dados por município ou estado, e desejamos visualizar esses dados em um mapa. Para isso, precisamos de informações geoespaciais, como a delimitação geográfica de cada município ou estado. Podemos usar o left_join() para combinar esses dados geoespaciais com os dados que queremos visualizar.\nVamos usar o pacote {geobr} para carregar as geometrias dos estados brasileiros.\n\n\n\n\n\n\nDica\n\n\n\nO pacote {geobr} facilita o acesso a dados geoespaciais do Brasil, como estados, municípios e outras divisões administrativas. Ele é muito útil quando queremos fazer análises geoespaciais, já que oferece dados geográficos prontos para uso.\nPodemos utilizar a função read_state() para carregar as geometrias dos estados brasileiros. Isso nos permite combinar essas geometrias com outros dados, como taxas de desocupação, e criar mapas que facilitam a visualização de padrões regionais.\n\n\nCaso não tenha instalado anteriormente o pacote {geobr}, você pode instalar com o comando abaixo:\n\ninstall.packages(\"geobr\")\n\n\ngeo_estados &lt;- geobr::read_state(showProgress = FALSE)\nglimpse(geo_estados)\n\nRows: 27\nColumns: 6\n$ code_state   &lt;dbl&gt; 11, 12, 13, 14, 15, 16, 17, 21, 22, 23, 24, 25, 26, 27, 2…\n$ abbrev_state &lt;chr&gt; \"RO\", \"AC\", \"AM\", \"RR\", \"PA\", \"AP\", \"TO\", \"MA\", \"PI\", \"CE…\n$ name_state   &lt;chr&gt; \"Rondônia\", \"Acre\", \"Amazonas\", \"Roraima\", \"Pará\", \"Amapá…\n$ code_region  &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, …\n$ name_region  &lt;chr&gt; \"Norte\", \"Norte\", \"Norte\", \"Norte\", \"Norte\", \"Norte\", \"No…\n$ geom         &lt;MULTIPOLYGON [°]&gt; MULTIPOLYGON (((-63.32721 -..., MULTIPOLYGON…\n\n\nO left_join() é usado aqui para combinar os dados do SIDRA com os dados das delimitações das UFs. Cada linha do nosso dataset de desocupação será associada à respectiva geometria da UF, permitindo visualizarmos as proporções de desocupação por UF em um mapa. Esse tipo de operação é comum quando queremos identificar padrões regionais.\nÉ importante garantir que as colunas usadas na combinação de tabelas (o argumento by do left_join()) tenham o mesmo tipo de dado. Podemos verificar o tipo de dado de cada coluna com a função class():\n\nclass(geo_estados$code_state)\n\n[1] \"numeric\"\n\nclass(dados_com_regiao$uf_codigo)\n\n[1] \"factor\"\n\n\nNeste caso, as colunas que queremos usar como chave são de tipos diferentes (numérico e fator), O left_join() não conseguirá fazer a correspondência corretamente, e a função gerará um erro:\n\nleft_join(geo_estados, dados_com_regiao, by = join_by(code_state == uf_codigo))\n\nError in `sf_column %in% names(g)`:\n! Can't join `x$code_state` with `y$uf_codigo` due to incompatible\n  types.\nℹ `x$code_state` is a &lt;double&gt;.\nℹ `y$uf_codigo` is a &lt;factor&lt;48524&gt;&gt;.\n\n\nNo exemplo, podemos transformar a coluna code_state em fator usando mutate(). Assim, garantimos que as colunas usadas no argumento by sejam do mesmo tipo e possam ser corretamente combinados.\n\ndados_geo &lt;- geo_estados |&gt; \n  mutate(code_state = as.factor(code_state)) |&gt; \n  left_join(dados_com_regiao, by = join_by(code_state == uf_codigo))\n\nglimpse(dados_geo)\n\nRows: 1,350\nColumns: 21\n$ code_state                               &lt;fct&gt; 11, 11, 11, 11, 11, 11, 11, 1…\n$ abbrev_state                             &lt;chr&gt; \"RO\", \"RO\", \"RO\", \"RO\", \"RO\",…\n$ name_state                               &lt;chr&gt; \"Rondônia\", \"Rondônia\", \"Rond…\n$ code_region                              &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ name_region                              &lt;chr&gt; \"Norte\", \"Norte\", \"Norte\", \"N…\n$ uf                                       &lt;chr&gt; \"Rondônia\", \"Rondônia\", \"Rond…\n$ uf_sigla                                 &lt;chr&gt; \"RO\", \"RO\", \"RO\", \"RO\", \"RO\",…\n$ regiao                                   &lt;chr&gt; \"Norte\", \"Norte\", \"Norte\", \"N…\n$ trimestre                                &lt;chr&gt; \"1º trimestre 2012\", \"2º trim…\n$ trimestre_codigo                         &lt;chr&gt; \"201201\", \"201202\", \"201203\",…\n$ ano                                      &lt;dbl&gt; 2012, 2012, 2012, 2012, 2013,…\n$ trimestre_inicio                         &lt;date&gt; 2012-01-01, 2012-04-01, 2012…\n$ mil_pessoas_total                        &lt;dbl&gt; 1210, 1217, 1226, 1219, 1233,…\n$ mil_pessoas_forca_de_trabalho            &lt;dbl&gt; 765, 782, 784, 805, 796, 800,…\n$ mil_pessoas_forca_de_trabalho_ocupada    &lt;dbl&gt; 703, 733, 738, 762, 746, 761,…\n$ mil_pessoas_forca_de_trabalho_desocupada &lt;dbl&gt; 62, 49, 46, 42, 49, 39, 36, 3…\n$ mil_pessoas_fora_da_forca_de_trabalho    &lt;dbl&gt; 446, 434, 441, 415, 437, 443,…\n$ prop_desocupacao                         &lt;dbl&gt; 0.08104575, 0.06265985, 0.058…\n$ perc_desocupacao                         &lt;dbl&gt; 8.104575, 6.265985, 5.867347,…\n$ periodo_pandemia                         &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ geom                                     &lt;MULTIPOLYGON [°]&gt; MULTIPOLYGON (((…\n\n\nAgora temos uma base de dados que combina os dados do SIDRA com as geometrias dos estados brasileiros.\nCombinar dados dessa forma nos permite fazer visualizações geoespaciais, como um mapa de calor das taxas de desocupação por estado. Isso facilita a identificação de padrões regionais, ajudando na interpretação dos dados.\nNão falaremos nesse momento sobre como criar visualizações e mapas, pois isso será abordado em aulas futuras. Mas podemos adiantar um exemplo de como criar um mapa apresentando as proporções de desocupação por estado:\n\n\nCódigo\nlibrary(ggplot2)\ndados_geo |&gt; \n  filter(trimestre_codigo == \"202402\") |&gt;\n  ggplot() +\n  geom_sf(aes(fill = perc_desocupacao)) +\n  theme_light() +\n  scale_fill_viridis_c() +\n  labs(title = \"Percentual de desocupação por UF no 2º trimestre de 2024\",\n       fill = \"Desocupação (%)\") +\n  theme(legend.position = \"bottom\")",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Transformando dados"
    ]
  },
  {
    "objectID": "05_transformacao.html#salvando-a-base-de-dados-preparada",
    "href": "05_transformacao.html#salvando-a-base-de-dados-preparada",
    "title": "Transformando dados",
    "section": "Salvando a base de dados preparada",
    "text": "Salvando a base de dados preparada\nPor fim, podemos salvar a base de dados preparada para usar nas próximas etapas. Assim não precisamos repetir todo o processo de limpeza e transformação de dados a cada vez que quisermos fazer uma análise.\nÉ recomendável salvar a base de dados em um formato que preserve a estrutura dos dados, como .rds.\n\n# Salvando os dados preparados\nreadr::write_rds(dados_com_regiao, \"dados_output/sidra_4092_arrumado.rds\")",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Transformando dados"
    ]
  },
  {
    "objectID": "05_transformacao.html#exercícios-sugeridos",
    "href": "05_transformacao.html#exercícios-sugeridos",
    "title": "Transformando dados",
    "section": "Exercícios sugeridos",
    "text": "Exercícios sugeridos\nUtilizando a base de dados que criamos nessa aula (com a taxa de desocupação calculada), responda as perguntas abaixo.\n\nCrie uma nova tabela com apenas as colunas uf, trimestre, perc_desocupacao e periodo_pandemia.\n\n\n\n\n\n\n\nDica 1\n\n\n\n\n\nO resultado esperado é:\n\n\n# A tibble: 1,350 × 4\n   uf                  trimestre         perc_desocupacao periodo_pandemia\n   &lt;chr&gt;               &lt;chr&gt;                        &lt;dbl&gt;            &lt;dbl&gt;\n 1 Amapá               1º trimestre 2012            12.6                 0\n 2 Bahia               1º trimestre 2012            11.6                 0\n 3 Rio Grande do Norte 1º trimestre 2012            11.6                 0\n 4 Alagoas             1º trimestre 2012            11.3                 0\n 5 Amazonas            1º trimestre 2012            11.1                 0\n 6 Sergipe             1º trimestre 2012            10.5                 0\n 7 Paraíba             1º trimestre 2012            10.0                 0\n 8 Pernambuco          1º trimestre 2012             9.58                0\n 9 Acre                1º trimestre 2012             9.27                0\n10 Distrito Federal    1º trimestre 2012             8.80                0\n# ℹ 1,340 more rows\n\n\n\n\n\n\nQual foi a combinação de Estado/Trimestre que teve a maior taxa de desocupação…\n\n\n\nDurante a pandemia?\n\n\nFora do período de pandemia?\n\n\n\n\n\n\n\n\nDica 1\n\n\n\n\n\nPara cada pergunta (durante ou fora do período de pandemia), precisamos fazer dois filtros:\n\n\nFiltrar as linhas que correspondem ao período de pandemia (ou fora dele)\n\n\nFiltrar a linha com a maior taxa de desocupação\n\n\n\n\n\n\n\n\n\n\n\nDica 2\n\n\n\n\n\nPara buscar o maior valor de uma coluna, podemos usar a função max().\nPor exemplo: o código abaixo retorna a linha com o personagem de Star Wars com o maior valor de massa (mass). Nesse caso, precisamos usar o argumento na.rm = TRUE para ignorar valores NA, pois a coluna mass tem valores faltantes.\n\nstarwars |&gt; \n  filter(mass == max(mass, na.rm = TRUE))\n\n# A tibble: 1 × 14\n  name      height  mass hair_color skin_color eye_color birth_year sex   gender\n  &lt;chr&gt;      &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n1 Jabba De…    175  1358 &lt;NA&gt;       green-tan… orange           600 herm… mascu…\n# ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;\n\n\n\n\n\n\n\n\n\n\n\nDica 3\n\n\n\n\n\nO resultado esperado é:\n\n\n\n\n\nuf\ntrimestre\nperc_desocupacao\nperiodo_pandemia\n\n\n\n\nPernambuco\n2º trimestre 2021\n21.7527\n1\n\n\n\n\n\n\n\n\n\nConsiderando o trimestre mais recente disponível, qual é o estado com a maior taxa de desocupação? E a maior?\n\n\n\n\n\n\n\nDica 1\n\n\n\n\n\nPara cada pergunta (durante ou fora do período de pandemia), precisamos fazer dois filtros:\n\n\nFiltrar as linhas que correspondem ao trimestre mais recente\n\n\nFiltrar a linha com a maior OU menor taxa de desocupação\n\n\n\n\n\n\n\n\n\n\n\nDica 2\n\n\n\n\n\nPodemos fazer o filtro usando o operador OU (|), para filtrar as linhas que correspondem ao estado com a maior OU menor taxa de desocupação.\nPor exemplo: o código abaixo retorna a linha com o personagem de Star Wars com o maior e o menor valor de massa (mass). Nesse caso, precisamos usar o argumento na.rm = TRUE para ignorar valores NA, pois a coluna mass tem valores faltantes.\n\nstarwars |&gt; \n  filter(mass == max(mass, na.rm = TRUE) | mass == min(mass, na.rm = TRUE))\n\n# A tibble: 2 × 14\n  name      height  mass hair_color skin_color eye_color birth_year sex   gender\n  &lt;chr&gt;      &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n1 Jabba De…    175  1358 &lt;NA&gt;       green-tan… orange           600 herm… mascu…\n2 Ratts Ty…     79    15 none       grey, blue unknown           NA male  mascu…\n# ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;\n\n\n\n\n\n\n\n\n\n\n\nDica 3\n\n\n\n\n\nO resultado esperado é:\n\n\n\n\n\nuf\ntrimestre\nperc_desocupacao\n\n\n\n\nPernambuco\n2º trimestre 2024\n11.533052\n\n\nSanta Catarina\n2º trimestre 2024\n3.190735\n\n\n\n\n\n\n\n\n\nConsiderando o trimestre mais recente disponível, quais são os 5 estados com as maiores taxas de desocupação?\n\n\n\n\n\n\n\nDica 1\n\n\n\n\n\nA função head() retorna as primeiras linhas de um data frame. Podemos usar essa função para retornar as primeiras linhas de um data frame ordenado, usando o número de linhas desejadas como argumento:\n\n\n# A tibble: 5 × 14\n  name      height  mass hair_color skin_color eye_color birth_year sex   gender\n  &lt;chr&gt;      &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n1 Jabba De…    175  1358 &lt;NA&gt;       green-tan… orange         600   herm… mascu…\n2 Grievous     216   159 none       brown, wh… green, y…       NA   male  mascu…\n3 IG-88        200   140 none       metal      red             15   none  mascu…\n4 Darth Va…    202   136 none       white      yellow          41.9 male  mascu…\n5 Tarfful      234   136 brown      brown      blue            NA   male  mascu…\n# ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;\n\n\n\n\n\n\n\n\n\n\n\nDica 2\n\n\n\n\n\nO resultado esperado é:\n\n\n\n\n\nuf\ntrimestre\nperc_desocupacao\n\n\n\n\nPernambuco\n2º trimestre 2024\n11.533052\n\n\nBahia\n2º trimestre 2024\n11.098283\n\n\nDistrito Federal\n2º trimestre 2024\n9.742441\n\n\nRio de Janeiro\n2º trimestre 2024\n9.644113\n\n\nSergipe\n2º trimestre 2024\n9.131602\n\n\n\n\n\n\n\n\n\nUtilizando a função tidyr::pivot_wider(), como podemos criar uma tabela onde cada linha apresente dados de um estado, e cada trimestre esteja em uma coluna preenchida com os valores de percentual de desocupação?\n\nVeja o exemplo abaixo:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nuf\n1º trimestre 2012\n2º trimestre 2012\n3º trimestre 2012\n4º trimestre 2012\n1º trimestre 2013\n2º trimestre 2013\n3º trimestre 2013\n4º trimestre 2013\n1º trimestre 2014\n2º trimestre 2014\n3º trimestre 2014\n4º trimestre 2014\n1º trimestre 2015\n2º trimestre 2015\n3º trimestre 2015\n4º trimestre 2015\n1º trimestre 2016\n2º trimestre 2016\n3º trimestre 2016\n4º trimestre 2016\n1º trimestre 2017\n2º trimestre 2017\n3º trimestre 2017\n4º trimestre 2017\n1º trimestre 2018\n2º trimestre 2018\n3º trimestre 2018\n4º trimestre 2018\n1º trimestre 2019\n2º trimestre 2019\n3º trimestre 2019\n4º trimestre 2019\n1º trimestre 2020\n2º trimestre 2020\n3º trimestre 2020\n4º trimestre 2020\n1º trimestre 2021\n2º trimestre 2021\n3º trimestre 2021\n4º trimestre 2021\n1º trimestre 2022\n2º trimestre 2022\n3º trimestre 2022\n4º trimestre 2022\n1º trimestre 2023\n2º trimestre 2023\n3º trimestre 2023\n4º trimestre 2023\n1º trimestre 2024\n2º trimestre 2024\n\n\n\n\nAmapá\n12.578616\n14.603175\n14.285714\n12.158055\n11.671924\n14.461538\n10.942249\n9.253731\n11.242604\n9.970674\n10.632184\n9.565217\n9.821429\n10.294118\n11.849711\n13.068182\n14.619883\n16.000000\n15.142857\n16.991643\n18.836565\n17.451524\n16.986301\n19.073570\n21.621622\n21.739130\n18.324607\n19.893899\n20.365535\n17.164179\n16.879795\n15.776081\n17.268041\n11.370262\n15.297450\n15.902965\n15.217391\n16.230366\n17.487685\n17.422434\n14.175258\n11.401425\n10.843374\n13.225058\n12.206573\n12.442396\n12.471655\n14.187643\n10.854503\n8.878505\n\n\nBahia\n11.643438\n11.392588\n10.794883\n10.851468\n13.431301\n11.878128\n10.754579\n9.102656\n11.658363\n10.172635\n9.846110\n9.788841\n11.440914\n12.825124\n13.014077\n12.397155\n15.742825\n15.627210\n16.070406\n16.763745\n18.633186\n17.596811\n16.813520\n15.124606\n18.098115\n16.778621\n16.389953\n17.619454\n18.478722\n17.469710\n16.924167\n16.531512\n18.825025\n20.506122\n21.149536\n20.743877\n21.723411\n20.158451\n18.727222\n17.332961\n17.570987\n15.460020\n15.112994\n13.505788\n14.432990\n13.385035\n13.317328\n12.656785\n14.039584\n11.098283\n\n\nRio Grande do Norte\n11.605839\n11.355816\n11.469780\n11.602210\n12.159329\n10.901468\n10.143934\n9.785523\n11.846459\n11.768617\n10.646900\n10.483871\n11.597084\n11.776316\n12.805663\n12.328767\n14.494681\n13.588390\n14.248194\n14.700066\n16.446499\n15.841584\n13.879709\n12.408759\n15.085639\n13.280736\n12.993631\n13.630491\n14.060447\n12.662338\n13.609851\n12.972621\n15.591054\n15.300146\n17.864769\n15.593895\n15.491101\n16.263441\n14.713715\n12.630208\n14.140127\n12.012780\n10.482315\n9.960938\n12.145749\n10.263336\n10.086840\n8.289125\n9.626719\n9.085173\n\n\nAlagoas\n11.338448\n11.688312\n11.589404\n11.182623\n12.289157\n10.834671\n10.572337\n9.397590\n9.789644\n9.740260\n9.802371\n9.479409\n11.199365\n11.920000\n10.933759\n11.480602\n12.943962\n14.118565\n14.948859\n14.927769\n17.714286\n18.004866\n16.055420\n15.739949\n17.991266\n17.672791\n17.328825\n16.177703\n16.139767\n14.927769\n15.640194\n13.830679\n16.666667\n18.255396\n20.284698\n20.408163\n20.216886\n19.198791\n17.047971\n14.510364\n14.136126\n11.111111\n10.109890\n9.302326\n10.589113\n9.696521\n8.983800\n8.879185\n9.882870\n8.147080\n\n\nAmazonas\n11.103979\n9.055877\n9.508615\n8.348910\n10.357583\n10.287814\n8.405978\n7.715860\n8.333333\n8.441158\n6.816798\n7.891492\n9.512195\n9.685230\n10.279263\n9.282700\n12.923977\n13.442995\n13.759355\n15.049390\n18.024554\n15.607581\n16.248575\n13.592233\n13.991081\n14.334086\n13.245033\n14.558342\n16.052061\n14.043455\n13.533439\n13.038906\n14.622642\n16.619075\n16.856987\n15.708200\n17.602996\n15.792208\n13.428281\n13.104524\n13.001524\n10.420945\n9.346272\n10.015330\n10.509721\n9.669080\n9.555442\n8.808554\n9.792746\n7.909605\n\n\nSergipe\n10.454066\n10.950413\n10.627530\n9.667969\n11.694747\n11.374876\n10.147783\n8.791209\n9.542744\n9.809810\n9.171598\n8.994197\n8.733205\n9.152216\n8.771930\n10.187933\n11.534702\n12.925170\n14.424951\n15.204678\n16.314199\n14.215686\n13.833992\n13.601533\n17.198068\n16.992188\n17.647059\n15.117371\n15.522107\n15.349682\n14.781022\n14.933333\n15.789474\n20.377734\n20.808081\n18.276515\n20.695971\n19.316081\n17.059891\n14.460999\n14.955752\n12.750455\n12.129630\n11.952555\n11.825922\n10.331754\n9.796673\n11.204482\n9.982014\n9.131602\n\n\nParaíba\n10.017996\n9.410363\n8.609272\n9.168185\n9.593200\n9.004739\n8.578284\n8.490566\n9.352941\n8.888889\n9.340339\n8.172796\n9.335624\n9.315699\n10.502283\n9.716599\n10.251904\n11.018463\n13.048707\n12.154031\n13.413897\n11.565836\n10.883558\n10.227937\n11.892209\n11.071849\n10.976314\n11.239861\n11.223278\n12.183637\n11.359623\n12.153392\n13.875598\n13.216453\n17.305152\n15.727554\n16.149068\n15.448188\n14.464621\n13.008130\n14.328358\n12.214200\n10.867052\n10.301954\n11.117717\n10.394265\n9.273479\n9.584296\n9.868044\n8.579546\n\n\nPernambuco\n9.579618\n8.298539\n9.382903\n9.200410\n10.681877\n9.714286\n8.493221\n7.420495\n8.828045\n8.015171\n8.466934\n7.709581\n8.204489\n9.206040\n11.309100\n11.141038\n13.401559\n14.247312\n15.459298\n15.942029\n17.331022\n19.024271\n18.064673\n16.990641\n17.955997\n17.116477\n17.009700\n15.641932\n16.303584\n16.080283\n15.994305\n14.151165\n14.801357\n15.363206\n19.276781\n19.394394\n21.402748\n21.752701\n19.282297\n17.144890\n17.015276\n13.555347\n13.924344\n12.315271\n14.078238\n14.184397\n13.207996\n11.932892\n12.408587\n11.533052\n\n\nAcre\n9.265176\n9.118541\n7.692308\n8.132530\n10.909091\n9.451220\n8.841463\n7.055215\n8.181818\n9.638554\n7.164179\n6.287425\n8.985507\n8.849557\n9.037901\n7.848837\n8.771930\n11.212121\n12.074303\n11.818182\n15.915916\n15.072464\n13.793103\n12.429379\n14.763231\n13.675214\n13.370473\n13.461538\n18.207283\n13.687151\n13.202247\n13.881020\n13.823529\n14.454277\n17.365270\n15.921788\n18.032787\n16.452442\n13.756614\n13.385827\n14.854111\n11.904762\n10.000000\n9.887006\n9.667674\n9.422492\n6.176471\n6.567164\n8.797654\n7.303371\n\n\nDistrito Federal\n8.802817\n8.492569\n8.686588\n8.847737\n9.679618\n9.200806\n8.984375\n8.514852\n9.066667\n9.151194\n8.958195\n8.766015\n10.868125\n9.760956\n10.390470\n9.815547\n11.292428\n11.023622\n12.134689\n14.043887\n14.294593\n13.329161\n12.333966\n13.341724\n14.055728\n12.292563\n12.658228\n12.040939\n14.192009\n13.797170\n13.207547\n12.544803\n13.595707\n15.592783\n15.686274\n14.461538\n14.957781\n14.311815\n14.520870\n12.110727\n12.536106\n11.523328\n10.932297\n10.253583\n11.977716\n8.749299\n8.858603\n9.664805\n9.566185\n9.742441\n\n\nRoraima\n8.648649\n5.851064\n7.291667\n8.163265\n8.854167\n8.542714\n8.212560\n6.930693\n7.582938\n5.633803\n6.603774\n6.278027\n9.174312\n7.798165\n9.589041\n8.144796\n8.144796\n8.144796\n9.767442\n9.523810\n10.280374\n10.762332\n9.333333\n9.829060\n10.504202\n11.666667\n13.469388\n14.229249\n15.175097\n15.261044\n14.859438\n14.843750\n16.470588\n17.030568\n19.067797\n14.634146\n14.285714\n13.962264\n10.727969\n9.160305\n8.695652\n6.130268\n4.942966\n4.494382\n6.934307\n5.019305\n7.720588\n7.067138\n7.500000\n7.142857\n\n\nRio de Janeiro\n8.561516\n7.507360\n7.484587\n6.870698\n7.328750\n7.034805\n6.918932\n6.234476\n6.752609\n6.539980\n6.207744\n5.840227\n6.605052\n7.289018\n8.346381\n8.672119\n10.176196\n11.564139\n12.256301\n13.618220\n14.666512\n15.829894\n14.629988\n15.254428\n15.132623\n15.506329\n14.706214\n14.959659\n15.435943\n15.254048\n14.601622\n13.832149\n14.683516\n16.757764\n19.336130\n19.629187\n19.640519\n17.866787\n15.904261\n14.195758\n14.915445\n12.625698\n12.308205\n11.432706\n11.645910\n11.257539\n10.908078\n10.035328\n10.321730\n9.644113\n\n\nTocantins\n8.409786\n7.774390\n7.208589\n7.726597\n9.312977\n8.194234\n6.298003\n6.534954\n8.567208\n7.794118\n7.647908\n6.351551\n8.888889\n7.669617\n9.305761\n8.997050\n10.755814\n11.206897\n10.882353\n13.199426\n12.608696\n11.600587\n11.922504\n10.601719\n11.079546\n11.328671\n9.817672\n10.519126\n12.500000\n11.538462\n10.714286\n9.266943\n11.538462\n12.735166\n12.518629\n11.265647\n17.127800\n15.875170\n10.817942\n9.647979\n9.208820\n5.491699\n5.660377\n5.163728\n6.947891\n6.557377\n5.323194\n5.721393\n5.992509\n4.305043\n\n\nRondônia\n8.104575\n6.265985\n5.867347\n5.217391\n6.155779\n4.875000\n4.591837\n4.961832\n5.044136\n4.113111\n4.198473\n3.615960\n4.551201\n4.961832\n6.691450\n6.495098\n7.635468\n7.923169\n8.578431\n8.091787\n8.178439\n9.199522\n8.185053\n7.602339\n10.514019\n8.233890\n8.901734\n9.132420\n9.070034\n6.912442\n8.352144\n8.154020\n8.520179\n11.057108\n11.764706\n11.124260\n11.360947\n9.907834\n7.812500\n6.877729\n6.919643\n5.816555\n3.932584\n3.037383\n3.159174\n2.378121\n2.344666\n3.814064\n3.657143\n3.295454\n\n\nPará\n8.004744\n7.889546\n7.224443\n6.862745\n7.880959\n7.711512\n7.771876\n6.123017\n7.785088\n7.156567\n7.234507\n7.109525\n9.371643\n9.180942\n8.572936\n8.764104\n10.181055\n10.989888\n11.182623\n12.895570\n13.954741\n11.503719\n11.200415\n10.739979\n12.272367\n11.310920\n11.047420\n10.269012\n11.600626\n11.331076\n11.340996\n9.275960\n10.764068\n9.306261\n11.144091\n10.940349\n13.865323\n13.529564\n11.863137\n10.970258\n12.148619\n9.137179\n8.851043\n8.232503\n9.831666\n8.574205\n8.018411\n7.801755\n8.506525\n7.437425\n\n\nMaranhão\n7.938258\n9.203347\n7.745204\n7.596330\n9.513355\n9.437454\n7.487832\n5.592105\n6.437768\n7.196295\n6.810926\n7.165549\n9.030451\n8.950509\n8.587258\n8.388444\n11.099549\n12.030347\n12.080537\n13.215209\n15.154827\n14.748603\n14.533623\n13.412375\n15.777695\n14.472671\n13.986280\n14.296492\n16.557314\n14.786585\n14.382530\n12.406015\n16.301059\n16.456229\n17.302905\n14.588329\n17.377812\n17.503748\n15.003668\n13.357798\n12.882748\n10.770893\n9.671788\n8.353982\n9.917355\n8.837209\n6.729428\n7.152826\n8.445089\n7.291300\n\n\nMinas Gerais\n7.899160\n7.254977\n6.433647\n6.298300\n7.524059\n7.034509\n6.339235\n5.781954\n7.100422\n6.923517\n6.935808\n6.332730\n8.332543\n7.960292\n8.788270\n9.396097\n11.304187\n11.035995\n11.278539\n11.210680\n13.773001\n12.198646\n12.301195\n10.680741\n12.669643\n10.879589\n9.796099\n9.738061\n11.240275\n9.623321\n10.006096\n9.580316\n11.695906\n13.181688\n13.606789\n12.461752\n13.918845\n12.621183\n10.694714\n9.434794\n9.314155\n7.238395\n6.324457\n5.776431\n6.799823\n5.807365\n5.976096\n5.686206\n6.299282\n5.278592\n\n\nSão Paulo\n7.820856\n7.539857\n6.965958\n6.772246\n7.803669\n7.502153\n7.429088\n6.615699\n7.326612\n7.144396\n7.331264\n7.228196\n8.607079\n9.191906\n9.787791\n10.252569\n12.196327\n12.246484\n12.873347\n12.493411\n14.366919\n13.609349\n13.323027\n12.846258\n14.131718\n13.768002\n13.264152\n12.594183\n13.587798\n12.922038\n12.147813\n11.583234\n12.282685\n13.924865\n15.432916\n14.802442\n14.656620\n14.524827\n13.375498\n11.129460\n10.794840\n9.174872\n8.630588\n7.670323\n8.472944\n7.826522\n7.144776\n6.857903\n7.384321\n6.376171\n\n\nPiauí\n7.654494\n7.072829\n6.228374\n7.019959\n8.430432\n7.525424\n7.496561\n7.003367\n7.095926\n7.142857\n6.225166\n6.024096\n7.836571\n7.702436\n7.758054\n7.348029\n9.655638\n10.075914\n9.616725\n8.903134\n12.811388\n13.690062\n12.249135\n13.449477\n13.347609\n13.566434\n12.517194\n12.388775\n12.947658\n13.019768\n12.938882\n13.306720\n14.086471\n13.355317\n13.191812\n12.225476\n15.153681\n15.357887\n11.922812\n11.849315\n12.309820\n9.407666\n9.242529\n9.449929\n11.126962\n9.708029\n9.847434\n10.655148\n10.007047\n7.535211\n\n\nEspírito Santo\n7.651150\n7.243356\n6.887623\n6.711066\n7.810894\n7.707911\n7.207207\n5.940083\n6.398349\n6.605223\n5.861182\n6.197917\n7.094769\n6.775344\n8.311955\n9.267793\n11.156393\n11.652436\n12.914752\n13.787954\n14.679359\n13.465251\n13.136602\n11.756168\n12.729026\n12.238095\n11.346516\n10.377358\n12.349118\n10.990009\n10.707721\n10.436782\n11.276102\n12.611276\n14.189837\n13.434969\n13.113207\n11.583924\n9.939619\n9.830041\n9.206799\n7.985314\n7.255083\n7.249071\n6.943788\n6.343985\n5.563282\n5.238971\n5.912007\n4.502046\n\n\nMato Grosso do Sul\n7.547170\n7.063492\n4.983923\n5.003971\n4.811548\n4.937304\n4.432348\n4.541895\n4.746835\n3.897116\n4.098995\n3.852080\n6.298003\n6.365031\n6.334842\n6.015038\n7.847534\n7.043287\n7.714916\n8.194344\n9.905317\n8.966016\n8.040936\n7.415407\n8.528785\n7.703281\n7.332402\n7.023644\n9.573725\n8.418891\n7.708333\n6.703911\n7.894737\n11.680482\n11.813394\n9.527326\n10.587382\n9.822064\n7.621083\n6.411150\n6.490728\n5.197505\n5.112474\n3.346720\n4.856953\n4.089710\n4.008016\n4.002668\n4.983165\n3.815261\n\n\nCeará\n7.321619\n8.186667\n8.112493\n7.552870\n8.944641\n8.531693\n7.303974\n6.933826\n7.948583\n7.568688\n7.558442\n6.647168\n8.101604\n8.920559\n9.718603\n9.064559\n10.907156\n11.589404\n13.261923\n12.602041\n14.448381\n13.329954\n11.959799\n11.203117\n12.942613\n11.812577\n10.729821\n10.181818\n11.547792\n11.025703\n11.424474\n10.338301\n12.382332\n12.302138\n14.258029\n14.463453\n15.111232\n15.073145\n12.449393\n11.083060\n11.017618\n10.341366\n8.564295\n7.786070\n9.548255\n8.599132\n9.178864\n8.718331\n8.646713\n7.480214\n\n\nMato Grosso\n6.577267\n5.766793\n5.253165\n4.785894\n5.813234\n4.542664\n3.941783\n3.737745\n4.482132\n3.995157\n3.862402\n4.070474\n5.801435\n6.291591\n6.740196\n5.768063\n9.227986\n9.988249\n9.080048\n9.627880\n10.605153\n8.716418\n9.485252\n7.334109\n9.474292\n8.599089\n6.768190\n6.904232\n9.160724\n8.310847\n7.978437\n6.428571\n8.577633\n10.230467\n10.168539\n10.642896\n10.154525\n9.085873\n6.640841\n5.937328\n5.321508\n4.408602\n3.848238\n3.504929\n4.528096\n3.002183\n2.423263\n3.911477\n3.751285\n3.282828\n\n\nGoiás\n6.337372\n5.272783\n4.986150\n5.145482\n6.807229\n5.793145\n5.236232\n3.950913\n5.725420\n5.367734\n5.202483\n5.154339\n7.034442\n7.452340\n7.384883\n7.814302\n10.202915\n10.253521\n10.652921\n11.341943\n12.783852\n11.016949\n9.333693\n9.432934\n10.372992\n9.512129\n9.011707\n8.294931\n10.850440\n10.600425\n10.943592\n10.557873\n11.527224\n12.987753\n13.527252\n12.737430\n13.862201\n12.418122\n10.013351\n8.755274\n8.860760\n6.801008\n6.123973\n6.637733\n6.710229\n6.158065\n5.910107\n5.593719\n6.082904\n5.167769\n\n\nParaná\n5.638894\n5.347972\n4.669604\n4.473406\n4.941300\n4.597502\n4.246836\n3.784722\n4.186935\n4.247971\n4.163799\n3.751527\n5.385152\n6.226285\n6.229565\n5.874340\n8.162580\n8.230730\n8.579681\n8.158116\n10.386352\n8.958716\n8.498156\n8.252912\n9.660792\n9.089393\n8.726610\n7.889969\n9.019351\n9.124980\n9.057032\n7.350539\n8.003287\n9.618270\n10.545206\n10.066225\n9.427109\n9.036861\n7.971014\n6.961114\n6.851972\n6.067489\n5.255591\n5.130687\n5.391276\n4.863025\n4.621849\n4.704753\n4.821570\n4.439141\n\n\nRio Grande do Sul\n5.342847\n5.077453\n4.655590\n4.386566\n5.411804\n4.628378\n4.905408\n4.726119\n5.438979\n5.033784\n5.318251\n4.604486\n5.807201\n6.056056\n6.990324\n6.679764\n7.584407\n8.913649\n8.382546\n8.423291\n9.268293\n8.571896\n8.172920\n8.080808\n8.586526\n8.440153\n8.272546\n7.482437\n8.046723\n8.267780\n8.934321\n7.252152\n8.536389\n9.679642\n10.523551\n8.647450\n9.552743\n8.849411\n8.412751\n8.099789\n7.462927\n6.261123\n6.005430\n4.631410\n5.381667\n5.262319\n5.361192\n5.180934\n5.813768\n5.891796\n\n\nSanta Catarina\n4.142357\n3.746068\n3.195435\n2.687250\n3.676261\n3.476774\n2.838934\n2.568543\n3.111619\n2.826149\n2.946128\n2.704941\n3.970223\n3.977118\n4.438998\n4.251286\n6.130165\n6.751974\n6.397398\n6.233136\n7.922351\n7.540725\n6.786271\n6.426735\n6.561612\n6.542056\n6.225881\n6.346788\n7.270408\n6.103167\n5.787863\n5.423048\n5.723819\n7.212169\n6.686046\n5.382586\n6.352135\n5.852156\n5.275229\n4.314021\n4.536341\n3.898636\n3.757931\n3.231292\n3.834735\n3.499755\n3.558460\n3.195803\n3.828775\n3.190735\n\n\n\n\n\n\n\n\n\n\n\nDica 1\n\n\n\n\n\nPara usar a função pivot_wider(), precisamos indicar os argumentos names_from e values_from.\nO argumento names_from é a coluna que queremos usar para nomear as novas colunas. No caso, queremos que cada opção de trimestre seja uma nova coluna.\nO argumento values_from é a coluna que queremos usar para preencher os valores das novas colunas. No caso, queremos preencher as novas colunas com a taxa de desocupação.",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Transformando dados"
    ]
  },
  {
    "objectID": "05_transformacao.html#sugestões-de-materiais",
    "href": "05_transformacao.html#sugestões-de-materiais",
    "title": "Transformando dados",
    "section": "Sugestões de materiais",
    "text": "Sugestões de materiais\n\nLivro R para Ciência de Dados 2ed:\n\nTransformação de dados\nOrganização de dados",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Transformando dados"
    ]
  },
  {
    "objectID": "05_transformacao.html#footnotes",
    "href": "05_transformacao.html#footnotes",
    "title": "Transformando dados",
    "section": "Notas de rodapé",
    "text": "Notas de rodapé\n\n\nÉ interessante conhecer mais sobre a base de dados que estamos utilizando. O IBGE apresenta alguns conteúdos interessantes, como a página com informações sobre a PNAD Contínua Trimestral, e também a página sobre desemprego que nos ajuda a entender as variáveis presentes.↩︎",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Transformando dados"
    ]
  },
  {
    "objectID": "00_erros_frequentes.html",
    "href": "00_erros_frequentes.html",
    "title": "Erros e warnings frequentes",
    "section": "",
    "text": "A lista a seguir apresenta alguns erros e warnings que apareceram na aula (seja por dúvida presencial, seja no chat do Google Meet).",
    "crumbs": [
      "Anexos",
      "Erros e *warnings* frequentes"
    ]
  },
  {
    "objectID": "00_erros_frequentes.html#instalação",
    "href": "00_erros_frequentes.html#instalação",
    "title": "Erros e warnings frequentes",
    "section": "Instalação",
    "text": "Instalação\n\nRTools\nPara pessoas que utilizam o sistema operacional Windows, a aviso (warning) abaixo pode aparecer em alguns contextos:\nWARNING: Rtools is required to build R packages but is not currently installed.\nPlease download and install the appropriate version of Rtools before proceeding:\n\nhttps://cran.rstudio.com/bin/windows/Rtools/\nInstalando pacote em ‘C:/Users/.../AppData/Local/R/win-library/4.4’\n(como ‘lib’ não foi especificado)\nPara que esse aviso não apareça mais, você pode instalar o Rtools no seu computador. O RTools é um software (não é um pacote do R), portanto você precisa fazer o download da versão compatível com a versão do R que você está utilizando, e instalar no seu computador.\nPara fazer o download, acesse o link https://cran.rstudio.com/bin/windows/Rtools/, e escolha a versão do RTools compatível com a versão do R que você está utilizando:\n\n\n\nCaptura de tela: página de download do RTools\n\n\nPara consultar a versão do R que você está utilizando, você pode rodar o seguinte comando no console do R:\n\nR.version.string\n\n[1] \"R version 4.4.3 (2025-02-28)\"",
    "crumbs": [
      "Anexos",
      "Erros e *warnings* frequentes"
    ]
  },
  {
    "objectID": "00_erros_frequentes.html#conceitos-básicos",
    "href": "00_erros_frequentes.html#conceitos-básicos",
    "title": "Erros e warnings frequentes",
    "section": "Conceitos básicos",
    "text": "Conceitos básicos\n\nInstalando pacotes\nO erro a seguir ocorre quando o usuário tenta instalar um pacote sem aspas. O correto é colocar o nome do pacote entre aspas.\n\n# O código abaixo gerará um erro:\ninstall.packages(janitor)\n\nError in eval(call, envir = parent.frame()): object 'janitor' not found\n\n\nA função deve receber o nome do pacote entre aspas, pois é um texto:\n\n# O código abaixo funcionará:\ninstall.packages(\"janitor\")\n\n\n\nPacote não encontrado\nO erro a seguir ocorre quando tentamos carregar um pacote que não foi instalado anteriormente. Para resolver, precisamos instalar o pacote.\n\n# O código abaixo gerará um erro:\n1library(quarto)\n\n\n1\n\nNome do pacote\n\n\n\n\nPara que consiga acessar, é necessário instalar o pacote, e depois carregá-lo:\n\ninstall.packages(\"quarto\")\nlibrary(quarto)\n\n\n\nObjeto não encontrado\nO erro a seguir ocorre quando tentamos acessar um objeto que não consta no painel Environment. Existe alguns motivos para isso acontecer:\n\nO objeto não foi criado (provavelmente precisa executar o código que cria o objeto);\nO objeto existe no painel Environment, mas estamos tentando acessá-lo com o nome incorreto.\n\nNo exemplo a seguir, o código gerará um erro pois o objeto que estamos tentando acessar ainda não foi criado:\n\n# O código abaixo gerará um erro:\nlength(estados_sudeste)\n\nError: object 'estados_sudeste' not found\n\n\nApós criar o objeto, conseguimos utilizá-lo:\n\nestados_sudeste &lt;- c(\"SP\", \"RJ\", \"MG\", \"ES\")\nlength(estados_sudeste)\n\n[1] 4\n\n\n\n\nFunção não encontrada\nO erro could not find function ocorre quando tentamos acessar uma função que não está sendo encontrada. Isso pode acontecer por alguns motivos:\n\nA função faz parte de um pacote que não foi carregado (precisamos carregar o pacote antes);\nA função foi escrita de forma incorreta (por exemplo, com letras maiúsculas ou minúsculas incorretas).\n\n\nPacote não carregado\nNo exemplo a seguir, queremos limpar o nome das colunas do data frame iris:\n\nhead(iris)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n\n\nO código a seguir gerará um erro pois a função clean_names() faz parte do pacote janitor, mas o pacote não foi carregado:\n\nclean_names(iris)\n\nError in clean_names(iris): could not find function \"clean_names\"\n\n\nPara corrigir, precisamos carregar o pacote janitor:\n\nlibrary(janitor)\niris_nome_limpo &lt;- clean_names(iris)\nhead(iris_nome_limpo)\n\n  sepal_length sepal_width petal_length petal_width species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n\n\n\n\nErro de digitação\nNo exemplo a seguir, o código gerará um erro pois a função length() está escrito de forma incorreta:\n\n# O código abaixo gerará um erro:\nlenght(letters)\n\nError in lenght(letters): could not find function \"lenght\"\n\n\nPara corrigir, precisamos escrever a função corretamente:\n\nlength(letters)\n\n[1] 26",
    "crumbs": [
      "Anexos",
      "Erros e *warnings* frequentes"
    ]
  },
  {
    "objectID": "00_erros_frequentes.html#importação",
    "href": "00_erros_frequentes.html#importação",
    "title": "Erros e warnings frequentes",
    "section": "Importação",
    "text": "Importação\n\nArquivo não encontrado\nAo importar um arquivo, é importante que o caminho esteja correto. Caso contrário, o código gerará um erro.\n\nlibrary(tidyverse)\n\n\n# O caminho abaixo está incorreto, esse arquivo não existe\n# no nosso projeto:\nsidra_4092 &lt;- read_csv(\"SIDRAR.csv\")\n\nError: 'SIDRAR.csv' does not exist in current working directory ('/home/runner/work/curso_r_intro_202409/curso_r_intro_202409').\n\n\nCorrigindo o arquivo, o código funcionará:\n\nsidra_4092 &lt;- read_csv(\"dados/sidrar_4092_bruto.csv\")\nglimpse(sidra_4092)\n\nRows: 27,000\nColumns: 13\n$ `Nível Territorial (Código)`                                              &lt;dbl&gt; …\n$ `Nível Territorial`                                                       &lt;chr&gt; …\n$ `Unidade de Medida (Código)`                                              &lt;dbl&gt; …\n$ `Unidade de Medida`                                                       &lt;chr&gt; …\n$ Valor                                                                     &lt;dbl&gt; …\n$ `Unidade da Federação (Código)`                                           &lt;dbl&gt; …\n$ `Unidade da Federação`                                                    &lt;chr&gt; …\n$ `Trimestre (Código)`                                                      &lt;dbl&gt; …\n$ Trimestre                                                                 &lt;chr&gt; …\n$ `Variável (Código)`                                                       &lt;dbl&gt; …\n$ Variável                                                                  &lt;chr&gt; …\n$ `Condição em relação à força de trabalho e condição de ocupação (Código)` &lt;dbl&gt; …\n$ `Condição em relação à força de trabalho e condição de ocupação`          &lt;chr&gt; …",
    "crumbs": [
      "Anexos",
      "Erros e *warnings* frequentes"
    ]
  },
  {
    "objectID": "00_erros_frequentes.html#arquivo-corrompido",
    "href": "00_erros_frequentes.html#arquivo-corrompido",
    "title": "Erros e warnings frequentes",
    "section": "Arquivo corrompido",
    "text": "Arquivo corrompido\nO erro a seguir ocorre quando tentamos importar um arquivo que está corrompido. Nesse caso, precisamos baixar o arquivo novamente.\n\nlibrary(readxl)\nexcel_sheets(\"dados/sidrar_4092_bruto.xlsx\")\n# Error in readBin(con, raw(), n = size) : \n#   error reading from the connection",
    "crumbs": [
      "Anexos",
      "Erros e *warnings* frequentes"
    ]
  },
  {
    "objectID": "00_intro_etapas_analise.html",
    "href": "00_intro_etapas_analise.html",
    "title": "Introdução",
    "section": "",
    "text": "Na seção “Conceitos básicos”, abordamos alguns conceitos importantes para começar a programar em R.\nNesta seção, cada aula apresentará uma etapa comum quando realizamos uma análise de dados.\nA figura abaixo ilustra algumas etapas comuns em uma análise de dados, conforme apresentado no livro “R para Ciência de Dados”:\n\n\n\nProcesso de ciência de dados, por Wickham, Çetinkaya-Rundel e Grolemund\n\n\nO principal pacote que utilizaremos é o tidyverse. O tidyverse é uma coleção de pacotes em R desenvolvidos com o objetivo de facilitar etapas de análise de dados. Os pacotes do tidyverse compartilham uma filosofia comum e são projetados para funcionar bem juntos.\n\n\n\n\n\n\n\nPacotes principais (core packages) do tidyverse. Fonte: Site do tidyverse.\n\n\nPortanto, é importante checar se o tidyverse está instalado e carregá-lo no início de cada aula:\n\nlibrary(\"tidyverse\")\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nO livro “R para Ciência de Dados” foi escrito por pessoas que trabalham (ou trabalharam) no desenvolvimento do tidyverse, e é uma excelente referência para estudar mais. Para cada aula, indicaremos seções do livro que podem ser úteis para aprofundar o conteúdo.",
    "crumbs": [
      "Etapas em uma análise de dados",
      "Introdução"
    ]
  },
  {
    "objectID": "14_infra_ipea.html",
    "href": "14_infra_ipea.html",
    "title": "Infraestrutura de pesquisa do Ipea",
    "section": "",
    "text": "Servidores estatísticos\nNo Ipea, existe um conjunto de servidores (máquinas virtuais) de alta capacidade, com softwares de análise e processamento de dados e que estão disponíveis para todos os nossos pesquisadores e colaboradores (e.g. bolsistas). Estes servidores (que chamamos de “servidores estatísticos”) são parte fundamental da ciência de dados do Ipea. Isso porque nós temos muitos pesquisadores e colaboradores trabalhando simultaneamente em projetos por vezes muito complexos. Além disso, é muito comum nos nossos trabalhos a gente ter que lidar com grandes volumes de dados (vários anos de RAIS, Cadastro Único, etc.), o que seria é inviável ou muito demorado em computadores comuns devido a limitação de memória RAM, capacidade de processamento, instabilidade da conexão de rede, etc.\nA capacidade destes servidores (em Out/2024) é apresentada na figura abaixo:\n\n\n\n\n\n\n\n\n\n\n\nNota\n\n\n\nComo ter acesso aos servidores estatísticos?\n\nEntrar na rede do Ipea (PC ou via Conexao VPN)\nAbrir um e-pedidos de TI solicitando permissão de acesso a um ou mais dos servicodes estatísticos acima.\nUma vez que você recebeu acesso, você pode se conectar ao servidor abrindo no seu computador a Área de Trabalho Remota do Windows.\n\n\n\nOs recursos computacionais nestes servidores, no entanto, não são ilimitados. Para evitarmos uma situação de tragédia dos comuns, que leve ao esgotamento dos recursos compartilhados sugerimos a adoção de algumas boas práticas na utilização dos servidores:\n\n\n\n\n\n\nImportante\n\n\n\n\nUsar a memória RAM com parcimônia;\nPrototipar todo o código do projeto com amostras de dados e não com a base inteira;\nProcurar sempre o servidor menos congestionado (Task Manager);\nUtilizar boas práticas de código além de pacotes eficientes, como {arrow} e {duckdb} para leitura e manipulação de dados, e {fixest} para modelos econométricos.\n\n\n\nVeja mais informações na nossa cheatsheet de boas práticas.\n\n\nBases de dados\nO Ipea disponibiliza diversas bases de microdados estatísticos e registros administrativos (identificados ou não), como:\n\nPNADc\nCenso escolar\nCAGED Identificado\nRAIS Identificada\nCadatro Único\netc.\n\nA lista completa das bases de dados disponíveis pode ser consultada na intranet no catálogo de bases de dados.\nAs bases de dados do Ipea são armazenadas em difentes formatos, em alguns diretórios da rede (tabela abaixo) ou em bancos de dados relacionais (SQL Server).\n\n\n\n\n\nAtualmente, a maior parte dos dados estão em diretórios na rede do Ipea, em especial no Storage6. No Storage6, essas bases estão organizadas a partir de duas pastas e suas subpastas:\n\n\"documentação\": Os arquivos nesta pasta e subpastas são totalmente acessíveis, mesmo a documentação das bases restritas.\n\"dados\": Suas subpastas incluem tanto os dados públicos quanto restritos. No caso dos dados restritos, o acesso a leitura dos dados requer autorização (detalhes abaixo):\n\n\n\n\n\n\nflowchart TD\n    A[STORAGE6] --&gt; B(Bases)\n    B --&gt; C(Documentação)\n    B --&gt; E(Dados)\n    C --&gt; F(Público)\n    C --&gt; G(Restrito)\n    E --&gt; H(Público)\n    E --&gt; id1(Restrito)\n    style id1 fill:#FF0000\n\n\n\n\n\n\n\n\n\n\n\n\nNota\n\n\n\nComo ter acesso a bases de dados restritas?\n\nAntes de solicitar permissão para uma base de dados, leia a documentação da base;\nA concessão de acesso a qualquer base de dados restrita é sempre por um período definido e deve ser motivado, no âmbito de um projeto de pesquisa específico;\nO pedido de acesso é feito à Coordenação de Gestão de Dados (COGD), por meio de processo que tramita no SEI e envolve a assinatura de termos de compromisso sobre sigilo do dado;\nAlgumas bases de dados sigilosas estão disponíveis apenas em ambientes de sigilo (sala ou servidor de sigilo). O acesso a esses ambientes também deve ser solicitado à COGD.\n\nVeja mais detalhes na nossa cheatsheet sobre as bases de dados.",
    "crumbs": [
      "Data Lake do Ipea",
      "Infraestrutura de pesquisa do Ipea"
    ]
  }
]