[
  {
    "objectID": "02_conceitos_basicos_r.html",
    "href": "02_conceitos_basicos_r.html",
    "title": "Conceitos básicos",
    "section": "",
    "text": "Aviso\n\n\n\nPágina em construção! Em breve.",
    "crumbs": [
      "Materiais",
      "Conceitos básicos"
    ]
  },
  {
    "objectID": "00_instrucoes_pre_curso.html",
    "href": "00_instrucoes_pre_curso.html",
    "title": "Instalação",
    "section": "",
    "text": "Importante\n\n\n\nRecomendamos que todas as pessoas participantes instalem o R e o RStudio antes do início do curso.\nCaso tenha alguma dificuldade, entre em contato com a equipe do curso o quanto antes.",
    "crumbs": [
      "Pré-curso",
      "Instalação"
    ]
  },
  {
    "objectID": "00_instrucoes_pre_curso.html#instalação-do-r-e-rstudio",
    "href": "00_instrucoes_pre_curso.html#instalação-do-r-e-rstudio",
    "title": "Instalação",
    "section": "Instalação do R e RStudio",
    "text": "Instalação do R e RStudio\nPara a utilização do R, é necessário instalar o software R e o RStudio. O R é a linguagem de programação e o RStudio é um ambiente de desenvolvimento integrado (IDE - Integrated Development Environment) que facilita a utilização do R.\n\n\n\n\n\n\nAviso\n\n\n\nAtenção: O R deve ser instalado antes do RStudio.\n\n\nInstalação do R\nPara instalar o R, acesse o site CRAN e escolha o link de download de acordo com o seu sistema operacional:\n\n\nCaptura de tela do site CRAN\n\nInstale o R utilizando o instalador baixado.\nInstalação do RStudio\nApós instalar o R, acesse o site RStudio Desktop e escolha o link de download de acordo com o seu sistema operacional:\n\n\nCaptura de tela do site RStudio Desktop\n\nInstale o RStudio utilizando o instalador baixado.\nVerificação da instalação\nPara verificar se a instalação foi realizada com sucesso, abra o RStudio. Para isso, procure o ícone do RStudio no menu de programas do seu sistema operacional.\nA tela inicial do RStudio é semelhante à imagem abaixo:\n\n\nCaptura de tela da IDE RStudio\n\nVerificação da versão do R\nO R possui versões, e é importante verificar se a versão instalada é recente.\n\n\n\n\n\n\nAviso\n\n\n\nRecomendamos que utilizem o R na versão 4.1.0 ou superior.\nCaso a versão do R seja inferior a 4.1.0, recomendamos que atualizem o R para a versão mais recente.\nVersões mais antigas podem ter incompatibilidades com alguns códigos que utilizaremos durante o curso.\n\n\nExiste mais de uma forma para verificar a versão do R. A forma mais simples é verificando o texto que aparece no painel “Console” ao abrir o RStudio:\n\n\nCaptura de tela da IDE RStudio\n\nOutra forma é utilizando o comando R.version.string. Para isso, execute o seguinte comando no console do RStudio. Por exemplo, a versão do R utilizada para a elaboração deste material é 4.4.1:\nO comando R.version retorna um objeto com diversas informações sobre a versão do R, o sistema operacional utilizado, etc:\n\nR.version\n\n               _                           \nplatform       aarch64-apple-darwin20      \narch           aarch64                     \nos             darwin20                    \nsystem         aarch64, darwin20           \nstatus                                     \nmajor          4                           \nminor          4.1                         \nyear           2024                        \nmonth          06                          \nday            14                          \nsvn rev        86737                       \nlanguage       R                           \nversion.string R version 4.4.1 (2024-06-14)\nnickname       Race for Your Life",
    "crumbs": [
      "Pré-curso",
      "Instalação"
    ]
  },
  {
    "objectID": "10_pesquisa_ipea.html",
    "href": "10_pesquisa_ipea.html",
    "title": "Infraestrutura de pesquisa do Ipea",
    "section": "",
    "text": "Aviso\n\n\n\nPágina em construção! Em breve.",
    "crumbs": [
      "Materiais",
      "Infraestrutura de pesquisa do Ipea"
    ]
  },
  {
    "objectID": "04_conhecendo.html",
    "href": "04_conhecendo.html",
    "title": "Conhecendo a base de dados",
    "section": "",
    "text": "Conceitos prévios importantes:\n\nComo importar bases de dados?\nTipos de variáveis\nValores faltantes\nNesta seção, vamos conhecer algumas funções que nos ajudarão a conhecer um pouco mais sobre a base de dados que estamos trabalhando.\nEssa etapa é importante para:\nVamos começar importando a base de dados que utilizaremos:\nlibrary(tidyverse)\ndados &lt;- read_csv2(\"dados/sidrar_4092_bruto_2.csv\")",
    "crumbs": [
      "Materiais",
      "Conhecendo a base de dados"
    ]
  },
  {
    "objectID": "04_conhecendo.html#estrutura-da-base-de-dados",
    "href": "04_conhecendo.html#estrutura-da-base-de-dados",
    "title": "Conhecendo a base de dados",
    "section": "Estrutura da base de dados",
    "text": "Estrutura da base de dados\nVamos começar conhecendo a estrutura da base de dados. Para isso, existem algumas funções para saber o número de colunas e linhas, os nomes das colunas, entre outras informações. Algumas delas apresentam as mesmas informações, mas de formas diferentes.\n\n# Número de colunas\nncol(dados)\n\n[1] 13\n\n# Número de linhas\nnrow(dados)\n\n[1] 27000\n\n# Número de linhas e colunas\ndim(dados)\n\n[1] 27000    13\n\n# Nomes das colunas\nnames(dados)\n\n [1] \"Nível Territorial (Código)\"                                             \n [2] \"Nível Territorial\"                                                      \n [3] \"Unidade de Medida (Código)\"                                             \n [4] \"Unidade de Medida\"                                                      \n [5] \"Valor\"                                                                  \n [6] \"Unidade da Federação (Código)\"                                          \n [7] \"Unidade da Federação\"                                                   \n [8] \"Trimestre (Código)\"                                                     \n [9] \"Trimestre\"                                                              \n[10] \"Variável (Código)\"                                                      \n[11] \"Variável\"                                                               \n[12] \"Condição em relação à força de trabalho e condição de ocupação (Código)\"\n[13] \"Condição em relação à força de trabalho e condição de ocupação\"         \n\n\nA função glimpse() do pacote dplyr apresenta informações como: número de linhas, número de colunas, nome e tipo de cada coluna, e os primeiros valores de cada coluna. Porém o texto resultante dependerá da largura do Console:\n\nglimpse(dados)\n\n\n\nCaptura de tela: Resultado da função glimpse()\n\nView\nUma outra função que é interessante é a View(). Ela nos permite visualizar a base de dados em uma nova janela, em formato de tabela. Porém, é importante tomar cuidado ao usá-la com bases de dados grandes, pois pode travar o RStudio dependendo.\nOutra forma de acessar o View é clicando na linha do objeto no painel Environment do RStudio:\n\n\nCaptura de tela: Onde clicamos para abrir o View\n\n\nView(dados)\n\n\n\nGravação da tela - Usando o View",
    "crumbs": [
      "Materiais",
      "Conhecendo a base de dados"
    ]
  },
  {
    "objectID": "04_conhecendo.html#sumário-das-variáveis",
    "href": "04_conhecendo.html#sumário-das-variáveis",
    "title": "Conhecendo a base de dados",
    "section": "Sumário das variáveis",
    "text": "Sumário das variáveis\nEm funções apresentadas anteriormente, como a names(), já conseguimos ter uma ideia de quais são as variáveis da base de dados. Mas é interessante ter mais informações, como: tipo de variável, quantidade de valores faltantes, entre outros.\nNessa etapa, conheceremos algumas funções que nos ajudarão a ter essas informações. Algumas apresentam as mesmas informações, mas de formas diferentes. Portanto, é interessante conhecer algumas delas, e escolher qual é a que melhor atende às nossas necessidades.\n\n\n\n\n\n\nAviso\n\n\n\nCuidado: as funções apresentadas a seguir calculam algumas estatísticas descritivas (como a média, mediana, desvio padrão, valor mínimo, valor máximo, entre outras) em variáveis numéricas. Porém, ainda não “arrumamos” a base de dados (faremos isso no capítulo Transformando dados), e os dados ainda não estão adequados para esses cálculos.\nAlguns exemplos:\n\nVárias colunas numéricas representam o código de uma categoria, e não faz sentido calcular a média desses códigos.\nA variável valor está relacionada com a variável unidade_de_medida. Neste momento, a tabela apresenta valores com diferentes unidades de medida, e não faz sentido calcular a média desses valores.\n\n\nunique(dados$`Unidade de Medida`)\n\n[1] \"Mil pessoas\" \"%\"          \n\n\nFalaremos sobre o cálculo de estatísticas descritivas no capítulo Analisando dados.\n\n\nsummary()\nA função summary() é uma função do R base (ou seja, não precisamos carregar nenhum pacote para usá-la), e ela nos dá um sumário das variáveis da base de dados.\n\nsummary(dados)\n\n Nível Territorial (Código) Nível Territorial  Unidade de Medida (Código)\n Min.   :3                  Length:27000       Min.   :   2.0            \n 1st Qu.:3                  Class :character   1st Qu.:   2.0            \n Median :3                  Mode  :character   Median :   2.0            \n Mean   :3                                     Mean   : 394.5            \n 3rd Qu.:3                                     3rd Qu.: 394.5            \n Max.   :3                                     Max.   :1572.0            \n                                                                         \n Unidade de Medida      Valor         Unidade da Federação (Código)\n Length:27000       Min.   :    0.3   Min.   :11.00                \n Class :character   1st Qu.:    1.5   1st Qu.:17.00                \n Mode  :character   Median :    7.8   Median :27.00                \n                    Mean   :  862.0   Mean   :29.11                \n                    3rd Qu.:  105.8   3rd Qu.:41.00                \n                    Max.   :39480.0   Max.   :53.00                \n                    NA's   :1350                                   \n Unidade da Federação Trimestre (Código)  Trimestre         Variável (Código)\n Length:27000         Min.   :201201     Length:27000       Min.   :1641     \n Class :character     1st Qu.:201501     Class :character   1st Qu.:3476     \n Mode  :character     Median :201802     Mode  :character   Median :4096     \n                      Mean   :201778                        Mean   :3484     \n                      3rd Qu.:202102                        3rd Qu.:4104     \n                      Max.   :202402                        Max.   :4105     \n                                                                             \n   Variável        \n Length:27000      \n Class :character  \n Mode  :character  \n                   \n                   \n                   \n                   \n Condição em relação à força de trabalho e condição de ocupação (Código)\n Min.   :32385                                                          \n 1st Qu.:32386                                                          \n Median :32387                                                          \n Mean   :32410                                                          \n 3rd Qu.:32446                                                          \n Max.   :32447                                                          \n                                                                        \n Condição em relação à força de trabalho e condição de ocupação\n Length:27000                                                  \n Class :character                                              \n Mode  :character                                              \n                                                               \n                                                               \n                                                               \n                                                               \n\n\nskimr::skim()\nO pacote skimr tem uma função chamada skim() que nos dá um sumário das variáveis da base de dados.\nÉ interesante salvar o resultado da função em um objeto, para que possamos acessar as informações posteriormente, em formato de tabela.\n\nlibrary(skimr)\nskim_dados &lt;- skim(dados)\n\nO resultado da função skim() é dividido em duas partes:\n\nData summary: informações gerais sobre a base de dados, como: nome do objeto, número de linhas, número de colunas, quantas colunas temos em cada tipo, e se a base está agrupada por alguma variável1.\n\nVariable type: para cada tipo de variável presente na base de dados, temos informações como:\n\n\nskim_variable: nome da variável.\n\nn_missing: número de valores faltantes.\n\ncomplete_rate: proporção de valores não faltantes (está relacionada com a n_missing).\nOutras colunas específicas segundo o tipo de variável.\n\n\n\nA seguir, estão as informações que a função skim() retorna para os tipos de variáveis mais frequentes:\n\n\ncharacter (dados de texto):\n\n\nmin: número mínimo de caracteres.\n\nmax: número máximo de caracteres.\n\nempty: número de linhas contendo valores vazios (um valor vazio é um valor que contém apenas \"\").\n\nn_unique: número de valores únicos.\n\nwhitespace: número de linhas contendo apenas espaços em branco.\n\n\n\nnumeric (dados numéricos):\n\n\nmean: média.\n\nsd: desvio padrão.\n\np0: valor mínimo.\n\np25: primeiro quartil.\n\np50: mediana.\n\np75: terceiro quartil.\n\np100: valor máximo.\n\nhist: histograma dos valores.\n\n\n\ndate (datas):\n\n\nmin: data mínima.\n\nmax: data máxima.\n\nmedian: data mediana.\n\nn_unique: número de datas únicas.\n\n\n\nfactor (dados categóricos):\n\n\nordered: os níveis do fator estão ordenados?\n\nn_unique: número de valores únicos do fator.\n\ntop_counts: os valores mais frequentes do fator.\n\n\n\nlogical (dados booleanos):\n\n\nmean: média dos valores, considerando que TRUE é 1 e FALSE é 0.\n\ncount: contagem dos valores TRUE e FALSE.\n\n\n\nA seguir, podemos ver o resultado da função skim():\n\nskim_dados\n\n\nData summary\n\n\nName\ndados\n\n\nNumber of rows\n27000\n\n\nNumber of columns\n13\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n6\n\n\nnumeric\n7\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\nNível Territorial\n0\n1\n20\n20\n0\n1\n0\n\n\nUnidade de Medida\n0\n1\n1\n11\n0\n2\n0\n\n\nUnidade da Federação\n0\n1\n4\n19\n0\n27\n0\n\n\nTrimestre\n0\n1\n17\n17\n0\n50\n0\n\n\nVariável\n0\n1\n35\n89\n0\n4\n0\n\n\nCondição em relação à força de trabalho e condição de ocupação\n0\n1\n5\n30\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\nNível Territorial (Código)\n0\n1.00\n3.00\n0.00\n3.0\n3.0\n3.0\n3.00\n3\n▁▁▇▁▁\n\n\nUnidade de Medida (Código)\n0\n1.00\n394.50\n679.84\n2.0\n2.0\n2.0\n394.50\n1572\n▇▁▁▁▂\n\n\nValor\n1350\n0.95\n862.03\n2896.64\n0.3\n1.5\n7.8\n105.75\n39480\n▇▁▁▁▁\n\n\nUnidade da Federação (Código)\n0\n1.00\n29.11\n12.78\n11.0\n17.0\n27.0\n41.00\n53\n▇▇▇▃▅\n\n\nTrimestre (Código)\n0\n1.00\n201778.46\n361.36\n201201.0\n201501.0\n201801.5\n202102.00\n202402\n▇▅▇▅▇\n\n\nVariável (Código)\n0\n1.00\n3484.25\n1064.24\n1641.0\n3475.5\n4095.5\n4104.25\n4105\n▂▁▁▁▇\n\n\nCondição em relação à força de trabalho e condição de ocupação (Código)\n0\n1.00\n32410.20\n29.65\n32385.0\n32386.0\n32387.0\n32446.00\n32447\n▇▁▁▁▅",
    "crumbs": [
      "Materiais",
      "Conhecendo a base de dados"
    ]
  },
  {
    "objectID": "04_conhecendo.html#valores-faltantes-na",
    "href": "04_conhecendo.html#valores-faltantes-na",
    "title": "Conhecendo a base de dados",
    "section": "Valores faltantes (NA)",
    "text": "Valores faltantes (NA)\nA presença de valores faltantes é algo comum em bases de dados. Eles podem ocorrer por diversos motivos, como: não temos a informação, erros de digitação, entre outros.\nÉ importante identificar onde estão esses valores, para que possamos nos atentar em análises futuras.\nExistem algumas funções que nos ajudam a identificar a presença de valores faltantes na base de dados. O pacote naniar apresenta funções úteis para isso: a função gg_miss_var() cria uma visualição apresentando o nome das variáveis da base de dados, assim como a quantidade de valores faltantes em cada uma delas.\n\nlibrary(naniar)\n# Valores absolutos\ngg_miss_var(dados)\n\n\n\n\n\n\n# Valores relativos\ngg_miss_var(dados, show_pct = TRUE)",
    "crumbs": [
      "Materiais",
      "Conhecendo a base de dados"
    ]
  },
  {
    "objectID": "04_conhecendo.html#section",
    "href": "04_conhecendo.html#section",
    "title": "Conhecendo a base de dados",
    "section": "",
    "text": "Em situações onde trabalharmos com dados que possuem um número de linhas muito grande, não podemos utilizar a função View() para ver a tabela inteira.\nNesse caso, podemos ser interessante usar funções que retornam apenas algumas linhas da base de dados, como head(), tail(), slice_sample(), entre outras.\nAntes de usá-las, vamos adicionar uma coluna que represente o número da linha, para que seja mais fácil identificar as linhas que estamos selecionando:\n\ndados_com_n_linha &lt;- rowid_to_column(dados, \"n_linha\")\n\nAgora podemos usar as funções para retornar algumas linhas da base de dados. Observe os resultados apresentados, e os valores na coluna n_linha:\n\n# Exibindo as primeiras linhas\nhead(dados_com_n_linha)\n\n# A tibble: 6 × 14\n  n_linha Nível Territorial (Código…¹ `Nível Territorial` Unidade de Medida (C…²\n    &lt;int&gt;                       &lt;dbl&gt; &lt;chr&gt;                                &lt;dbl&gt;\n1       1                           3 Unidade da Federaç…                   1572\n2       2                           3 Unidade da Federaç…                   1572\n3       3                           3 Unidade da Federaç…                   1572\n4       4                           3 Unidade da Federaç…                   1572\n5       5                           3 Unidade da Federaç…                   1572\n6       6                           3 Unidade da Federaç…                      2\n# ℹ abbreviated names: ¹​`Nível Territorial (Código)`,\n#   ²​`Unidade de Medida (Código)`\n# ℹ 10 more variables: `Unidade de Medida` &lt;chr&gt;, Valor &lt;dbl&gt;,\n#   `Unidade da Federação (Código)` &lt;dbl&gt;, `Unidade da Federação` &lt;chr&gt;,\n#   `Trimestre (Código)` &lt;dbl&gt;, Trimestre &lt;chr&gt;, `Variável (Código)` &lt;dbl&gt;,\n#   Variável &lt;chr&gt;,\n#   `Condição em relação à força de trabalho e condição de ocupação (Código)` &lt;dbl&gt;, …\n\n# Exibindo as últimas linhas\ntail(dados_com_n_linha)\n\n# A tibble: 6 × 14\n  n_linha Nível Territorial (Código…¹ `Nível Territorial` Unidade de Medida (C…²\n    &lt;int&gt;                       &lt;dbl&gt; &lt;chr&gt;                                &lt;dbl&gt;\n1   26995                           3 Unidade da Federaç…                      2\n2   26996                           3 Unidade da Federaç…                      2\n3   26997                           3 Unidade da Federaç…                      2\n4   26998                           3 Unidade da Federaç…                      2\n5   26999                           3 Unidade da Federaç…                      2\n6   27000                           3 Unidade da Federaç…                      2\n# ℹ abbreviated names: ¹​`Nível Territorial (Código)`,\n#   ²​`Unidade de Medida (Código)`\n# ℹ 10 more variables: `Unidade de Medida` &lt;chr&gt;, Valor &lt;dbl&gt;,\n#   `Unidade da Federação (Código)` &lt;dbl&gt;, `Unidade da Federação` &lt;chr&gt;,\n#   `Trimestre (Código)` &lt;dbl&gt;, Trimestre &lt;chr&gt;, `Variável (Código)` &lt;dbl&gt;,\n#   Variável &lt;chr&gt;,\n#   `Condição em relação à força de trabalho e condição de ocupação (Código)` &lt;dbl&gt;, …\n\n# \"Sorteando\" linhas\nslice_sample(dados_com_n_linha, n = 5)\n\n# A tibble: 5 × 14\n  n_linha Nível Territorial (Código…¹ `Nível Territorial` Unidade de Medida (C…²\n    &lt;int&gt;                       &lt;dbl&gt; &lt;chr&gt;                                &lt;dbl&gt;\n1   15294                           3 Unidade da Federaç…                      2\n2   16037                           3 Unidade da Federaç…                      2\n3   14364                           3 Unidade da Federaç…                   1572\n4   11004                           3 Unidade da Federaç…                   1572\n5   16360                           3 Unidade da Federaç…                      2\n# ℹ abbreviated names: ¹​`Nível Territorial (Código)`,\n#   ²​`Unidade de Medida (Código)`\n# ℹ 10 more variables: `Unidade de Medida` &lt;chr&gt;, Valor &lt;dbl&gt;,\n#   `Unidade da Federação (Código)` &lt;dbl&gt;, `Unidade da Federação` &lt;chr&gt;,\n#   `Trimestre (Código)` &lt;dbl&gt;, Trimestre &lt;chr&gt;, `Variável (Código)` &lt;dbl&gt;,\n#   Variável &lt;chr&gt;,\n#   `Condição em relação à força de trabalho e condição de ocupação (Código)` &lt;dbl&gt;, …",
    "crumbs": [
      "Materiais",
      "Conhecendo a base de dados"
    ]
  },
  {
    "objectID": "04_conhecendo.html#conhecendo-os-valores-únicos-de-uma-coluna",
    "href": "04_conhecendo.html#conhecendo-os-valores-únicos-de-uma-coluna",
    "title": "Conhecendo a base de dados",
    "section": "Conhecendo os valores únicos de uma coluna",
    "text": "Conhecendo os valores únicos de uma coluna\nPara variáveis categóricas ou de texto, é interessante conhecer os valores únicos presentes.\nPara acessar uma coluna específica, utilize o $. Elas retornarão como vetores, e poderemos usar as funções que já conhecemos. Ex: dados$ano.\nDica: após escrever o nome_do_dataframe$, aperte tab para que o RStudio faça sugestões de colunas da base.\nA função unique() retorna os valores únicos de um vetor. Exemplo:\n\nunique(dados$`Unidade de Medida`)\n\n[1] \"Mil pessoas\" \"%\"",
    "crumbs": [
      "Materiais",
      "Conhecendo a base de dados"
    ]
  },
  {
    "objectID": "04_conhecendo.html#footnotes",
    "href": "04_conhecendo.html#footnotes",
    "title": "Conhecendo a base de dados",
    "section": "Notas de rodapé",
    "text": "Notas de rodapé\n\nAinda não abordamos o conceito de grupos, então isso ficará mais claro posteriormente.↩︎",
    "crumbs": [
      "Materiais",
      "Conhecendo a base de dados"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introdução à análise de dados no R",
    "section": "",
    "text": "Este site apresenta o material de apoio para o curso “Introdução à análise de dados no R”, oferecido em 2024. O curso será realizado de forma remota, com aulas ao vivo e atividades práticas.\n\n\n\n\n\n\nImportante\n\n\n\nRecomendamos que todas as pessoas participantes instalem o R e o RStudio antes do início do curso. Para isso, siga as instruções disponíveis na página Instruções de instalação.\nCaso tenha alguma dificuldade, entre em contato com a equipe do curso o quanto antes.",
    "crumbs": [
      "Pré-curso",
      "Introdução à análise de dados no R"
    ]
  },
  {
    "objectID": "index.html#introdução-ao-material",
    "href": "index.html#introdução-ao-material",
    "title": "Introdução à análise de dados no R",
    "section": "",
    "text": "Este site apresenta o material de apoio para o curso “Introdução à análise de dados no R”, oferecido em 2024. O curso será realizado de forma remota, com aulas ao vivo e atividades práticas.\n\n\n\n\n\n\nImportante\n\n\n\nRecomendamos que todas as pessoas participantes instalem o R e o RStudio antes do início do curso. Para isso, siga as instruções disponíveis na página Instruções de instalação.\nCaso tenha alguma dificuldade, entre em contato com a equipe do curso o quanto antes.",
    "crumbs": [
      "Pré-curso",
      "Introdução à análise de dados no R"
    ]
  },
  {
    "objectID": "index.html#sobre-a-equipe-do-curso",
    "href": "index.html#sobre-a-equipe-do-curso",
    "title": "Introdução à análise de dados no R",
    "section": "Sobre a equipe do curso",
    "text": "Sobre a equipe do curso\nBeatriz Milz  Email | GitHub | LinkedIn | ResearchGate | Currículo Lattes | Orcid\n\nSeria legal adicionar as pessoas do IPEA também. Consultar o Rafael para saber a opinião dele.",
    "crumbs": [
      "Pré-curso",
      "Introdução à análise de dados no R"
    ]
  },
  {
    "objectID": "index.html#sobre-este-material",
    "href": "index.html#sobre-este-material",
    "title": "Introdução à análise de dados no R",
    "section": "Sobre este material",
    "text": "Sobre este material\n\nColocar informações sobre a licença do material.",
    "crumbs": [
      "Pré-curso",
      "Introdução à análise de dados no R"
    ]
  },
  {
    "objectID": "07_analise.html",
    "href": "07_analise.html",
    "title": "Analisando dados",
    "section": "",
    "text": "Aviso\n\n\n\nPágina em construção! Em breve.",
    "crumbs": [
      "Materiais",
      "Analisando dados"
    ]
  },
  {
    "objectID": "07_analise.html#sugestões-de-materiais",
    "href": "07_analise.html#sugestões-de-materiais",
    "title": "Analisando dados",
    "section": "Sugestões de materiais",
    "text": "Sugestões de materiais\n\nLivro Metodologia de Pesquisa Jurimétrica:\n\nCapítulo 3 - Estatísticas",
    "crumbs": [
      "Materiais",
      "Analisando dados"
    ]
  },
  {
    "objectID": "09_ciclo_completo.html",
    "href": "09_ciclo_completo.html",
    "title": "Ciclo completo com dados brasileiros",
    "section": "",
    "text": "Aviso\n\n\n\nPágina em construção! Em breve.",
    "crumbs": [
      "Materiais",
      "Ciclo completo com dados brasileiros"
    ]
  },
  {
    "objectID": "08_visualizacao.html",
    "href": "08_visualizacao.html",
    "title": "Visualizando dados",
    "section": "",
    "text": "Aviso\n\n\n\nPágina em construção! Em breve.",
    "crumbs": [
      "Materiais",
      "Visualizando dados"
    ]
  },
  {
    "objectID": "08_visualizacao.html#sugestões-de-materiais",
    "href": "08_visualizacao.html#sugestões-de-materiais",
    "title": "Visualizando dados",
    "section": "Sugestões de materiais",
    "text": "Sugestões de materiais\n\nLivro R para Ciência de Dados 2ed:\n\nVisualização de dados\nVsualizar\nVisualizar: Camadas\nVisualizar: Análise exploratória de dados\nVisualizar: Comunicação\n\nLivro: Metodologia de Pesquisa Jurimétrica:\n\nCapítulo 4 - Visualização",
    "crumbs": [
      "Materiais",
      "Visualizando dados"
    ]
  },
  {
    "objectID": "05_transformacao.html",
    "href": "05_transformacao.html",
    "title": "Transformando dados",
    "section": "",
    "text": "Primeiramente, precisamos carregar o pacote tidyverse e a base de dados que vamos utilizar. A base de dados é a tabela 4092 do SIDRA, que apresenta dados sobre “pessoas de 14 anos ou mais de idade por condição em relação à força de trabalho e condição de ocupação”, e foi baixada previamente (em Importando dados).\n\nlibrary(tidyverse)\ndados_brutos &lt;- read_csv2(\"dados/sidrar_4092_bruto_2.csv\")\n\nUma pergunta que é sempre importante ter em mente ao analisar dados é: O que cada linha representa?\nO objeto dados_brutos apresenta uma linha para cada combinação das seguintes variáveis:\n\nTrimestre (Código) / Trimestre\nUnidade da Federação / Unidade da Federação (Código)\nVariável / Variável (Código)\nCondição em relação à força de trabalho e condição de ocupação e Condição em relação à força de trabalho e condição de ocupação (Código)\n\nOu seja, cada linha representa uma combinação de trimestre, unidade da federação e variável. Outras perguntas relevantes ao analisar dados são:\n\nQual é a pergunta que eu quero responder com esses dados?\nQuais são as variáveis que eu preciso para responder essa pergunta?\n\nNeste capítulo, vamos explorar as funções de transformação de dados do pacote dplyr, usando uma pergunta norteadora como exemplo:\n\nConsiderando que a tabela 4092 apresenta dados sobre “pessoas de 14 anos ou mais de idade por condição em relação à força de trabalho e condição de ocupação”, qual é a taxa de desocupação de cada estado e região do Brasil ao longo do tempo?",
    "crumbs": [
      "Materiais",
      "Transformando dados"
    ]
  },
  {
    "objectID": "05_transformacao.html#introdução",
    "href": "05_transformacao.html#introdução",
    "title": "Transformando dados",
    "section": "",
    "text": "Primeiramente, precisamos carregar o pacote tidyverse e a base de dados que vamos utilizar. A base de dados é a tabela 4092 do SIDRA, que apresenta dados sobre “pessoas de 14 anos ou mais de idade por condição em relação à força de trabalho e condição de ocupação”, e foi baixada previamente (em Importando dados).\n\nlibrary(tidyverse)\ndados_brutos &lt;- read_csv2(\"dados/sidrar_4092_bruto_2.csv\")\n\nUma pergunta que é sempre importante ter em mente ao analisar dados é: O que cada linha representa?\nO objeto dados_brutos apresenta uma linha para cada combinação das seguintes variáveis:\n\nTrimestre (Código) / Trimestre\nUnidade da Federação / Unidade da Federação (Código)\nVariável / Variável (Código)\nCondição em relação à força de trabalho e condição de ocupação e Condição em relação à força de trabalho e condição de ocupação (Código)\n\nOu seja, cada linha representa uma combinação de trimestre, unidade da federação e variável. Outras perguntas relevantes ao analisar dados são:\n\nQual é a pergunta que eu quero responder com esses dados?\nQuais são as variáveis que eu preciso para responder essa pergunta?\n\nNeste capítulo, vamos explorar as funções de transformação de dados do pacote dplyr, usando uma pergunta norteadora como exemplo:\n\nConsiderando que a tabela 4092 apresenta dados sobre “pessoas de 14 anos ou mais de idade por condição em relação à força de trabalho e condição de ocupação”, qual é a taxa de desocupação de cada estado e região do Brasil ao longo do tempo?",
    "crumbs": [
      "Materiais",
      "Transformando dados"
    ]
  },
  {
    "objectID": "05_transformacao.html#padronizar-nome-das-colunas",
    "href": "05_transformacao.html#padronizar-nome-das-colunas",
    "title": "Transformando dados",
    "section": "Padronizar nome das colunas",
    "text": "Padronizar nome das colunas\nÉ uma boa prática padronizar o nome das colunas de um data frame. Assim evitamos problemas encoding e também facilitamos a legibilidade do código e evitamos possíveis erros ao acessar as colunas.\nO pacote janitor possui a função clean_names(), que padroniza os nomes das colunas de um data frame. Ele substitui espaços por underline, remove caracteres especiais, e transforma o texto em minúsculo, garantindo maior consistência ao lidar com os dados. Isso evita erros ao acessar colunas.\n\nlibrary(janitor)\n\n\n# checar nome das colunas da base de dados\nnames(dados_brutos)\n\n [1] \"Nível Territorial (Código)\"                                             \n [2] \"Nível Territorial\"                                                      \n [3] \"Unidade de Medida (Código)\"                                             \n [4] \"Unidade de Medida\"                                                      \n [5] \"Valor\"                                                                  \n [6] \"Unidade da Federação (Código)\"                                          \n [7] \"Unidade da Federação\"                                                   \n [8] \"Trimestre (Código)\"                                                     \n [9] \"Trimestre\"                                                              \n[10] \"Variável (Código)\"                                                      \n[11] \"Variável\"                                                               \n[12] \"Condição em relação à força de trabalho e condição de ocupação (Código)\"\n[13] \"Condição em relação à força de trabalho e condição de ocupação\"         \n\n# limpar nomes das colunas da base de dados, e salvar em um novo objeto\ndados_renomeados &lt;- clean_names(dados_brutos)\n\n# checar nome das colunas da base de dados renomeada\nnames(dados_renomeados)\n\n [1] \"nivel_territorial_codigo\"                                             \n [2] \"nivel_territorial\"                                                    \n [3] \"unidade_de_medida_codigo\"                                             \n [4] \"unidade_de_medida\"                                                    \n [5] \"valor\"                                                                \n [6] \"unidade_da_federacao_codigo\"                                          \n [7] \"unidade_da_federacao\"                                                 \n [8] \"trimestre_codigo\"                                                     \n [9] \"trimestre\"                                                            \n[10] \"variavel_codigo\"                                                      \n[11] \"variavel\"                                                             \n[12] \"condicao_em_relacao_a_forca_de_trabalho_e_condicao_de_ocupacao_codigo\"\n[13] \"condicao_em_relacao_a_forca_de_trabalho_e_condicao_de_ocupacao\"",
    "crumbs": [
      "Materiais",
      "Transformando dados"
    ]
  },
  {
    "objectID": "05_transformacao.html#filtrando-linhas",
    "href": "05_transformacao.html#filtrando-linhas",
    "title": "Transformando dados",
    "section": "Filtrando linhas",
    "text": "Filtrando linhas\nPara responder a pergunta, não precisamos de todas as variáveis presentes na base de dados. Portanto, podemos filtrar as linhas que são relevantes para a análise.\nAntes de filtrar, podemos consultar os valores distintos possíveis, para garantir que estamos selecionando corretamente o valor de interesse ao aplicar o filtro. Isso ajuda a prevenir erros e garante que o filtro está sendo feito de maneira adequada.\nAs variáveis disponíveis na base de dados, e suas unidades de medida são:\n\ndistinct(\n  # base de dados\n  dados_renomeados, \n  # colunas que queremos bucar os valores distintos \n  variavel, unidade_de_medida\n)\n\n# A tibble: 4 × 2\n  variavel                                                     unidade_de_medida\n  &lt;chr&gt;                                                        &lt;chr&gt;            \n1 Pessoas de 14 anos ou mais de idade                          Mil pessoas      \n2 Coeficiente de variação - Pessoas de 14 anos ou mais de ida… %                \n3 Distribuição percentual das pessoas de 14 anos ou mais de i… %                \n4 Coeficiente de variação - Distribuição percentual das pesso… %                \n\n\nNesse caso, podemos filtrar os dados onde a variável é igual à \"Pessoas de 14 anos ou mais de idade\".\n\ndados_filtrados &lt;- filter(\n  # base de dados\n  dados_renomeados,\n  # condição de filtro\n  variavel == \"Pessoas de 14 anos ou mais de idade\"\n)\n\nPara verificar se o filtro foi feita corretamente, podemos checar o número de linhas de cada base de dados:\n\nnrow(dados_renomeados)\n\n[1] 27000\n\nnrow(dados_filtrados)\n\n[1] 6750\n\n\nPodemos verificar também os valores distintos para as colunas variavel e unidade_de_medida na base de dados dados_filtrados:\n\ndistinct(\n  # base de dados\n  dados_filtrados, \n  # colunas que queremos bucar os valores distintos \n  variavel, unidade_de_medida\n)\n\n# A tibble: 1 × 2\n  variavel                            unidade_de_medida\n  &lt;chr&gt;                               &lt;chr&gt;            \n1 Pessoas de 14 anos ou mais de idade Mil pessoas      \n\n\nAgora sabemos que a base de dados dados_filtrados contém apenas dados sobre a variável \"Pessoas de 14 anos ou mais de idade\", e que a unidade de medida da coluna valor é mil pessoas.",
    "crumbs": [
      "Materiais",
      "Transformando dados"
    ]
  },
  {
    "objectID": "05_transformacao.html#selecionando-colunas",
    "href": "05_transformacao.html#selecionando-colunas",
    "title": "Transformando dados",
    "section": "Selecionando colunas",
    "text": "Selecionando colunas\nAlgumas colunas apresentam valores que não são relevantes para a análise. Portanto, podemos selecionar apenas as colunas que são vamos utilizar, utilizando a função select().\n\ndados_selecionados &lt;- select(\n  # base de dados\n  dados_filtrados, \n  # colunas que queremos manter\n  unidade_da_federacao,\n  unidade_da_federacao_codigo,\n  trimestre,\n  trimestre_codigo,\n  condicao_em_relacao_a_forca_de_trabalho_e_condicao_de_ocupacao,\n  valor\n)\n\nPodemos renomear colunas com a função rename(). Vamos renomear algumas colunas para facilitar o uso posteriormente:\n\ndados_renomeados_2 &lt;- rename(\n  # base de dados\n  dados_selecionados, \n  # colunas que queremos renomear: novo_nome = nome_atual\n  condicao = condicao_em_relacao_a_forca_de_trabalho_e_condicao_de_ocupacao,\n  valor_mil_pessoas = valor,\n  uf = unidade_da_federacao,\n  uf_codigo = unidade_da_federacao_codigo\n)\n\nglimpse(dados_renomeados_2)\n\nRows: 6,750\nColumns: 6\n$ uf                &lt;chr&gt; \"Rondônia\", \"Rondônia\", \"Rondônia\", \"Rondônia\", \"Ron…\n$ uf_codigo         &lt;dbl&gt; 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, …\n$ trimestre         &lt;chr&gt; \"1º trimestre 2012\", \"1º trimestre 2012\", \"1º trimes…\n$ trimestre_codigo  &lt;dbl&gt; 201201, 201201, 201201, 201201, 201201, 201202, 2012…\n$ condicao          &lt;chr&gt; \"Total\", \"Força de trabalho\", \"Força de trabalho - o…\n$ valor_mil_pessoas &lt;dbl&gt; 1210, 765, 703, 62, 446, 1217, 782, 733, 49, 434, 12…",
    "crumbs": [
      "Materiais",
      "Transformando dados"
    ]
  },
  {
    "objectID": "05_transformacao.html#transformando-a-tabela",
    "href": "05_transformacao.html#transformando-a-tabela",
    "title": "Transformando dados",
    "section": "Transformando a tabela",
    "text": "Transformando a tabela\nVoltando à pergunta norteadora, queremos calcular a taxa de desocupação de cada estado e região do Brasil ao longo do tempo. Para isso, é mais fácil trabalhar com a tabela onde cada linha represente uma UF por trimestre, e as categorias da variável condicao sejam transformadas em colunas.\nPara fazer essa transformação, podemos usar a função pivot_wider().\nA função pivot_wider() é útil quando queremos reorganizar uma tabela, transformando variáveis categóricas em novas colunas. Essa estrutura facilita cálculos comparativos e análises entre as diferentes categorias.\nPor exemplo, no formato atual (dados longos), temos uma linha para cada combinação de UF, trimestre e condição de ocupação. Ao usarmos pivot_wider(), vamos transformar a tabela para que cada linha represente uma UF por trimestre, e as diferentes condições de ocupação (empregado, desocupado, etc.) se tornem colunas.\n\ndados_largos &lt;- pivot_wider(\n  # base de dados\n  dados_renomeados_2, \n  # nome da coluna de onde os nomes das novas colunas serão extraídos\n  names_from = condicao, \n  # nome da coluna de onde os valores das novas colunas serão extraídos \n  values_from = valor_mil_pessoas, \n  # podemos adicionar um texto como prefixo. nesse caso, isso é opcional, \n  # mas é útil para ficar claro qual é a unidade de medida das variáveis\n  names_prefix = \"mil_pessoas_\"\n)\n\n\nglimpse(dados_largos)\n\nRows: 1,350\nColumns: 9\n$ uf                                           &lt;chr&gt; \"Rondônia\", \"Rondônia\", \"…\n$ uf_codigo                                    &lt;dbl&gt; 11, 11, 11, 11, 11, 11, 1…\n$ trimestre                                    &lt;chr&gt; \"1º trimestre 2012\", \"2º …\n$ trimestre_codigo                             &lt;dbl&gt; 201201, 201202, 201203, 2…\n$ mil_pessoas_Total                            &lt;dbl&gt; 1210, 1217, 1226, 1219, 1…\n$ `mil_pessoas_Força de trabalho`              &lt;dbl&gt; 765, 782, 784, 805, 796, …\n$ `mil_pessoas_Força de trabalho - ocupada`    &lt;dbl&gt; 703, 733, 738, 762, 746, …\n$ `mil_pessoas_Força de trabalho - desocupada` &lt;dbl&gt; 62, 49, 46, 42, 49, 39, 3…\n$ `mil_pessoas_Fora da força de trabalho`      &lt;dbl&gt; 446, 434, 441, 415, 437, …\n\n\nAgora temos uma tabela onde cada linha representa uma UF por trimestre, e as categorias da variável condicao se tornaram colunas. Porém agora temos colunas com nomes que estão com caracteres especiais, e podemos arrumar isso com a função clean_names().\n\ndados_largos_renomeados &lt;- clean_names(dados_largos)\nglimpse(dados_largos_renomeados)\n\nRows: 1,350\nColumns: 9\n$ uf                                       &lt;chr&gt; \"Rondônia\", \"Rondônia\", \"Rond…\n$ uf_codigo                                &lt;dbl&gt; 11, 11, 11, 11, 11, 11, 11, 1…\n$ trimestre                                &lt;chr&gt; \"1º trimestre 2012\", \"2º trim…\n$ trimestre_codigo                         &lt;dbl&gt; 201201, 201202, 201203, 20120…\n$ mil_pessoas_total                        &lt;dbl&gt; 1210, 1217, 1226, 1219, 1233,…\n$ mil_pessoas_forca_de_trabalho            &lt;dbl&gt; 765, 782, 784, 805, 796, 800,…\n$ mil_pessoas_forca_de_trabalho_ocupada    &lt;dbl&gt; 703, 733, 738, 762, 746, 761,…\n$ mil_pessoas_forca_de_trabalho_desocupada &lt;dbl&gt; 62, 49, 46, 42, 49, 39, 36, 3…\n$ mil_pessoas_fora_da_forca_de_trabalho    &lt;dbl&gt; 446, 434, 441, 415, 437, 443,…\n\n\n\nAs funções pivot_longer() e pivot_wider() são usadas para alternar entre dados ‘longos’ e ‘largos’. Normalmente, dados longos são mais fáceis de visualizar, enquanto dados largos são melhores para realizar cálculos comparativos entre categorias.",
    "crumbs": [
      "Materiais",
      "Transformando dados"
    ]
  },
  {
    "objectID": "05_transformacao.html#criando-e-transformando-variáveis",
    "href": "05_transformacao.html#criando-e-transformando-variáveis",
    "title": "Transformando dados",
    "section": "Criando e transformando variáveis",
    "text": "Criando e transformando variáveis\nPara criar novas variáveis, ou transformar variáveis que já existem, podemos usar a função mutate().\nAs variáveis uf_codigo e trimestre_codigo estão armazenadas como valores numéricos. No entanto, como não realizaremos operações matemáticas com esses valores, é mais apropriado transformá-los em fatores, o que facilita a análise e previne erros em cálculos futuros.\nExistem várias funções para transformar variáveis de um tipo para outro, como as.factor(), as.character(), as.numeric(), as.Date(), etc.\n\ndados_tipo &lt;- mutate(\n  # base de dados\n  dados_largos_renomeados,\n  # nova variável: \n  # nome_da_coluna = o que queremos calcular\n  uf_codigo = as.factor(uf_codigo),\n  trimestre_codigo = as.factor(trimestre_codigo)\n)\n\nPara calcular a taxa de desocupação, precisamos criar uma nova variável que represente a proporção de pessoas desocupadas em relação ao total de pessoas economicamente ativas.\n\ndados_com_proporcao &lt;- mutate(\n  # base de dados\n  dados_tipo,\n  # nova variável: \n  # nome_da_coluna = o que queremos calcular\n  prop_desocupacao = (mil_pessoas_forca_de_trabalho_desocupada / mil_pessoas_forca_de_trabalho)*100,\n)",
    "crumbs": [
      "Materiais",
      "Transformando dados"
    ]
  },
  {
    "objectID": "05_transformacao.html#ordenando-as-linhas",
    "href": "05_transformacao.html#ordenando-as-linhas",
    "title": "Transformando dados",
    "section": "Ordenando as linhas",
    "text": "Ordenando as linhas\nA base atual está ordada por trimestre e código da unidade da federação. Para facilitar a análise, podemos ordenar as linhas segundo a proporção de desocupação calculada no passo anterior, usando a função arrange():\n\narrange(\n  # base de dados\n  dados_com_proporcao,\n  # colunas que queremos usar ordenar\n  prop_desocupacao\n)\n\n# A tibble: 1,350 × 10\n   uf             uf_codigo trimestre         trimestre_codigo mil_pessoas_total\n   &lt;chr&gt;          &lt;fct&gt;     &lt;chr&gt;             &lt;fct&gt;                        &lt;dbl&gt;\n 1 Rondônia       11        3º trimestre 2023 202303                        1486\n 2 Rondônia       11        2º trimestre 2023 202302                        1483\n 3 Mato Grosso    51        3º trimestre 2023 202303                        2827\n 4 Santa Catarina 42        4º trimestre 2013 201304                        5371\n 5 Santa Catarina 42        4º trimestre 2012 201204                        5283\n 6 Santa Catarina 42        4º trimestre 2014 201404                        5478\n 7 Santa Catarina 42        2º trimestre 2014 201402                        5429\n 8 Santa Catarina 42        3º trimestre 2013 201303                        5343\n 9 Santa Catarina 42        3º trimestre 2014 201403                        5459\n10 Mato Grosso    51        2º trimestre 2023 202302                        2799\n# ℹ 1,340 more rows\n# ℹ 5 more variables: mil_pessoas_forca_de_trabalho &lt;dbl&gt;,\n#   mil_pessoas_forca_de_trabalho_ocupada &lt;dbl&gt;,\n#   mil_pessoas_forca_de_trabalho_desocupada &lt;dbl&gt;,\n#   mil_pessoas_fora_da_forca_de_trabalho &lt;dbl&gt;, prop_desocupacao &lt;dbl&gt;\n\n\nA função arrange() ordena, por padrão, de forma crescente. Podemos ordenar de forma decrescente, utilizando a função desc() junto à coluna que queremos ordenar de forma decrescente:\n\narrange(\n  # base de dados\n  dados_com_proporcao,\n  # colunas que queremos usar ordenar\n  desc(prop_desocupacao)\n)\n\n# A tibble: 1,350 × 10\n   uf         uf_codigo trimestre         trimestre_codigo mil_pessoas_total\n   &lt;chr&gt;      &lt;fct&gt;     &lt;chr&gt;             &lt;fct&gt;                        &lt;dbl&gt;\n 1 Pernambuco 26        2º trimestre 2021 202102                        7570\n 2 Amapá      16        2º trimestre 2018 201802                         602\n 3 Bahia      29        1º trimestre 2021 202101                       11965\n 4 Amapá      16        1º trimestre 2018 201801                         597\n 5 Pernambuco 26        1º trimestre 2021 202101                        7548\n 6 Bahia      29        3º trimestre 2020 202003                       11993\n 7 Sergipe    28        3º trimestre 2020 202003                        1835\n 8 Bahia      29        4º trimestre 2020 202004                       12004\n 9 Sergipe    28        1º trimestre 2021 202101                        1848\n10 Bahia      29        2º trimestre 2020 202002                       11870\n# ℹ 1,340 more rows\n# ℹ 5 more variables: mil_pessoas_forca_de_trabalho &lt;dbl&gt;,\n#   mil_pessoas_forca_de_trabalho_ocupada &lt;dbl&gt;,\n#   mil_pessoas_forca_de_trabalho_desocupada &lt;dbl&gt;,\n#   mil_pessoas_fora_da_forca_de_trabalho &lt;dbl&gt;, prop_desocupacao &lt;dbl&gt;\n\n\nNesse caso, as linhas ficaram ordenadas de forma decrescente, de acordo com a proporção de desocupação. Porém os trimestres não estão ordenados! A função arrange() permite que ordenemos por mais de uma coluna, e a ordem de prioridade é dada pela ordem em que as colunas são passadas para a função:\n\ndados_ordenados &lt;- arrange(\n  # base de dados\n  dados_com_proporcao,\n  # colunas que queremos usar ordenar\n  trimestre_codigo, desc(prop_desocupacao)\n)\n\nglimpse(dados_ordenados)\n\nRows: 1,350\nColumns: 10\n$ uf                                       &lt;chr&gt; \"Amapá\", \"Bahia\", \"Rio Grande…\n$ uf_codigo                                &lt;fct&gt; 16, 29, 24, 27, 13, 28, 25, 2…\n$ trimestre                                &lt;chr&gt; \"1º trimestre 2012\", \"1º trim…\n$ trimestre_codigo                         &lt;fct&gt; 201201, 201201, 201201, 20120…\n$ mil_pessoas_total                        &lt;dbl&gt; 487, 10986, 2540, 2383, 2463,…\n$ mil_pessoas_forca_de_trabalho            &lt;dbl&gt; 318, 6888, 1370, 1173, 1558, …\n$ mil_pessoas_forca_de_trabalho_ocupada    &lt;dbl&gt; 278, 6086, 1211, 1041, 1386, …\n$ mil_pessoas_forca_de_trabalho_desocupada &lt;dbl&gt; 40, 802, 159, 133, 173, 99, 1…\n$ mil_pessoas_fora_da_forca_de_trabalho    &lt;dbl&gt; 170, 4098, 1170, 1210, 905, 6…\n$ prop_desocupacao                         &lt;dbl&gt; 12.578616, 11.643438, 11.6058…\n\n\nAgora temos a base de dados ordenada por trimestre, e dentro de cada trimestre, por proporção de desocupação (de forma descrecente).",
    "crumbs": [
      "Materiais",
      "Transformando dados"
    ]
  },
  {
    "objectID": "05_transformacao.html#pipe---encadeando-funções",
    "href": "05_transformacao.html#pipe---encadeando-funções",
    "title": "Transformando dados",
    "section": "Pipe - Encadeando funções",
    "text": "Pipe - Encadeando funções\nNos exemplos anteriores, utilizamos uma função por vez, para facilitar a compreensão de cada etapa. No entanto, à medida que nos familiarizamos com as funções, podemos encadear várias delas em um único fluxo de código usando o operador pipe (%&gt;% ou |&gt;). Isso torna o código mais conciso e elimina a criação de objetos intermediários desnecessários.\nPodemos reescrever os códigos anteriores, usando o operador pipe para encadear as funções. Isso permite que criemos menos objetos intermediários (como os que criamos anteriormente: dados_renomeados, dados_filtrados, dados_selecionados, etc.). Porém, é importante ter cuidado para não criar sequências muito longas e difíceis de entender.\nNo exemplo abaixo, criamos menos objetos intermediários, e encadeamos as funções usadas anteriormente usando o pipe:\n\ndados_filtrados_selecionados &lt;- dados_brutos |&gt;\n  # limpando os nomes das colunas\n  clean_names() |&gt;\n  # filtrando as linhas\n  filter(variavel == \"Pessoas de 14 anos ou mais de idade\") |&gt;\n  # selecionando as colunas\n  select(\n    unidade_da_federacao,\n    unidade_da_federacao_codigo,\n    trimestre,\n    trimestre_codigo,\n    condicao_em_relacao_a_forca_de_trabalho_e_condicao_de_ocupacao,\n    valor\n  ) |&gt;\n  # renomeando as colunas\n  rename(\n    condicao = condicao_em_relacao_a_forca_de_trabalho_e_condicao_de_ocupacao,\n    valor_mil_pessoas = valor,\n    uf = unidade_da_federacao,\n    uf_codigo = unidade_da_federacao_codigo\n  )\n\ndados_largos &lt;- dados_filtrados_selecionados |&gt;\n  # transformando para formato largo\n  pivot_wider(\n    names_from = condicao,\n    values_from = valor_mil_pessoas,\n    names_prefix = \"mil_pessoas_\"\n  ) |&gt;\n  # limpando o nome das colunas novamente\n  clean_names()\n\n  \n  \ndados_preparados &lt;- dados_largos |&gt;  \n  # transformando as variáveis \n  mutate(\n    uf_codigo = as.factor(uf_codigo),\n    trimestre_codigo = as.factor(trimestre_codigo),\n    prop_desocupacao = (\n      mil_pessoas_forca_de_trabalho_desocupada / mil_pessoas_forca_de_trabalho\n    ) * 100,\n  ) |&gt;\n  # ordenando a base de dados\n  arrange(trimestre_codigo, desc(prop_desocupacao))\n\n\nglimpse(dados_preparados)\n\nRows: 1,350\nColumns: 10\n$ uf                                       &lt;chr&gt; \"Amapá\", \"Bahia\", \"Rio Grande…\n$ uf_codigo                                &lt;fct&gt; 16, 29, 24, 27, 13, 28, 25, 2…\n$ trimestre                                &lt;chr&gt; \"1º trimestre 2012\", \"1º trim…\n$ trimestre_codigo                         &lt;fct&gt; 201201, 201201, 201201, 20120…\n$ mil_pessoas_total                        &lt;dbl&gt; 487, 10986, 2540, 2383, 2463,…\n$ mil_pessoas_forca_de_trabalho            &lt;dbl&gt; 318, 6888, 1370, 1173, 1558, …\n$ mil_pessoas_forca_de_trabalho_ocupada    &lt;dbl&gt; 278, 6086, 1211, 1041, 1386, …\n$ mil_pessoas_forca_de_trabalho_desocupada &lt;dbl&gt; 40, 802, 159, 133, 173, 99, 1…\n$ mil_pessoas_fora_da_forca_de_trabalho    &lt;dbl&gt; 170, 4098, 1170, 1210, 905, 6…\n$ prop_desocupacao                         &lt;dbl&gt; 12.578616, 11.643438, 11.6058…",
    "crumbs": [
      "Materiais",
      "Transformando dados"
    ]
  },
  {
    "objectID": "05_transformacao.html#unindo-duas-bases-de-dados",
    "href": "05_transformacao.html#unindo-duas-bases-de-dados",
    "title": "Transformando dados",
    "section": "Unindo duas bases de dados",
    "text": "Unindo duas bases de dados\nUnir duas tabelas é algo comum em análises de dados. Podemos usar algumas funções para combinar duas tabelas, utilizando uma ou mais colunas como “chave”.\nO pacote dplyr apresenta um conjunto de funções para realizar diferentes tipos de uniões, como left_join(), inner_join(), full_join(), anti_join(), entre outras.\nA função left_join() é a mais frequentemente usada: ela mantém todas as linhas da primeira tabela e adiciona colunas da segunda tabela onde houver correspondência.\nUm exemplo comum de uso é quando temos dados por município ou estado, e desejamos visualizar esses dados em um mapa. Para isso, precisamos de informações geoespaciais, como a delimitação geográfica de cada município ou estado. Podemos usar o left_join() para combinar esses dados geoespaciais com os dados que queremos visualizar.\nVamos usar o pacote geobr para carregar as geometrias dos estados brasileiros.\n\n\n\n\n\n\nO pacote geobr facilita o acesso a dados geoespaciais do Brasil, como estados, municípios e outras divisões administrativas. Ele é muito útil quando queremos fazer análises geoespaciais, já que oferece dados geográficos prontos para uso.\nPodemos utilizar a função read_state() para carregar as geometrias dos estados brasileiros. Isso nos permite combinar essas geometrias com outros dados, como taxas de desocupação, e criar mapas que facilitam a visualização de padrões regionais.\n\n\n\n\nlibrary(geobr)\ngeo_estados &lt;- read_state(showProgress = FALSE)\nglimpse(geo_estados)\n\nRows: 27\nColumns: 6\n$ code_state   &lt;dbl&gt; 11, 12, 13, 14, 15, 16, 17, 21, 22, 23, 24, 25, 26, 27, 2…\n$ abbrev_state &lt;chr&gt; \"RO\", \"AC\", \"AM\", \"RR\", \"PA\", \"AP\", \"TO\", \"MA\", \"PI\", \"CE…\n$ name_state   &lt;chr&gt; \"Rondônia\", \"Acre\", \"Amazonas\", \"Roraima\", \"Pará\", \"Amapá…\n$ code_region  &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, …\n$ name_region  &lt;chr&gt; \"Norte\", \"Norte\", \"Norte\", \"Norte\", \"Norte\", \"Norte\", \"No…\n$ geom         &lt;MULTIPOLYGON [°]&gt; MULTIPOLYGON (((-63.32721 -..., MULTIPOLYGON…\n\n\nO left_join() é usado aqui para combinar os dados do SIDRA com os dados das delimitações das UFs. Cada linha do nosso dataset de desocupação será associada à respectiva geometria da UF, permitindo visualizarmos as proporções de desocupação por UF em um mapa. Esse tipo de operação é comum quando queremos identificar padrões regionais.\nÉ importante garantir que as colunas usadas na combinação de tabelas (o argumento by do left_join()) tenham o mesmo tipo de dado. Podemos verificar o tipo de dado de cada coluna com a função class():\n\nclass(geo_estados$code_state)\n\n[1] \"numeric\"\n\nclass(dados_ordenados$uf_codigo)\n\n[1] \"factor\"\n\n\nNeste caso, as colunas que queremos usar como chave são de tipos diferentes (numérico e fator), O left_join() não conseguirá fazer a correspondência corretamente, e a função gerará um erro:\n\nleft_join(geo_estados, dados_ordenados, by = c(\"code_state\" = \"uf_codigo\"))\n\nError in `sf_column %in% names(g)`:\n! Can't join `x$code_state` with `y$uf_codigo` due to incompatible\n  types.\nℹ `x$code_state` is a &lt;double&gt;.\nℹ `y$uf_codigo` is a &lt;factor&lt;48524&gt;&gt;.\n\n\nNo exemplo, podemos transformar a coluna code_state em fator usando mutate(). Assim, garantimos que as colunas usadas no argumento by sejam do mesmo tipo e possam ser corretamente combinados.\n\ndados_geo &lt;- geo_estados |&gt; \n  mutate(code_state = as.factor(code_state)) |&gt; \n  left_join(dados_ordenados, by = c(\"code_state\" = \"uf_codigo\"))\n\nglimpse(dados_geo)\n\nRows: 1,350\nColumns: 15\n$ code_state                               &lt;fct&gt; 11, 11, 11, 11, 11, 11, 11, 1…\n$ abbrev_state                             &lt;chr&gt; \"RO\", \"RO\", \"RO\", \"RO\", \"RO\",…\n$ name_state                               &lt;chr&gt; \"Rondônia\", \"Rondônia\", \"Rond…\n$ code_region                              &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ name_region                              &lt;chr&gt; \"Norte\", \"Norte\", \"Norte\", \"N…\n$ uf                                       &lt;chr&gt; \"Rondônia\", \"Rondônia\", \"Rond…\n$ trimestre                                &lt;chr&gt; \"1º trimestre 2012\", \"2º trim…\n$ trimestre_codigo                         &lt;fct&gt; 201201, 201202, 201203, 20120…\n$ mil_pessoas_total                        &lt;dbl&gt; 1210, 1217, 1226, 1219, 1233,…\n$ mil_pessoas_forca_de_trabalho            &lt;dbl&gt; 765, 782, 784, 805, 796, 800,…\n$ mil_pessoas_forca_de_trabalho_ocupada    &lt;dbl&gt; 703, 733, 738, 762, 746, 761,…\n$ mil_pessoas_forca_de_trabalho_desocupada &lt;dbl&gt; 62, 49, 46, 42, 49, 39, 36, 3…\n$ mil_pessoas_fora_da_forca_de_trabalho    &lt;dbl&gt; 446, 434, 441, 415, 437, 443,…\n$ prop_desocupacao                         &lt;dbl&gt; 8.104575, 6.265985, 5.867347,…\n$ geom                                     &lt;MULTIPOLYGON [°]&gt; MULTIPOLYGON (((…\n\n\nAgora temos uma base de dados que combina os dados do SIDRA com as geometrias dos estados brasileiros.\nCombinar dados dessa forma nos permite fazer visualizações geoespaciais, como um mapa de calor das taxas de desocupação por estado. Isso facilita a identificação de padrões regionais, ajudando na interpretação dos dados.\nNão falaremos nesse momento sobre como criar visualizações e mapas, pois isso será abordado em aulas futuras. Mas podemos adiantar um exemplo de como criar um mapa apresentando as proporções de desocupação por estado:\n\nCódigodados_geo |&gt; \n  filter(trimestre_codigo == \"202402\") |&gt;\n  ggplot() +\n  geom_sf(aes(fill = prop_desocupacao)) +\n  theme_light() +\n  scale_fill_viridis_c() +\n  labs(title = \"Proporção de desocupação por UF no 2º trimestre de 2024\",\n       fill = \"Proporção de desocupação (%)\") +\n  theme(legend.position = \"bottom\")",
    "crumbs": [
      "Materiais",
      "Transformando dados"
    ]
  },
  {
    "objectID": "05_transformacao.html#sugestões-de-materiais",
    "href": "05_transformacao.html#sugestões-de-materiais",
    "title": "Transformando dados",
    "section": "Sugestões de materiais",
    "text": "Sugestões de materiais\n\nLivro R para Ciência de Dados 2ed:\n\nTransformação de dados\nOrganização de dados",
    "crumbs": [
      "Materiais",
      "Transformando dados"
    ]
  },
  {
    "objectID": "00_projeto_eda.html",
    "href": "00_projeto_eda.html",
    "title": "Projeto de Análise Exploratória de Dados com R",
    "section": "",
    "text": "Com o objetivo de praticar os conceitos apresentados no curso, recomendamos que as pessoas participantes realizem um projeto de análise exploratória de dados paralelamente às aulas. Este projeto permitirá que você consolide o aprendizado adquirido, explorando dados reais e aplicando as ferramentas de análise discutidas em aula.\nAproveite o projeto para aplicar os conceitos apresentados no curso e para explorar novas funcionalidades do R. Ao se deparar com uma dúvida, não esqueça de anotar e perguntar durante as aulas ou para os monitores. A equipe do curso está disponível para auxiliar com dúvidas sobre o projeto até a data final do curso.\nOs passos a seguir podem te ajudar a organizar o projeto de análise exploratória de dados:\n\nEscolha um conjunto de dados: Você pode escolher um conjunto de dados de sua preferência. Caso não tenha um conjunto de dados em mente, sugerimos que escolha um dos conjuntos de dados disponíveis nos seguintes pacotes:\n\nsidrar: Acesso aos dados disponíveis no SIDRA - Sistema IBGE de Recuperação Automática.\ncensobr: Dados de censos demográficos brasileiros.\nipeadatar: Acesso aos dados disponibilizados no Ipeadata.\nflightsbr: Dados de voos no Brasil.\n\nCrie um projeto no RStudio: Crie um projeto no RStudio para armazenar os códigos e arquivos do projeto. Esse procedimento será descrito na aula Conhecendo o R e o RStudio.\nImporte os dados: Importe o conjunto de dados escolhido para o R. Esse procedimento será descrito na aula Importando dados.\nObjetivo da análise: Defina o objetivo da análise exploratória de dados. Quais são as perguntas que você deseja responder a partir desta base de dados?\nDescreva o conjunto de dados brutos: Faça uma breve descrição do conjunto de dados escolhido. Qual é a unidade amostral (o que cada linha significa)? Quais são as variáveis presentes? Quais são os tipos de variáveis? Você pode incluir tabelas ou gráficos para facilitar a visualização das variáveis e sua distribuição. O que precisa ser feito para deixar a tabela “limpa”, ou seja, pronta para a análise?\nLimpeza dos dados: Utilize o que você aprendeu na etapa passada para limpar o conjunto de dados. Isso pode incluir lidar com dados ausentes, remover outliers ou inconsistências. A aula Transformando dados será útil nessa etapa.\nRealize a análise exploratória de dados: Utilize os conceitos apresentados no curso para realizar a análise exploratória de dados do conjunto escolhido. Lembre-se do objetivo que você definiu anteriormente e busque responder às perguntas que você levantou. Inclua gráficos e tabelas para apresentar os resultados e escreva suas interpretações ao longo do processo. As aulas Analisando dados e Visualizando dados serão úteis nessa etapa.\nPróximos passos: Você pode apresentar os resultados para outras pessoas envolvidas no curso (participantes, ministrantes, monitores) e solicitar feedbacks.",
    "crumbs": [
      "Pré-curso",
      "Projeto de Análise Exploratória de Dados com R"
    ]
  },
  {
    "objectID": "03_importacao.html",
    "href": "03_importacao.html",
    "title": "Importando dados",
    "section": "",
    "text": "Conceitos prévios importantes:\n\nPacotes, funções e objetos no R\nProjetos do RStudio (.Rproj) e diretórios de trabalho\nCaminhos de arquivos\nO objetivo da etapa de importação é carregar a base de dados para a memória RAM do computador. Assim conseguiremos utilizar os dados no R.\nEssa etapa pode ser bem rápida (ou não!). Depende da base de dados que precisamos carregar.\nNesta etapa, vamos aprender:\nAo final, teremos também uma lista com sugestão de materiais extras, caso queira aprofundar mais sobre o assunto.",
    "crumbs": [
      "Materiais",
      "Importando dados"
    ]
  },
  {
    "objectID": "03_importacao.html#importando-dados-de-um-arquivo-local",
    "href": "03_importacao.html#importando-dados-de-um-arquivo-local",
    "title": "Importando dados",
    "section": "Importando dados de um arquivo local",
    "text": "Importando dados de um arquivo local\nPara importar dados de um arquivo local, você pode usar funções com o prefixo read_ de pacotes como readr e readxl.\nArquivos de texto (ex: .csv)\nO pacote readr permite a leitura de arquivos de texto separados por algum delimitador, como .csv, .tsv e .txt.\n\nlibrary(readr)\n\nPara realizar a importação de um arquivo deste tipo, é importante saber qual é o delimitador utilizado no arquivo.\nA sigla CSV signfica Comma Separated Values, ou seja, valores separados por vírgula. Por padrão, a função read_csv() do pacote readr importa arquivos .csv com delimitador ,.\nNo Brasil, é comum a utilização do ; como delimitador, e para isso podemos utilizar a função read_csv2(). Isso acontece pois utilizamos a vírgula como separador decimal (Ex: 4,20) e isso pode causar problemas na importação de arquivos .csv com delimitador ,.\nCaso o arquivo tenha outro delimitador, você pode utilizar a função read_delim() e especificar o delimitador com o argumento delim.\nAo importar, uma mensagem aparecerá no console apresentando algumas informações sobre a importação, como:\n\nnúmero de linhas;\nnúmero de colunas;\ndelimitador utilizado;\ntipos de colunas;\nnome das colunas por tipo;\nquantidade de colunas importadas por tipo.\n\n\n\nCaptura de tela do console do RStudio, mostrando a mensagem apresentada pela função read_csv()\n\nArquivo de texto separado por vírgula (,)\n\n# Importando dados de um arquivo .csv\ndados_csv &lt;- read_csv(\"dados/sidrar_4092.csv\")\n\nRows: 1350 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): trimestre_texto, unidade_da_federacao\ndbl  (9): ano, trimestre_numero, trimestre_codigo, unidade_da_federacao_codi...\ndate (2): trimestre_data_inicio, trimestre_data_fim\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nArquivo de texto separado por ponto e vírgula (;)\n\n# Importando dados de um arquivo .csv\n# Com separador ponto e vírgula\ndados_csv_2 &lt;- read_csv2(\"dados/sidrar_4092_2.csv\")\n\nℹ Using \"','\" as decimal and \"'.'\" as grouping mark. Use `read_delim()` for more control.\n\n\nRows: 1350 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \";\"\nchr  (2): trimestre_texto, unidade_da_federacao\ndbl  (9): ano, trimestre_numero, trimestre_codigo, unidade_da_federacao_codi...\ndate (2): trimestre_data_inicio, trimestre_data_fim\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nArquivos Excel (ex: .xlsx)\nO pacote readxl permite a leitura de arquivos do Excel.\n\n# Carregando o pacote readxl\nlibrary(readxl)\n\nA função excel_sheets() do pacote readxl retorna o nome das planilhas (Sheets) disponíveis em um arquivo Excel:\n\nexcel_sheets(\"dados/sidrar_4092.xlsx\")\n\n[1] \"Sheet1\"\n\n\nA função read_excel() do pacote readxl permite a leitura de uma planilha específica de um arquivo Excel, utilizando o argumento sheet para especificar o nome da planilha. Caso o argumento sheet não seja fornecido, a função importará a primeira planilha do arquivo.\n\n# Importando dados de uma planilha do Excel\ndados_excel &lt;- read_excel(\"dados/sidrar_4092.xlsx\", sheet = \"Sheet1\")\n\nArquivo binário do R (.rds)\nA função read_rds() do pacote readr permite importar um arquivo binário do R.\n\ndados &lt;- read_rds(\"dados/sidrar_4092.rds\")\n\nImport Dataset do RStudio\nCaso você esteja com dificuldades, uma dica é usar a funcionalidade Import Dataset do RStudio. Essa funcionalidade permite utilizar uma interface point-and-click para importar dados, e apresenta o código utilizado para a importação.\n\n\n\n\n\n\nDica\n\n\n\nO mais importante ao usar essa funcionalidade é copiar e colar o código gerado no seu script, para que você possa reutilizá-lo posteriormente.\n\n\nPara acessar a funcionalidade Import Dataset, clique em Import Dataset no canto superior direito do painel Environment do RStudio. Caso o arquivo seja um Excel, escolha a opção From Excel. Caso o arquivo seja um texto separado por algum delimitador (como CSV), escolha a opção From Text (readr).\n\n\nCaptura de tela do console do RStudio, mostrando o menu onde podemos encontrar o Import Dataset",
    "crumbs": [
      "Materiais",
      "Importando dados"
    ]
  },
  {
    "objectID": "03_importacao.html#salvando-dados-localmente",
    "href": "03_importacao.html#salvando-dados-localmente",
    "title": "Importando dados",
    "section": "Salvando dados localmente",
    "text": "Salvando dados localmente\nPara salvar dados localmente, você pode usar funções com o prefixo write_ de pacotes como readr e writexl. Essas funções solicitam dois argumentos principais:\n\nQual é o objeto que você queremos salvar? Esse objeto deve estar disponível no Environment do R.\nOnde queremos salvar o arquivo? O caminho completo do arquivo deve ser fornecido entre aspas, contendo o diretório onde ele será salvo (em qual pasta do computador) e o nome do arquivo (com a extensão, por exemplo, .csv).\n\nAntes de salvar os dados, vamos criar um diretório onde salvaremos os arquivos. Você pode criar o diretório manualmente ou usar a função fs::dir_create(\"nome_do_diretorio/\") para criar o diretório.\n\nlibrary(fs)\ndir_create(\"dados_output\")\n\n\n\n\n\n\n\nAviso\n\n\n\nAtenção: O diretório (pasta no computador) onde o arquivo será salvo deve existir previamente, se não gerará um erro similar a este:\nError: Cannot open file for writing:\n* 'dados_output/sidrar_4092_salvo.csv'\n\n\nArquivo de texto (ex: .csv)\nO pacote readr permite a escrita de arquivos de texto separados por algum delimitador, como .csv, .tsv e .txt.\nA função write_csv2() premite a escrita de arquivos .csv com separador ;, que é o padrão no Brasil.\n\nwrite_csv2(dados, \"dados_output/sidrar_4092.csv\")\n\nArquivo excel (ex: .xlsx)\nA função write_xlsx() do pacote writexl permite a escrita de arquivos do Excel.\n\nlibrary(writexl)\nwrite_xlsx(dados, \"dados_output/sidrar_4092.csv\")\n\nArquivo binário do R (.rds)\nA função write_rds() do pacote readr permite salvar um objeto do R em um arquivo binário do R, preservando a estrutura dos objetos.\nEsse tipo de arquivo é útil para salvar objetos do R, como dataframes, listas, vetores, sem perder a estrutura do objeto.\n\nwrite_rds(dados, \"dados_output/sidrar_4092.rds\")",
    "crumbs": [
      "Materiais",
      "Importando dados"
    ]
  },
  {
    "objectID": "03_importacao.html#importando-dados-usando-pacotes-de-dados",
    "href": "03_importacao.html#importando-dados-usando-pacotes-de-dados",
    "title": "Importando dados",
    "section": "Importando dados usando pacotes de dados",
    "text": "Importando dados usando pacotes de dados\nExistem pacotes no R que permitem a importação de dados, como por exemplo: sidrar, geobr, censobr, entre outros.\nA parte boa de usar esses pacotes é que eles já possuem funções prontas para importar os dados.\nA parte não-tão-boa é que os pacotes tem funções específicas para importar os dados, e você precisa aprender como usar essas funções. Recomendamos que você leia a documentação do pacote para entender como usar as funções de importação.\nAo longo deste curso, vamos aprender a usar alguns desses pacotes para importar dados específicos.\n\n\n\n\n\n\nImportante\n\n\n\nEsses pacotes, em geral, obtém as informações na internet. Isso pode demorar um pouco.\nRecomendamos que você salve uma cópia local dos dados brutos após o download. Isso evita a necessidade de baixar os dados novamente e facilita o trabalho localmente, principalmente se a conexão com a internet estiver instável.\nAlguns pacotes, como o censobr, apresentam funções preparadas para salvar os dados localmente.\n\n\nPacote {sidrar}\n\nO pacote sidrar permite a importação de dados do Sistema IBGE de Recuperação Automática (SIDRA).\n\nlibrary(sidrar)\n\nPara importar dados do SIDRA, você precisa saber o código da tabela que deseja importar. Uma forma de fazer isso é buscar no site do SIDRA, no IBGE: https://sidra.ibge.gov.br/.\nBuscando tabelas no SIDRA\nOutra forma é buscar por palavras-chave no próprio R, utilizando a função search_sidra():\n\n# Exemplo de busca por palavras-chave: \n# Tabelas com resultados da PNAD Contínua Trimestral\nsearch_sidra(\"PNADCT\")\n\n [1] \"Tabela 5435 - Pessoas de 14 anos ou mais de idade, ocupadas na semana de referência, por grupamento ocupacional no trabalho principal\"                                                                                                                                                             \n [2] \"Tabela 5444 - Rendimento médio mensal real das pessoas de 14 anos ou mais de idade ocupadas na semana de referência com rendimento de trabalho, habitualmente e efetivamente recebidos no trabalho principal, por grupamento ocupacional no trabalho principal\"                                    \n [3] \"Tabela 9440 - Pessoas de 14 anos ou mais de idade ocupadas na semana de referência, exclusive os empregados no setor público e militares, por grupamento ocupacional no trabalho principal e trabalho por meio de plataforma digital de serviço no trabalho principal - Estatísticas experimentais\"\n [4] \"Tabela 9457 - Indicador 8.5.1 - Rendimento médio por hora real das pessoas de 15 anos ou mais de idade ocupadas na semana de referência com rendimento de trabalho, habitualmente recebido em todos os trabalhos, por grupamento ocupacional no trabalho principal\"                                \n [5] \"Tabela 9485 - Percentual de pessoas de 14 anos ou mais de idade ocupadas na semana de referência, exclusive os empregados no setor público e militares, que trabalharam por meio de plataformas de serviços, por grupamento ocupacional no trabalho principal - Estatísticas experimentais\"        \n [6] \"Tabela 9540 - Percentual de pessoas de 14 anos ou mais de idade ocupadas na semana de referência que realizaram teletrabalho no período de referência de 30 dias, por grupamento ocupacional no trabalho principal - Estatísticas experimentais\"                                                   \n [7] \"Tabela 9572 - Percentual de pessoas de 14 anos ou mais de idade ocupadas na semana de referência que realizaram teletrabalho no domicílio no período de referência de 30 dias, por grupamento ocupacional no trabalho principal - Estatísticas experimentais\"                                      \n [8] \"Tabela 9575 - Pessoas de 14 anos ou mais de idade ocupadas na semana de referência que trabalharam no domicílio, por grupamento ocupacional no trabalho principal e frequência do trabalho no domicílio - Estatísticas experimentais\"                                                              \n [9] \"Tabela 9599 - Pessoas de 14 anos ou mais de idade ocupadas na semana de referência, por grupamento ocupacional no trabalho principal e realização de teletrabalho fora do domicílio no período de referência de 30 dias - Estatísticas experimentais\"                                              \n[10] \"Tabela 9603 - Percentual de pessoas de 14 anos ou mais de idade ocupadas na semana de referência que realizaram teletrabalho fora do domicílio no período de referência de 30 dias, por grupamento ocupacional no trabalho principal - Estatísticas experimentais\"                                 \n[11] \"Tabela 9617 - Pessoas de 14 anos ou mais de idade ocupadas na semana de referência, por grupamento ocupacional no trabalho principal e realização de teletrabalho no período de referência de 30 dias - Estatísticas experimentais\"                                                                \n[12] \"Tabela 9624 - Pessoas de 14 anos ou mais de idade ocupadas na semana de referência, por grupamento ocupacional no trabalho principal e realização de teletrabalho no domicílio no período de referência de 30 dias - Estatísticas experimentais\"                                                   \n\n\nNeste curso, utilizaremos na maioria das aulas a Tabela 4092 - Pessoas de 14 anos ou mais de idade, por condição em relação à força de trabalho e condição e ocupação, proveniente da Pesquisa Nacional por Amostra de Domicílios Contínua Trimestral (PNADC/T).\nBuscando informações sobre a tabela\nSabendo o código da tabela, você pode buscar informações sobre a tabela com a função info_sidra().\n\ninfo_4092 &lt;- info_sidra(\"4092\")\n\nO resultado dessa função é uma lista, portanto podemos acessar os elementos da lista utilizando o operador $, seguido pelo nome do elemento.\nPrimeiro, podemos ver os nomes dos elementos da lista:\n\nnames(info_4092)\n\n[1] \"table\"              \"period\"             \"variable\"          \n[4] \"classific_category\" \"geo\"               \n\n\nAgora podemos consultar os elementos dessa lista!\nNome da tabela\n\ninfo_4092$table\n\n[1] \"Tabela 4092: Pessoas de 14 anos ou mais de idade, por condição em relação à força de trabalho e condição de ocupação\"\n\n\nPeríodos\nIsso será importante para a importação dos dados, pois podemos informar qual período queremos importar.\n\ninfo_4092$period\n\n[1] \"201201, 201202, 201203, 201204, 201301, 201302, 201303, 201304, 201401, 201402, 201403, 201404, 201501, 201502, 201503, 201504, 201601, 201602, 201603, 201604, 201701, 201702, 201703, 201704, 201801, 201802, 201803, 201804, 201901, 201902, 201903, 201904, 202001, 202002, 202003, 202004, 202101, 202102, 202103, 202104, 202201, 202202, 202203, 202204, 202301, 202302, 202303, 202304, 202401, 202402\"\n\n\nEsses dados estão salvos em um vetor de tamanho um, com textos separados por vírgula. Esse formato não é o ideal para usar na função de importação que veremos a seguir: o melhor é transformar em um vetor, onde cada elemento é um período.\nPodemos fazer isso com a função str_split():\n\nperiodos_disponiveis &lt;- stringr::str_split(info_4092$period, \", \")[[1]]\nperiodos_disponiveis\n\n [1] \"201201\" \"201202\" \"201203\" \"201204\" \"201301\" \"201302\" \"201303\" \"201304\"\n [9] \"201401\" \"201402\" \"201403\" \"201404\" \"201501\" \"201502\" \"201503\" \"201504\"\n[17] \"201601\" \"201602\" \"201603\" \"201604\" \"201701\" \"201702\" \"201703\" \"201704\"\n[25] \"201801\" \"201802\" \"201803\" \"201804\" \"201901\" \"201902\" \"201903\" \"201904\"\n[33] \"202001\" \"202002\" \"202003\" \"202004\" \"202101\" \"202102\" \"202103\" \"202104\"\n[41] \"202201\" \"202202\" \"202203\" \"202204\" \"202301\" \"202302\" \"202303\" \"202304\"\n[49] \"202401\" \"202402\"\n\n\nEsses são os períodos disponíveis para essa tabela no SIDRA.\nVariáveis\nIsso será importante para a importação dos dados, pois podemos informar quais variáveis queremos importar.\n\ninfo_4092$variable\n\n   cod\n1 1641\n2 4087\n3 4104\n4 4105\n                                                                                         desc\n1                                             Pessoas de  anos ou mais de idade (Mil pessoas)\n2                             Coeficiente de variação - Pessoas de  anos ou mais de idade (%)\n3                           Distribuição percentual das pessoas de  anos ou mais de idade (%)\n4 Coeficiente de variação - Distribuição percentual das pessoas de  anos ou mais de idade (%)\n\n\nVariáveis - Categorias\n\ninfo_4092$classific_category\n\n$`c629 = Condição em relação à força de trabalho e condição de ocupação (5):`\n    cod                           desc\n1 32385                          Total\n2 32386              Força de trabalho\n3 32387    Força de trabalho - ocupada\n4 32446 Força de trabalho - desocupada\n5 32447      Fora da força de trabalho\n\n\nNível territorial\nIsso será importante para a importação dos dados, pois precisamos informar qual é o nível territorial a ser usado na importação.\n\ninfo_4092$geo\n\n          cod\n1      Brazil\n2         IRD\n3      Region\n4       State\n5        City\n6 MetroRegion\n                                                                                                                 desc\n1                                                                                                          Brasil (1)\n2 Região Integrada de Desenvolvimento  [1º trimestre 2012 a 1º trimestre 2020, 2º trimestre 2022 a 2º trimestre 2024]\n3                                                                                                   Grande Região (5)\n4                                                                                           Unidade da Federação (27)\n5                           Município  [1º trimestre 2012 a 1º trimestre 2020, 2º trimestre 2022 a 2º trimestre 2024]\n6                Região Metropolitana  [1º trimestre 2012 a 1º trimestre 2020, 2º trimestre 2022 a 2º trimestre 2024]\n\n\nImportando a tabela\nA função get_sidra() do pacote sidrar permite importar dados do SIDRA.\n\ndados_brutos_4092 &lt;- sidrar::get_sidra(\n  # Qual é o código da tabela que vamos usar?\n  x = 4092,\n  # Períodos: trimestres, vamos usar o vetor criado anteriormente\n  period = periodos_disponiveis,\n  # Nível territorial: Dados por UF\n  geo = \"State\"\n)\n\nLembrando que é importante salvar uma cópia local dos dados após o download. Assim, quando você for trabalhar com esses dados, não precisará baixá-los novamente.\n\n# Salvar localmente essa base de dados\nwrite_rds(dados_brutos_4092, \"dados/sidrar_4092_bruto.rds\")\n\n\n# Importando os dados salvos localmente\ndados_brutos_4092 &lt;- read_rds(\"dados/sidrar_4092_bruto.rds\")",
    "crumbs": [
      "Materiais",
      "Importando dados"
    ]
  },
  {
    "objectID": "03_importacao.html#sugestões-de-materiais",
    "href": "03_importacao.html#sugestões-de-materiais",
    "title": "Importando dados",
    "section": "Sugestões de materiais",
    "text": "Sugestões de materiais\n\nLivro R para Ciência de Dados 2ed:\n\nImportação de dados\n\n\nVídeo Como organizar seu banco de dados para análises estatísticas, por Fernanda Peres (30 minutos).",
    "crumbs": [
      "Materiais",
      "Importando dados"
    ]
  },
  {
    "objectID": "01_r_rstudio.html",
    "href": "01_r_rstudio.html",
    "title": "Conhecendo o R e o RStudio",
    "section": "",
    "text": "Aviso\n\n\n\nPágina em construção! Em breve.",
    "crumbs": [
      "Materiais",
      "Conhecendo o R e o RStudio"
    ]
  },
  {
    "objectID": "01_r_rstudio.html#sugestões-de-materiais",
    "href": "01_r_rstudio.html#sugestões-de-materiais",
    "title": "Conhecendo o R e o RStudio",
    "section": "Sugestões de materiais",
    "text": "Sugestões de materiais\n\nLivro R para Ciência de Dados 2ed:\n\nFluxo de Trabalho: básico\nFluxo de Trabalho: scripts\nFluxo de Trabalho: obtendo ajuda",
    "crumbs": [
      "Materiais",
      "Conhecendo o R e o RStudio"
    ]
  }
]