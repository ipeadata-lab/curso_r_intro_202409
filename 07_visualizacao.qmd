---
# Criar visualizações de dados com ggplot2 e ipeaplot
title: "Visualizando dados"
code-annotations: "hover"
---

## Objetivos

Nesta aula:

- Conheceremos o pacote `ggplot2` para visualização de dados

- Aprenderemos a criar diferentes tipos de gráficos como: de dispersão, linha, barra/coluna, entre outros

- Veremos como salvar os gráficos criados

- Exploraremos funções para customizar a aparência dos gráficos

<!-- As perguntas que buscaremos explorar são: -->

<!-- - Como a taxa de desocupação dos estados tem variado ao longo do tempo? -->

<!-- - Atualmente (para o trimestre mais recente), quais são os estados com as maiores taxas de desocupação? -->


Nesta aula, utilizaremos principalmente os pacotes `{ggplot2}` e `{dplyr}`. Vamos carregá-los:

```{r}
#| message: false
library(ggplot2) # <1>
library(dplyr) # <2>
```
1. Pacote para visualização de dados
2. Pacote para transformação de dados



## Importando dados

Nesta aula, utilizaremos a tabela preparada na [aula sobre transformação de dados](05_transformacao): `"dados_output/sidra_4092_arrumado.rds"`.

::: {.callout-important collapse="true"}

### Expanda para fazer download da base de dados

Caso não tenha o arquivo da tabela que utilizaremos, você pode baixar [aqui](https://github.com/ipeadata-lab/curso_r_intro_202409/raw/refs/heads/main/dados_output/sidra_4092_arrumado.rds), e copiar o arquivo para a pasta `dados_output` do seu projeto.

Outra opção é executar o código abaixo:

```{r}
#| eval: false
download.file(
  url = "https://github.com/ipeadata-lab/curso_r_intro_202409/raw/refs/heads/main/dados_output/sidra_4092_arrumado.rds",  # <1>
  destfile = "dados_output/sidra_4092_arrumado.rds", # <2>
  mode = "wb" # <3>
  )
```
1. URL que desejamos baixar
2. Caminho onde queremos baixar o arquivo (diretório + nome do arquivo + extensão do arquivo)
3. Configuração que evita corromper arquivos binários.
:::

Vamos carregar a base de dados com a função `read_rds()`:

```{r}
#| message: false
dados <- readr::read_rds("dados_output/sidra_4092_arrumado.rds") # <1>
glimpse(dados) # <2>
```
1. Importando os dados
2. Espiando a tabela: quantas colunas tem? quantas linhas? quais são as variáveis?

Vamos criar também um objeto contendo apenas aos dados referentes ao trimestre mais recente, para usar em alguns exemplos:

```{r}
dados_tri_recente <- dados |>  
  filter(trimestre_inicio == max(trimestre_inicio)) # <1>
```
1. Filtrando os dados para o trimestre mais recente


## O que é o ggplot2?

O `ggplot2` é o principal pacote para criação de gráficos em R. Ele é baseado na [gramática de gráficos](https://link.springer.com/book/10.1007/0-387-28695-0), uma teoria que apresenta uma forma de descrever os componentes de um gráfico. 

O `ggplot2` faz parte do [tidyverse](https://www.tidyverse.org/).


## Vocabulário do ggplot2

A gramática de gráficos é composta por alguns elementos, sendo os seguintes principais para iniciar:

- **Dados**: um data frame que contém os dados que serão apresentados

- ***Aesthetics* (atributos estéticos)**: mapeamento dos dados para propriedades visuais do gráfico, como eixos, cor, forma e tamanho

- **Geometrias**: formas geométricas que representam os dados, como pontos, linhas e barras.

Vamos fazer um exemplo simples, explorando cada um desses elementos. Para iniciar o gráfico, podemos informar os dados para a função `ggplot()`:


```{r}
#| label: exemplo-ggplot2-1
#| code-annotations: below
dados_tri_recente |>
  ggplot()
```

A função `ggplot()` cria um objeto gráfico vazio. Para informar quais são as variáveis que serão mapeadas nos eixos `x` e `y`, utilizamos a função `aes()`:

```{r}
#| label: exemplo-ggplot2-2
#| code-annotations: below
dados_tri_recente |>
  ggplot() + 
  aes(x = perc_desocupacao, y = uf)
```
O gráfico criado apresenta os eixos, e os valores possíveis. Porém ainda não tem nenhuma geometria para representar os dados. Para adicionar uma geometria ao gráfico, utilizamos funções da família `geom_*`. Nesse caso, vamos utilizar a função `geom_col()` para criar um gráfico de colunas:

```{r}
#| label: exemplo-ggplot2-3
#| code-annotations: below
dados_tri_recente |> # <1>
  ggplot() + # <2>
  aes(x = perc_desocupacao, y = uf) + # <3>
  geom_col() # <4>
```
1. **Dados:** dados que serão utilizados
2. `ggplot()`: função para iniciar o gráfico
3. ***Aesthetics* (atributos estéticos)**: informando quais variáveis serão utilizadas nos eixos x e y
4. **Geometria do gráfico:** informando que faremos um gráfico de colunas

::: callout-tip
**Atenção:** Observe que a cada linha de código, adicionamos um `+` para adicionar um novo elemento ao gráfico. 

A partir da função `ggplot()`, sempre utilizamos `+` para adicionar novos elementos ao gráfico.
:::

## Criando gráficos exploratórios

Vamos criar alguns gráficos exploratórios com os dados de desocupação por trimestre e por estado. 

Gráficos exploratórios são utilizados para entender melhor os dados, identificar padrões e tendências, e verificar a presença de outliers. Neste momento, não estamos preocupados com a estética do gráfico, mas sim com a interpretação dos dados.

Falaremos como [customizar os gráficos mais adiante](#customizando-gr%C3%A1ficos).

### Tipos de gráficos

#### Gráficos de dispersão

Vamos começar criando um gráfico de dispersão (conhecido também como gráfico de pontos). Para isso, utilizaremos a função `ggplot()` e a função `geom_point()`.

O gráfico de dispersão é utilizado para visualizar a relação entre duas variáveis quantitativas.

```{r}
dados |>
  filter(uf_sigla == "BA") |>
  ggplot() +
  aes(x = trimestre_inicio, y = perc_desocupacao) +
  geom_point()
```

#### Gráficos de linha

Gráficos de linha são muito utilizados para representar uma variável ao longo do tempo. A função de geometria utilizada é a `geom_line()`.

Vamos criar um gráfico de linha para visualizar a evolução da taxa de desocupação ao longo dos trimestres para apenas um estado:

```{r}
#| label: exemplo-ggplot2-linha
dados |> 
  filter(uf_sigla == "BA") |> 
  ggplot() + 
  aes(x = trimestre_inicio, y = perc_desocupacao) + 
  geom_line()
```
E se quisermos ver para todos os estados? Nesse caso, é importante usar um argumento adicional na função `aes()`, o `group`, para que o `ggplot2` saiba que queremos uma linha para cada estado.

```{r}
dados |> 
  ggplot() + 
  aes(x = trimestre_inicio, y = perc_desocupacao) + 
  geom_line(aes(group = uf))
```





#### Gráficos de barras/colunas

Para os gráficos de barras/colunas, podemos utilizar duas funções: `geom_bar()` e `geom_col()`. A diferença entre elas é que `geom_bar()` é utilizada quando queremos contar a frequência de uma variável categórica, enquanto `geom_col()` é utilizada quando queremos visualizar uma variável numérica.


Vamos criar um gráfico de colunas para visualizar a taxa de desocupação dos estados no trimestre mais recente. Como já temos a coluna com o valor numérico que queremos visualizar (`perc_desocupacao`), utilizaremos a função `geom_col()`:

```{r}
#| label: exemplo-ggplot2-geom-col
dados_tri_recente |> 
  ggplot() + 
  aes(y = uf, x = perc_desocupacao) + 
  geom_col()
```
A função `geom_bar()` é utilizada para representar **contagens**. Vamos responder a seguinte pergunta de exemplo: quantas vezes cada estado apresentou uma taxa de desocupação maior ou igual à 20%? Para isso, precisamos filtrar os dados **antes** de criar o gráfico, e a função `geom_bar()` será utilizada para contar a frequência de cada estado. Os estados que não aparecerem no gráfico é porque não tiveram nenhuma taxa de desocupação maior ou igual à 20%, no período que temos dados.

```{r}
#| label: exemplo-ggplot2-geom-bar
dados |> 
  filter(perc_desocupacao >= 20) |>
  ggplot() + 
  aes(x = uf) + 
  geom_bar()
```




#### Gráfico de histograma

O histograma é um gráfico que mostra a distribuição de uma variável numérica. A função de geometria utilizada é a `geom_histogram()`.

Podemos visualizar a distribuição da variável `perc_desocupacao`, considerando todos os trimestres:

```{r}
#| label: exemplo-ggplot2-histogram
dados |> 
  ggplot() + 
  aes(x = perc_desocupacao) + 
  geom_histogram(binwidth = 1)
```

Outro tipo de gráfico que pode ser utilizado para visualizar a distribuição de uma variável numérica é o gráfico de densidade. A função de geometria utilizada é a `geom_density()`.

```{r}
#| label: exemplo-ggplot2-density
dados |> 
  ggplot() + 
  aes(x = perc_desocupacao) + 
  geom_density()
```


#### Gráficos de caixa (*boxplot*)

O gráfico de caixa[^1] (mais conhecido como *boxplot*) é utilizado para visualizar a distribuição de uma variável numérica. Esse é um tipo de gráfico que não é muito comum vermos no dia-a-dia, mas é muito usado em pesquisas e análises estatísticas.

Este gráfico apresenta informações como a mediana, quartis, valores mínimos e máximos, e possíveis outliers.

Para criar um boxplot, utilizaremos a função de geometria `geom_boxplot()`

[^1]: Caso queira saber mais sobre o gráfico de caixa / *boxplot*, [recomendo a leitura deste texto escrito pela Fernanda Peres, sobre como interpretar o boxplot](https://fernandafperes.com.br/blog/interpretacao-boxplot/).



```{r}
#| label: exemplo-ggplot2-boxplot
dados |> 
  ggplot() + 
  aes(y = regiao, x = perc_desocupacao) + 
  geom_boxplot()
```


### Gráficos por subgrupos

#### Subgrupos por Cor

Podemos adicionar mais uma variável ao gráfico, utilizando a cor para representá-la. Para isso, utilizamos os argumentos `fill` ou `color` dentro da função `aes()`:

   - `fill`: preenche a área com a cor. Útil para gráficos de barras e colunas, por exemplo.
   - `color`: adiciona a cor ao contorno. Útil para gráficos de linhas e pontos, por exemplo.

Vamos ver um exemplo de gráfico de colunas apresentado anteriormente, com preenchimento (`fill`) por região:

```{r}
#| label: exemplo-ggplot2-fill
dados_tri_recente |>
  ggplot() + 
  aes(x = perc_desocupacao, y = uf) + 
  geom_col(aes(fill = regiao)) # <1>
```
1. Adicionando a cor de preenchimento utilizando a coluna `regiao`, com o argumento `fill`. Isso precisa estar **DENTRO** do `aes()`.

Vamos ver um exemplo de gráfico de linhas apresentado anteriormente, usando a cor para representar o período que consideramos como pandemia (`color`):

```{r}
#| label: exemplo-ggplot2-linha-color
dados |> 
  filter(uf_sigla == "BA") |> # <1>
  mutate(periodo_pandemia = as.character(periodo_pandemia)) |>
  ggplot() + 
  aes(x = trimestre_inicio, y = perc_desocupacao) + 
  geom_line(aes(color = periodo_pandemia, group = "none")) # <2>
```
1. Filtrando dados para representar apenas a Bahia.
2. Adicionando a cor da linha utilizando a coluna `periodo_pandemia`, com o argumento `color`. Isso precisa estar **DENTRO** do `aes()`.

#### Subgrupos por Facetas (*facet*)

As facetas (ou *facet*) são utilizadas para dividir o gráfico em subgráficos, com base nos valores de uma ou duas variáveis categóricas. 

Existem duas funções principais para criar facetas: `facet_wrap()` ou `facet_grid()`.

A função `facet_wrap()` cria uma faceta para cada categoria da variável: 

```{r}
#| label: exemplo-ggplot2-facet-wrap
dados |> 
  ggplot() + 
  aes(x = trimestre_inicio, y = perc_desocupacao) + 
  geom_line(aes(group = uf)) + 
  facet_wrap(~regiao) # <1>
```
1. Adicionando a função `facet_wrap()` para criar um gráfico para cada categoria da variável `regiao`. 

Veja que o gráfico é dividido em 5 subgráficos, um para cada região do Brasil. Os valores dos eixos `x` e `y` são os mesmos para todos os subgráficos, possibilitando a comparação entre eles.


Já a função `facet_grid()` cria um gráfico para cada combinação de categorias de duas variáveis.

```{r}
#| label: exemplo-ggplot2-facet-grid
dados |> 
  ggplot() + 
  aes(y = perc_desocupacao) + 
  geom_boxplot() + 
  facet_grid(regiao ~ periodo_pandemia) # <1>
```
1. Adicionando a função `facet_grid()` para criar um gráfico para cada combinação de categorias das variáveis `regiao` e `periodo_pandemia`.


### Revisão

A partir dos exemplos apresentados, podemos listar alguns pontos importantes sobre o `ggplot2`:

- A função `ggplot()` cria um objeto gráfico vazio

- Podemos usar o pipe (`%>%` ou `|>`) para encadear as funções **até** a função `ggplot()`.

- A partir da função `ggplot()`, não usamos mais o pipe (`%>%` ou `|>`), e sim o `+`.

- A função `aes()` define o mapeamento estético (aesthetics mapping) entre as colunas da base de dados (variáveis) e os elementos visuais do gráfico (eixo, posição, cor, tamanho, etc).

- Os atributos estéticos (`aes`) `x` e `y` representam os eixos `x` e `y` do gráfico.

- Para adicionar uma geometria ao gráfico, usamos alguma função da família `geom_*`.

- Podemos usar mais do que uma geometria no mesmo gráfico, e a ordem importa!


## Customizando gráficos

Em breve!


### Títulos e rótulos

Em breve!

### Escalas

Em breve!


### Temas
Em breve!

<!-- falar sobre mudanças de layout com ggthemes e ipeaplot -->

### Ordenando as colunas

## Salvando os gráficos

Podemos salvar o gráfico em um arquivo, para utilizá-lo posteriormente. 
Para isso, criamos um objeto contendo o gráfico que queremos salvar, e utilizamos a função `ggsave()`.

A função `ggsave()` salva o gráfico em um arquivo, e apresenta dois argumentos principais:

  - `filename`: nome do arquivo onde o gráfico será salvo
  
  - `plot`: objeto contendo o gráfico que será salvo
  
Essa função também apresenta alguns argumentos para customizar como o gráfico será salvo, como:

  - `width`: largura do gráfico
  
  - `height`: altura do gráfico
  
  - `units`: unidade de medida para a largura e altura do gráfico
  
  - `dpi`: resolução do gráfico (quanto maior o valor, melhor a qualidade da imagem)

Vamos reproduzir o gráfico apresentado na seção [Gráficos de caixa (*boxplot*)](#gr%C3%A1ficos-de-caixa-boxplot), e salvar o gráfico em um objeto (usando a atribuição `<-`):

```{r}
#| label: boxplot-exemplo
boxplot_exemplo <- dados |> 
  ggplot() +  
  aes(y = regiao, x = perc_desocupacao) + 
  geom_boxplot()

boxplot_exemplo
```

Agora podemos salvar o gráfico em um arquivo, utilizando a função `ggsave()`:

```{r}
ggsave( # <1>
  filename = "graficos/boxplot_exemplo.png", # <2>
  plot = boxplot_exemplo, # <3>
  width = 10, # <4>
  height = 8, # <5> 
  dpi = 300 # <6>
)
```
1. Função para salvar o gráfico.
2. Nome do arquivo onde o gráfico será salvo.
3. Objeto contendo o gráfico que será salvo.
4. Largura do gráfico.
5. Altura do gráfico.
6. Resolução do gráfico.

Podemos verificar se o gráfico foi salvo corretamente, utilizando a função `file.exists()`:

```{r}
file.exists("graficos/boxplot_exemplo.png")
```


## Preparação dos dados

Os exemplos que utilizamos mostram um padrão no uso do `ggplot2`: a base de dados é passada para a função `ggplot()`, definimos quais variáveis serão mapeadas com a função `aes()`, e adicionamos uma (ou mais) geometria ao gráfico.

Porém, algo que pode ser trabalhoso é preparar os dados para o gráfico. Nos exemplos que fizemos anteriormente, utilizamos uma tabela já preparada. 

No entanto, em muitos casos, precisamos preparar os dados antes de criar o gráfico. Neste caso, muitas funções já vistas em aulas anteriores serão úteis (como `filter()`, `select()`, `mutate()`, `group_by()`, `summarise()`, `pivot_longer()`, `pivot_wider()`, entre outras). Caso necessário, consulte as aulas [Transformando dados](05_transformacao.qmd) e [Análise exploratória de dados](06_analise_exploratoria.qmd).

Em [Exemplo prático: Visualização](07_visualizacao_exemplo.qmd), é apresentado um exemplo prático de visualização de dados, onde é feita a preparação dos dados antes de criar o gráfico.

## Sugestões de exercícios

###  Criando gráficos exploratórios

1. Observe o gráfico abaixo, criado com o objeto `dados_tri_recente`, e responda:
   - Quais são as variáveis mapeadas nos eixos x e y?
   - Qual é a geometria utilizada?
   - Existe algum outro atributo estético mapeado no gráfico?
   
```{r}
#| label: exercicio-exploratoria-1
#| echo: false
dados_tri_recente |> 
  mutate(
    percentual_forca_de_trabalho_ocupada = mil_pessoas_forca_de_trabalho_ocupada / mil_pessoas_total * 100,
    uf = forcats::fct_reorder(uf, percentual_forca_de_trabalho_ocupada)
  ) |> 
  ggplot() + 
  aes(x = percentual_forca_de_trabalho_ocupada, y = uf) + 
  geom_col(aes(fill = regiao)) +
  theme_light()
```
  
2. Observe os gráficos abaixo, e tente identificar qual é o problema em cada um deles. Sugira uma solução para corrigir o problema.

```{r}
#| label: exercicio-exploratoria-2

dados_tri_recente |>
  ggplot() + 
  aes(x = perc_desocupacao, y = uf) + 
  geom_col(aes(fill = "regiao"))
```



### Customizando gráficos

Em breve!

## Sugestões de materiais

- Livro [R para Ciência de Dados 2ed](https://cienciadedatos.github.io/pt-r4ds/):
  - [Visualização de dados](https://cienciadedatos.github.io/pt-r4ds/data-visualize.html)
  - [Vsualizar](https://cienciadedatos.github.io/pt-r4ds/visualize.html)
  - [Visualizar: Camadas](https://cienciadedatos.github.io/pt-r4ds/layers.html)
  - [Visualizar: Análise exploratória de dados](https://cienciadedatos.github.io/pt-r4ds/EDA.html)
  - [Visualizar: Comunicação](https://cienciadedatos.github.io/pt-r4ds/communication.html)
  
  

- Livro: [Metodologia de Pesquisa Jurimétrica](https://livro.abj.org.br/):
  - [Capítulo 4 - Visualização](https://livro.abj.org.br/04-visualizacao.html)
  
  
  
### Extras: Curiosidades e Referências


- [Grammar of Graphics](https://link.springer.com/book/10.1007/0-387-28695-0) - livro de Leland Wilkinson, cuja teoria é a base do `ggplot2`  

- [ggplot2: Elegant Graphics for Data Analysis](https://ggplot2-book.org/) - livro de Hadley Wickham, criador do `ggplot2`, Danielle Navarro e Thomas Lin Pedersen (em inglês)