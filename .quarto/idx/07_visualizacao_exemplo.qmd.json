{"title":"Exemplo prático: Visualização","markdown":{"yaml":{"title":"Exemplo prático: Visualização","subtitle":"Gráfico de colunas com proporção de pessoas por categoria de ocupação em cada estado","code-annotations":"hover"},"headingText":"Objetivo","containsRefs":false,"markdown":"\n\n\nNesse exemplo, o objetivo é criar um gráfico de colunas para visualizar a proporção de pessoas por categoria de ocupação para cada estado, em um trimestre específico (nesse caso, utilizaremos os dados do trimestre mais recente)\n\nPara isso, precisamos calcular a proporção de pessoas por categoria de ocupação, em cada estado. Depois, representaremos esses valores em um gráfico de colunas.\n\nEsse é o gráfico que queremos criar:\n\n![](graficos/grafico_ipeaplot.png)\n\n## Pacotes necessários\n\n```{r}\n#| message: false\nlibrary(ggplot2) # <1>\nlibrary(dplyr) # <2>\nlibrary(ipeaplot) # <3>\n```\n1.  Pacote para visualização de dados\n2.  Pacote para transformação de dados\n3.  Pacote para o padrão Ipea\n\n## Importando os dados\n\n::: {.callout-important collapse=\"true\"}\n### Expanda para fazer download da base de dados\n\nCaso não tenha o arquivo da tabela que utilizaremos, você pode baixar [aqui](https://github.com/ipeadata-lab/curso_r_intro_202409/raw/refs/heads/main/dados_output/sidra_4092_arrumado.rds), e copiar o arquivo para a pasta `dados_output` do seu projeto.\n\nOutra opção é executar o código abaixo:\n\n```{r}\n#| eval: false\ndownload.file(\n  url = \"https://github.com/ipeadata-lab/curso_r_intro_202409/raw/refs/heads/main/dados_output/sidra_4092_arrumado.rds\",  # <1>\n  destfile = \"dados_output/sidra_4092_arrumado.rds\", # <2>\n  mode = \"wb\" # <3>\n  )\n```\n1.  URL que desejamos baixar\n2.  Caminho onde queremos baixar o arquivo (diretório + nome do arquivo + extensão do arquivo)\n3.  Configuração que evita corromper arquivos binários.\n:::\n\n```{r}\n#| message: false\ndados <- readr::read_rds(\"dados_output/sidra_4092_arrumado.rds\")\n\ndados_tri_recente <- dados |>  \n  filter(trimestre_inicio == max(trimestre_inicio)) # <1>\n```\n1.  Filtrando os dados para o trimestre mais recente\n\n## Preparando os dados\n\nÉ importante entender as categorias de ocupação que temos disponíveis na base de dados, se não podemos correr o risco de contar valores mais de uma vez:\n\n![](images/07_categorias_ocupacao.png)\n\nPortanto, para obter o total, precisaremos apenas das seguinte categorias de ocupação:\n\n-   `mil_pessoas_forca_de_trabalho_ocupada`: Pessoas dentro da força de trabalho, que estão ocupadas.\n\n-   `mil_pessoas_forca_de_trabalho_desocupada`: Pessoas dentro da força de trabalho, que estão desocupadas.\n\n-   `mil_pessoas_fora_da_forca_de_trabalho`: Pessoas fora da força de trabalho.\n\nPrimeiro, vamos selecionar as colunas que utilizaremos para esse gráfico, para facilitar a preparação dos dados:\n\n```{r}\ndados_selecionados <- dados_tri_recente |> # <1>\n  select( # <2>\n    regiao,\n    uf,\n    trimestre,\n    mil_pessoas_forca_de_trabalho_ocupada,\n    mil_pessoas_forca_de_trabalho_desocupada,\n    mil_pessoas_fora_da_forca_de_trabalho,\n  ) # <2>\n\nhead(dados_selecionados) # <3>\n```\n\n1.  Utilizando os dados já filtrados para o trimestre mais recente.\n2.  Selecionando as colunas que utilizaremos.\n3.  Primeiras linhas da tabela resultante\n\nPara calcular a proporção de pessoas por categoria de ocupação em cada estado, precisamos usar os valores que estão nas colunas `mil_pessoas_forca_de_trabalho_ocupada`, `mil_pessoas_forca_de_trabalho_desocupada` e `mil_pessoas_fora_da_forca_de_trabalho`. Porém, para fazer isso, precisamos transformar a tabela em formato longo.\n\nVamos transformar a tabela em formato longo, utilizando a função `pivot_longer()`:\n\n```{r}\ndados_longos <- dados_selecionados |> # <1>\n  tidyr::pivot_longer( # <2>\n    cols = tidyselect::starts_with(\"mil_pessoas\"), # <3>\n    names_to = \"categoria\", # <4>\n    values_to = \"mil_pessoas\", # <5>\n    names_prefix = \"mil_pessoas_\" # <6>\n  ) #<2>\n\nhead(dados_longos) # <7>\n```\n\n1.  Utilizando os dados já filtrados para o trimestre mais recente, e selecionados com colunas relevantes\n2.  Vamos transformar em formato longo para facilitar a criação do gráfico.\n3.  Selecionando as colunas que começam com \"mil_pessoas\" para transformar em formato longo.\n4.  Nome da nova coluna que conterá as categorias.\n5.  Nome da nova coluna que conterá os valores.\n6.  Prefixo que será removido do nome das colunas.\n7.  Primeiras linhas da tabela resultante\n\nAgora, podemos calcular a proporção de pessoas por categoria de ocupação em cada estado:\n\n```{r}\ndados_preparados <- dados_longos |> \n  group_by(regiao, uf, trimestre) |> # <1>\n  mutate(perc = mil_pessoas / sum(mil_pessoas) * 100) |>  # <2>\n  ungroup() # <3>\n\nhead(dados_preparados) # <4>\n```\n\n1.  Agrupando os dados por região, estado e trimestre.\n2.  Calculando a proporção de pessoas por grupo (categoria).\n3.  Removendo o agrupamento dos dados.\n4.  Primeiras linhas da tabela resultante\n\n## Criando o gráfico exploratório\n\nCom os dados preparados, podemos criar o gráfico de colunas. Vamos primeiro criar um gráfico simples:\n\n```{r}\n#| label: exemplo-ggplot2-perc-exploratorio\ndados_preparados |>  # <1>\n  ggplot(aes(fill = categoria)) + # <2>\n  aes(y = uf, x = perc) + # <3>\n  geom_col() # <4>\n```\n1.  Vamos utilizar os dados preparados nas etapas anteriores.\n2.  Iniciando um gráfico. Informando que queremos usar o `fill` (preenchimento) usando a categoria de ocupação.\n3.  Definindo o eixo y como os estados e o eixo x como a proporção.\n4.  Adicionando as colunas ao gráfico\n\nÉ interessante melhorar as legendas dos eixos, pois estão no formato adequado para nomes de colunas (mas não a melhor forma de apresentar em um gráfico). **Isso requer trabalhar novamente na preparação dos dados!**\n\nVamos criar uma nova coluna com os nomes das categorias de ocupação por extenso:\n\n```{r}\ndados_grafico_1 <- dados_preparados |> \n  mutate( \n    categoria_label = case_match( # <1>\n      categoria,\n      \"forca_de_trabalho_ocupada\" ~ \"Força de trabalho ocupada\",\n      \"forca_de_trabalho_desocupada\" ~ \"Força de trabalho desocupada\",\n      \"fora_da_forca_de_trabalho\" ~ \"Fora da força de trabalho\"\n    ) # <1>\n  ) \n```\n1.  Usando a função `case_math()` (similar ao `case_when()`), criamos uma nova coluna com os nomes das categorias de ocupação por extenso.\n\n\n```{r}\n#| label: exemplo-2-ggplot2-perc-exploratorio\ndados_grafico_1 |> \n  ggplot(aes(fill = categoria_label)) + # <1>\n  aes(y = uf, x = perc) + \n  geom_col()\n```\n1. Preenchendo a cor usando a nova coluna com os nomes das categorias de ocupação por extenso (`fill = categoria_label`).\n\nEstá um pouco melhor! Outra coisa interessante é reordenar os estados de acordo com a variável `perc` (proporção de pessoas em cada categoria). Isso fará com que o gráfico fique com aspecto \"ordenado\".\n\n```{r}\ndados_grafico_2 <- dados_grafico_1 |> \n  mutate( \n    categoria_fct = factor( # <1>\n      categoria_label,\n      levels = c(\n        \"Fora da força de trabalho\",\n        \"Força de trabalho ocupada\",\n        \"Força de trabalho desocupada\"\n      )), # <1>\n    uf_fct = forcats::fct_reorder(uf, perc, min) # <2>\n    ) \n```\n1.  Transformando as categorias em fator, para que sigam a ordem que definimos ao serem apresentadas (e não em ordem alfabética).\n2.  Reordenamos a coluna dos estados (`uf`) de acordo com a proporção de pessoas em cada categoria (`perc`), usando a função `min()` para ordenar usando os valores mínimos. Isso faz com que o gráfico fique com aspecto \"ordenado\".\n\n\n\n```{r}\n#| label: exemplo-3-ggplot2-perc-exploratorio\ndados_grafico_2 |> \n  ggplot(aes(fill = categoria_fct)) + # <1>\n  aes(y = uf_fct, x = perc) + # <2>\n  geom_col()\n```\n1. O preenchimento da cor é feito com a nova coluna de categorias de ocupação em fator (*factor*).\n2. Usamos a coluna `uf_fct` no eixo `y`.\n\n\n\n\n## Customizando o gráfico\n\nVamos adicionar títulos, legendas e personalizar as cores do gráfico:\n\n```{r}\n#| label: exemplo-ggplot2-perc-customizado\n\ntrimestre_referencia <- unique(dados_grafico_2$trimestre) # <1>\n\ngrafico_proporcao <- dados_grafico_2 |> \n  ggplot(aes(fill = categoria_fct)) +  # <2>\n  aes(x = uf_fct, y = perc) +  # <3>\n  geom_col() + # <4>\n  scale_fill_manual(values = c( \"#5b5e62\", \"gray\", \"#cc1e00\")) + # <5>\n  labs( # <6>\n    y = \"Proporção (%)\",\n    x = \"Estado\",\n    title = \"Proporção por categoria de ocupação em cada estado\",\n    subtitle = paste0(\"Período: \", trimestre_referencia),\n    fill = \"Categoria\",\n    caption = \"Dados da PNAD Contínua Trimestral - IBGE, obtidos no SIDRA.\"\n  ) + # <6>\n   theme_minimal()  + # <7>\n  coord_flip() # <8>\n\ngrafico_proporcao\n```\n1.  Criando um objeto com o trimestre de referência. Isso será utilizado para adicionar informações ao gráfico.\n2. Iniciando um gráfico, e incluindo o `aes()` com `fill` dentro da função `ggplot()`.\n3. Definindo o eixo `x` como os estados e o eixo `y` como a proporção.\n4. Adicionando a geometria de colunas ao gráfico, com a cor de preenchimento de acordo com a categoria de ocupação.\n5.  Usamos uma escala de cores manual, onde podemos definir as cores usadas para cada categoria.\n6.  Adicionando títulos e legendas ao gráfico.\n7.  Aplicando um tema ao gráfico.\n8.  Usando a função `coord_flip()` para inverter os eixos x e y. \n\nPodemos salvar o gráfico em um arquivo, para utilizá-lo posteriormente:\n\n```{r}\nggsave( # <1>\n  filename = \"graficos/grafico_proporcao_categoria_ocupacao.png\", # <2>\n  plot = grafico_proporcao, # <3>\n  width = 10, # <4>\n  height = 8, # <5> \n  dpi = 300 # <6>\n)\n```\n1.  Função para salvar o gráfico.\n2.  Nome do arquivo onde o gráfico será salvo.\n3.  Objeto contendo o gráfico que será salvo.\n4.  Largura do gráfico.\n5.  Altura do gráfico.\n6.  Resolução do gráfico.\n\n## `{ipeaplot}`: criando graficos no padrão editorial do Ipea\n\nO [`{ipeaplot}`](https://github.com/ipeadata-lab/ipeaplot) é um pacote em R desenvolvido pela equipe da Coordenação de Ciência de Dados (COCD). O objetivo é facilitar a padronização de gráficos e figuras seguindo as linhas editoriais do Ipea.\n\nEle foi desenhado para ser usado em conjunto com o pacote [{ggplot2}](https://ggplot2.tidyverse.org/). Atualmente, o `{ipeaplot}` inclui três conjuntos de funções principais:\n\n1.  `theme_ipea()`: para formatação de elementos estilísticos da figura (eixos, fontes, linhas, grid, etc.);\n2.  `scale_color_ipea()` e `scale_fill_ipea()`: selecionam paleta de cores dentro de um conjunto de opções utilizadas pelo Ipea;\n3.  `save_pdf()` e `save_eps()`: salvam a figura com a extensão `.pdf` ou `.eps`, formatos possíveis de serem \"modificados\" durante o processo de edição das publicações pelo Editorial do Ipea.\n\nTivemos como inspiração outras instituições que criaram ferramentas parecidas como a UNHCR [{unhcrthemes}](https://github.com/unhcr-dataviz/unhcrthemes) e a BBC [{bbplot}](https://github.com/bbc/bbplot).\n\n### Demonstração do pacote\n\nVamos primeiro instalar e chamar o pacote:\n\n```{r}\n#| eval: false\n\ninstall.packages(\"ipeaplot\") # <1>\nlibrary(\"ipeaplot\") # <2>\n```\n1.  Instalar o `{ipeaplot}`.\n2.  Chamar o pacote.\n\nAgora aproveitaremos o exemplo anterior para demonstrar o funcionamnto do `{ipeaplot}`. Vamos começar a modificar a figura, usando o `{ipeaplot}` para ajustar ao \"padrão do Ipea\". Primeiro usamos a função `theme_ipea()` no lugar de `theme_minimal()`.\n\n```{r}\n#| label: grafico-ipeaplot-theme\n\ngrafico_ipeaplot <- grafico_proporcao + \n  theme_ipea() + # <1>\n  coord_flip(expand = FALSE) # <2>\n\ngrafico_ipeaplot\n```\n\n1.  Adotando o tema padrão do Ipea\n2.  Retirando espaços em branco. O argumento `expand = FALSE` limita o gráfico à área dos dados (sem espaços em branco antes do valor 0 e depois do valor 100).\n\nApesar de sutis, temos alterações nas bordas, nas fontes e nas legendas da figura. Em seguida, vamos mudar a escala de cores para adotar o padrão \"Texto para Discussão do Ipea\" (paleta de cores azul):\n\n```{r}\n#| message: false\n#| label: grafico-ipeaplot-paleta\n\ngrafico_ipeaplot <- grafico_ipeaplot +\n  scale_fill_ipea(palette = 'Blue') # <1>\n\ngrafico_ipeaplot\n```\n\n1.  Usando a paleta de cores azul (\"TD\") \n\nAí está, temos uma figura pronta para publicarmos nosso primeiro \"Texto para Discussão\" usando o R. Na verdade, nem tão pronta assim, pois o Ipea usa em títulos e legendas a família de fontes *Frutiger*. Como não é uma família com licença livre não podemos distribuir no `{ipeaplot}`. Porém, com o passo a seguir, o Editorial poderá, ao receber seu material para publicação, fazer os ajustes necessários na fonte dos títulos e legendas.\n\n```{r}\n#| eval: false\n\nsave_eps(grafico_ipeaplot, # <1>\n         file.name = \"graficos/grafico_ipeaplot.eps\",\n         width = 10,\n         height = 8,\n         dpi = 300\n) # <1>\n\nsave_pdf(grafico_ipeaplot, # <2>\n         file.name = \"graficos/grafico_ipeaplot.pdf\",\n         width = 10,\n         height = 8,\n         dpi = 300\n) # <2>\n```\n1. Salvando o gráfico em formato `.eps`\n2. Salvando o gráfico em formato `.pdf`\n\n```{r}\n#| eval: true\n#| echo: false\nggsave(\n  filename = \"graficos/grafico_ipeaplot.png\",\n  plot = grafico_ipeaplot,\n  width = 10, \n  height = 8, \n  dpi = 300\n)\n```\n\nPor trás das cortinas, as duas funções acima são semelhantes à `ggsave()`, usada anteriormente nesta aula. Porém, os atributos passados garantem que os gráficos serão salvos em formatos \"editáveis\" (`.eps` ou `.pdf`).\n\n## Sugestões de materiais\n\n- [Cookbook Ipeaplot](https://ipeadata-lab.github.io/ipeaplot/articles/cookbook.html)\n\n","srcMarkdownNoYaml":"\n\n## Objetivo\n\nNesse exemplo, o objetivo é criar um gráfico de colunas para visualizar a proporção de pessoas por categoria de ocupação para cada estado, em um trimestre específico (nesse caso, utilizaremos os dados do trimestre mais recente)\n\nPara isso, precisamos calcular a proporção de pessoas por categoria de ocupação, em cada estado. Depois, representaremos esses valores em um gráfico de colunas.\n\nEsse é o gráfico que queremos criar:\n\n![](graficos/grafico_ipeaplot.png)\n\n## Pacotes necessários\n\n```{r}\n#| message: false\nlibrary(ggplot2) # <1>\nlibrary(dplyr) # <2>\nlibrary(ipeaplot) # <3>\n```\n1.  Pacote para visualização de dados\n2.  Pacote para transformação de dados\n3.  Pacote para o padrão Ipea\n\n## Importando os dados\n\n::: {.callout-important collapse=\"true\"}\n### Expanda para fazer download da base de dados\n\nCaso não tenha o arquivo da tabela que utilizaremos, você pode baixar [aqui](https://github.com/ipeadata-lab/curso_r_intro_202409/raw/refs/heads/main/dados_output/sidra_4092_arrumado.rds), e copiar o arquivo para a pasta `dados_output` do seu projeto.\n\nOutra opção é executar o código abaixo:\n\n```{r}\n#| eval: false\ndownload.file(\n  url = \"https://github.com/ipeadata-lab/curso_r_intro_202409/raw/refs/heads/main/dados_output/sidra_4092_arrumado.rds\",  # <1>\n  destfile = \"dados_output/sidra_4092_arrumado.rds\", # <2>\n  mode = \"wb\" # <3>\n  )\n```\n1.  URL que desejamos baixar\n2.  Caminho onde queremos baixar o arquivo (diretório + nome do arquivo + extensão do arquivo)\n3.  Configuração que evita corromper arquivos binários.\n:::\n\n```{r}\n#| message: false\ndados <- readr::read_rds(\"dados_output/sidra_4092_arrumado.rds\")\n\ndados_tri_recente <- dados |>  \n  filter(trimestre_inicio == max(trimestre_inicio)) # <1>\n```\n1.  Filtrando os dados para o trimestre mais recente\n\n## Preparando os dados\n\nÉ importante entender as categorias de ocupação que temos disponíveis na base de dados, se não podemos correr o risco de contar valores mais de uma vez:\n\n![](images/07_categorias_ocupacao.png)\n\nPortanto, para obter o total, precisaremos apenas das seguinte categorias de ocupação:\n\n-   `mil_pessoas_forca_de_trabalho_ocupada`: Pessoas dentro da força de trabalho, que estão ocupadas.\n\n-   `mil_pessoas_forca_de_trabalho_desocupada`: Pessoas dentro da força de trabalho, que estão desocupadas.\n\n-   `mil_pessoas_fora_da_forca_de_trabalho`: Pessoas fora da força de trabalho.\n\nPrimeiro, vamos selecionar as colunas que utilizaremos para esse gráfico, para facilitar a preparação dos dados:\n\n```{r}\ndados_selecionados <- dados_tri_recente |> # <1>\n  select( # <2>\n    regiao,\n    uf,\n    trimestre,\n    mil_pessoas_forca_de_trabalho_ocupada,\n    mil_pessoas_forca_de_trabalho_desocupada,\n    mil_pessoas_fora_da_forca_de_trabalho,\n  ) # <2>\n\nhead(dados_selecionados) # <3>\n```\n\n1.  Utilizando os dados já filtrados para o trimestre mais recente.\n2.  Selecionando as colunas que utilizaremos.\n3.  Primeiras linhas da tabela resultante\n\nPara calcular a proporção de pessoas por categoria de ocupação em cada estado, precisamos usar os valores que estão nas colunas `mil_pessoas_forca_de_trabalho_ocupada`, `mil_pessoas_forca_de_trabalho_desocupada` e `mil_pessoas_fora_da_forca_de_trabalho`. Porém, para fazer isso, precisamos transformar a tabela em formato longo.\n\nVamos transformar a tabela em formato longo, utilizando a função `pivot_longer()`:\n\n```{r}\ndados_longos <- dados_selecionados |> # <1>\n  tidyr::pivot_longer( # <2>\n    cols = tidyselect::starts_with(\"mil_pessoas\"), # <3>\n    names_to = \"categoria\", # <4>\n    values_to = \"mil_pessoas\", # <5>\n    names_prefix = \"mil_pessoas_\" # <6>\n  ) #<2>\n\nhead(dados_longos) # <7>\n```\n\n1.  Utilizando os dados já filtrados para o trimestre mais recente, e selecionados com colunas relevantes\n2.  Vamos transformar em formato longo para facilitar a criação do gráfico.\n3.  Selecionando as colunas que começam com \"mil_pessoas\" para transformar em formato longo.\n4.  Nome da nova coluna que conterá as categorias.\n5.  Nome da nova coluna que conterá os valores.\n6.  Prefixo que será removido do nome das colunas.\n7.  Primeiras linhas da tabela resultante\n\nAgora, podemos calcular a proporção de pessoas por categoria de ocupação em cada estado:\n\n```{r}\ndados_preparados <- dados_longos |> \n  group_by(regiao, uf, trimestre) |> # <1>\n  mutate(perc = mil_pessoas / sum(mil_pessoas) * 100) |>  # <2>\n  ungroup() # <3>\n\nhead(dados_preparados) # <4>\n```\n\n1.  Agrupando os dados por região, estado e trimestre.\n2.  Calculando a proporção de pessoas por grupo (categoria).\n3.  Removendo o agrupamento dos dados.\n4.  Primeiras linhas da tabela resultante\n\n## Criando o gráfico exploratório\n\nCom os dados preparados, podemos criar o gráfico de colunas. Vamos primeiro criar um gráfico simples:\n\n```{r}\n#| label: exemplo-ggplot2-perc-exploratorio\ndados_preparados |>  # <1>\n  ggplot(aes(fill = categoria)) + # <2>\n  aes(y = uf, x = perc) + # <3>\n  geom_col() # <4>\n```\n1.  Vamos utilizar os dados preparados nas etapas anteriores.\n2.  Iniciando um gráfico. Informando que queremos usar o `fill` (preenchimento) usando a categoria de ocupação.\n3.  Definindo o eixo y como os estados e o eixo x como a proporção.\n4.  Adicionando as colunas ao gráfico\n\nÉ interessante melhorar as legendas dos eixos, pois estão no formato adequado para nomes de colunas (mas não a melhor forma de apresentar em um gráfico). **Isso requer trabalhar novamente na preparação dos dados!**\n\nVamos criar uma nova coluna com os nomes das categorias de ocupação por extenso:\n\n```{r}\ndados_grafico_1 <- dados_preparados |> \n  mutate( \n    categoria_label = case_match( # <1>\n      categoria,\n      \"forca_de_trabalho_ocupada\" ~ \"Força de trabalho ocupada\",\n      \"forca_de_trabalho_desocupada\" ~ \"Força de trabalho desocupada\",\n      \"fora_da_forca_de_trabalho\" ~ \"Fora da força de trabalho\"\n    ) # <1>\n  ) \n```\n1.  Usando a função `case_math()` (similar ao `case_when()`), criamos uma nova coluna com os nomes das categorias de ocupação por extenso.\n\n\n```{r}\n#| label: exemplo-2-ggplot2-perc-exploratorio\ndados_grafico_1 |> \n  ggplot(aes(fill = categoria_label)) + # <1>\n  aes(y = uf, x = perc) + \n  geom_col()\n```\n1. Preenchendo a cor usando a nova coluna com os nomes das categorias de ocupação por extenso (`fill = categoria_label`).\n\nEstá um pouco melhor! Outra coisa interessante é reordenar os estados de acordo com a variável `perc` (proporção de pessoas em cada categoria). Isso fará com que o gráfico fique com aspecto \"ordenado\".\n\n```{r}\ndados_grafico_2 <- dados_grafico_1 |> \n  mutate( \n    categoria_fct = factor( # <1>\n      categoria_label,\n      levels = c(\n        \"Fora da força de trabalho\",\n        \"Força de trabalho ocupada\",\n        \"Força de trabalho desocupada\"\n      )), # <1>\n    uf_fct = forcats::fct_reorder(uf, perc, min) # <2>\n    ) \n```\n1.  Transformando as categorias em fator, para que sigam a ordem que definimos ao serem apresentadas (e não em ordem alfabética).\n2.  Reordenamos a coluna dos estados (`uf`) de acordo com a proporção de pessoas em cada categoria (`perc`), usando a função `min()` para ordenar usando os valores mínimos. Isso faz com que o gráfico fique com aspecto \"ordenado\".\n\n\n\n```{r}\n#| label: exemplo-3-ggplot2-perc-exploratorio\ndados_grafico_2 |> \n  ggplot(aes(fill = categoria_fct)) + # <1>\n  aes(y = uf_fct, x = perc) + # <2>\n  geom_col()\n```\n1. O preenchimento da cor é feito com a nova coluna de categorias de ocupação em fator (*factor*).\n2. Usamos a coluna `uf_fct` no eixo `y`.\n\n\n\n\n## Customizando o gráfico\n\nVamos adicionar títulos, legendas e personalizar as cores do gráfico:\n\n```{r}\n#| label: exemplo-ggplot2-perc-customizado\n\ntrimestre_referencia <- unique(dados_grafico_2$trimestre) # <1>\n\ngrafico_proporcao <- dados_grafico_2 |> \n  ggplot(aes(fill = categoria_fct)) +  # <2>\n  aes(x = uf_fct, y = perc) +  # <3>\n  geom_col() + # <4>\n  scale_fill_manual(values = c( \"#5b5e62\", \"gray\", \"#cc1e00\")) + # <5>\n  labs( # <6>\n    y = \"Proporção (%)\",\n    x = \"Estado\",\n    title = \"Proporção por categoria de ocupação em cada estado\",\n    subtitle = paste0(\"Período: \", trimestre_referencia),\n    fill = \"Categoria\",\n    caption = \"Dados da PNAD Contínua Trimestral - IBGE, obtidos no SIDRA.\"\n  ) + # <6>\n   theme_minimal()  + # <7>\n  coord_flip() # <8>\n\ngrafico_proporcao\n```\n1.  Criando um objeto com o trimestre de referência. Isso será utilizado para adicionar informações ao gráfico.\n2. Iniciando um gráfico, e incluindo o `aes()` com `fill` dentro da função `ggplot()`.\n3. Definindo o eixo `x` como os estados e o eixo `y` como a proporção.\n4. Adicionando a geometria de colunas ao gráfico, com a cor de preenchimento de acordo com a categoria de ocupação.\n5.  Usamos uma escala de cores manual, onde podemos definir as cores usadas para cada categoria.\n6.  Adicionando títulos e legendas ao gráfico.\n7.  Aplicando um tema ao gráfico.\n8.  Usando a função `coord_flip()` para inverter os eixos x e y. \n\nPodemos salvar o gráfico em um arquivo, para utilizá-lo posteriormente:\n\n```{r}\nggsave( # <1>\n  filename = \"graficos/grafico_proporcao_categoria_ocupacao.png\", # <2>\n  plot = grafico_proporcao, # <3>\n  width = 10, # <4>\n  height = 8, # <5> \n  dpi = 300 # <6>\n)\n```\n1.  Função para salvar o gráfico.\n2.  Nome do arquivo onde o gráfico será salvo.\n3.  Objeto contendo o gráfico que será salvo.\n4.  Largura do gráfico.\n5.  Altura do gráfico.\n6.  Resolução do gráfico.\n\n## `{ipeaplot}`: criando graficos no padrão editorial do Ipea\n\nO [`{ipeaplot}`](https://github.com/ipeadata-lab/ipeaplot) é um pacote em R desenvolvido pela equipe da Coordenação de Ciência de Dados (COCD). O objetivo é facilitar a padronização de gráficos e figuras seguindo as linhas editoriais do Ipea.\n\nEle foi desenhado para ser usado em conjunto com o pacote [{ggplot2}](https://ggplot2.tidyverse.org/). Atualmente, o `{ipeaplot}` inclui três conjuntos de funções principais:\n\n1.  `theme_ipea()`: para formatação de elementos estilísticos da figura (eixos, fontes, linhas, grid, etc.);\n2.  `scale_color_ipea()` e `scale_fill_ipea()`: selecionam paleta de cores dentro de um conjunto de opções utilizadas pelo Ipea;\n3.  `save_pdf()` e `save_eps()`: salvam a figura com a extensão `.pdf` ou `.eps`, formatos possíveis de serem \"modificados\" durante o processo de edição das publicações pelo Editorial do Ipea.\n\nTivemos como inspiração outras instituições que criaram ferramentas parecidas como a UNHCR [{unhcrthemes}](https://github.com/unhcr-dataviz/unhcrthemes) e a BBC [{bbplot}](https://github.com/bbc/bbplot).\n\n### Demonstração do pacote\n\nVamos primeiro instalar e chamar o pacote:\n\n```{r}\n#| eval: false\n\ninstall.packages(\"ipeaplot\") # <1>\nlibrary(\"ipeaplot\") # <2>\n```\n1.  Instalar o `{ipeaplot}`.\n2.  Chamar o pacote.\n\nAgora aproveitaremos o exemplo anterior para demonstrar o funcionamnto do `{ipeaplot}`. Vamos começar a modificar a figura, usando o `{ipeaplot}` para ajustar ao \"padrão do Ipea\". Primeiro usamos a função `theme_ipea()` no lugar de `theme_minimal()`.\n\n```{r}\n#| label: grafico-ipeaplot-theme\n\ngrafico_ipeaplot <- grafico_proporcao + \n  theme_ipea() + # <1>\n  coord_flip(expand = FALSE) # <2>\n\ngrafico_ipeaplot\n```\n\n1.  Adotando o tema padrão do Ipea\n2.  Retirando espaços em branco. O argumento `expand = FALSE` limita o gráfico à área dos dados (sem espaços em branco antes do valor 0 e depois do valor 100).\n\nApesar de sutis, temos alterações nas bordas, nas fontes e nas legendas da figura. Em seguida, vamos mudar a escala de cores para adotar o padrão \"Texto para Discussão do Ipea\" (paleta de cores azul):\n\n```{r}\n#| message: false\n#| label: grafico-ipeaplot-paleta\n\ngrafico_ipeaplot <- grafico_ipeaplot +\n  scale_fill_ipea(palette = 'Blue') # <1>\n\ngrafico_ipeaplot\n```\n\n1.  Usando a paleta de cores azul (\"TD\") \n\nAí está, temos uma figura pronta para publicarmos nosso primeiro \"Texto para Discussão\" usando o R. Na verdade, nem tão pronta assim, pois o Ipea usa em títulos e legendas a família de fontes *Frutiger*. Como não é uma família com licença livre não podemos distribuir no `{ipeaplot}`. Porém, com o passo a seguir, o Editorial poderá, ao receber seu material para publicação, fazer os ajustes necessários na fonte dos títulos e legendas.\n\n```{r}\n#| eval: false\n\nsave_eps(grafico_ipeaplot, # <1>\n         file.name = \"graficos/grafico_ipeaplot.eps\",\n         width = 10,\n         height = 8,\n         dpi = 300\n) # <1>\n\nsave_pdf(grafico_ipeaplot, # <2>\n         file.name = \"graficos/grafico_ipeaplot.pdf\",\n         width = 10,\n         height = 8,\n         dpi = 300\n) # <2>\n```\n1. Salvando o gráfico em formato `.eps`\n2. Salvando o gráfico em formato `.pdf`\n\n```{r}\n#| eval: true\n#| echo: false\nggsave(\n  filename = \"graficos/grafico_ipeaplot.png\",\n  plot = grafico_ipeaplot,\n  width = 10, \n  height = 8, \n  dpi = 300\n)\n```\n\nPor trás das cortinas, as duas funções acima são semelhantes à `ggsave()`, usada anteriormente nesta aula. Porém, os atributos passados garantem que os gráficos serão salvos em formatos \"editáveis\" (`.eps` ou `.pdf`).\n\n## Sugestões de materiais\n\n- [Cookbook Ipeaplot](https://ipeadata-lab.github.io/ipeaplot/articles/cookbook.html)\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"toc-depth":5,"output-file":"07_visualizacao_exemplo.html"},"language":{"toc-title-document":"Índice","toc-title-website":"Nesta página","related-formats-title":"Outros formatos","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Fonte","other-links-title":"Outros Links","code-links-title":"Ligações de código","launch-dev-container-title":"Iniciar Dev Container","launch-binder-title":"Iniciar Binder","article-notebook-label":"Caderno do Artigo","notebook-preview-download":"Baixar Caderno","notebook-preview-download-src":"Descarregar código fonte","notebook-preview-back":"Voltar ao Artigo","manuscript-meca-bundle":"Arquivo MECA","section-title-abstract":"Resumo","section-title-appendices":"Apêndices","section-title-footnotes":"Notas de rodapé","section-title-references":"Referências","section-title-reuse":"Reuso","section-title-copyright":"Direito autoral","section-title-citation":"Citação","appendix-attribution-cite-as":"Por favor, cite este trabalho como:","appendix-attribution-bibtex":"BibTeX","appendix-view-license":"Ver Licença","title-block-author-single":"Autor","title-block-author-plural":"Autores","title-block-affiliation-single":"Afiliação","title-block-affiliation-plural":"Afiliações","title-block-published":"Data de Publicação","title-block-modified":"Data de Modificação","title-block-keywords":"Palavras-chave","callout-tip-title":"Dica","callout-note-title":"Nota","callout-warning-title":"Aviso","callout-important-title":"Importante","callout-caution-title":"Cuidado","code-summary":"Código","code-tools-menu-caption":"Código","code-tools-show-all-code":"Mostrar o código","code-tools-hide-all-code":"Esconder o código","code-tools-view-source":"Ver o código fonte","code-tools-source-code":"Código fonte","tools-share":"Share","tools-download":"Download","code-line":"Linha","code-lines":"Linhas","copy-button-tooltip":"Copiar para a área de transferência","copy-button-tooltip-success":"Copiada","repo-action-links-edit":"Editar essa página","repo-action-links-source":"Ver o código fonte","repo-action-links-issue":"Criar uma issue","back-to-top":"De volta ao topo","search-no-results-text":"Nenhum resultado","search-matching-documents-text":"documentos correspondentes","search-copy-link-title":"Copiar link para a busca","search-hide-matches-text":"Esconder correspondências adicionais","search-more-match-text":"mais correspondência neste documento","search-more-matches-text":"mais correspondências neste documento","search-clear-button-title":"Limpar","search-text-placeholder":"","search-detached-cancel-button-title":"Cancelar","search-submit-button-title":"Enviar","search-label":"Procurar","toggle-section":"Alternar seção","toggle-sidebar":"Alternar barra lateral","toggle-dark-mode":"Alternar modo escuro","toggle-reader-mode":"Alternar modo de leitor","toggle-navigation":"Alternar de navegação","crossref-fig-title":"Figura","crossref-tbl-title":"Tabela","crossref-lst-title":"Listagem","crossref-thm-title":"Teorema","crossref-lem-title":"Lema","crossref-cor-title":"Corolário","crossref-prp-title":"Proposição","crossref-cnj-title":"Conjetura","crossref-def-title":"Definição","crossref-exm-title":"Exemplo","crossref-exr-title":"Exercício","crossref-ch-prefix":"Capítulo","crossref-apx-prefix":"Apêndice","crossref-sec-prefix":"Seção","crossref-eq-prefix":"Equação","crossref-lof-title":"Lista de Figuras","crossref-lot-title":"Lista de Tabelas","crossref-lol-title":"Lista de Listagens","environment-proof-title":"Comprovação","environment-remark-title":"Comentário","environment-solution-title":"Solução","listing-page-order-by":"Ordenar por","listing-page-order-by-default":"Pré-selecionado","listing-page-order-by-date-asc":"Mais velho","listing-page-order-by-date-desc":"O mais novo","listing-page-order-by-number-desc":"Decrescente","listing-page-order-by-number-asc":"Crescente","listing-page-field-date":"Data","listing-page-field-title":"Título","listing-page-field-description":"Descrição","listing-page-field-author":"Autor","listing-page-field-filename":"Nome do arquivo","listing-page-field-filemodified":"Arquivo modificado","listing-page-field-subtitle":"Subtítulo","listing-page-field-readingtime":"Tempo de leitura","listing-page-field-wordcount":"Contagem de Palavras","listing-page-field-categories":"Categorias","listing-page-minutes-compact":"{0} minutos","listing-page-category-all":"Tudo","listing-page-no-matches":"Nenhum item correspondente","listing-page-words":"{0} palavras","listing-page-filter":"Filtro","draft":"Rascunho"},"metadata":{"lang":"pt","fig-responsive":true,"quarto-version":"1.5.57","page-navigation":true,"page-footer":{"border":true,"left":"Copyright 2024, Beatriz Milz e IPEA/COCD","right":[{"icon":"github","href":"https://github.com/ipeadata-lab/curso_r_intro_202409s"}]},"bibliography":["references.bib"],"editor":"source","theme":"cosmo","title":"Exemplo prático: Visualização","subtitle":"Gráfico de colunas com proporção de pessoas por categoria de ocupação em cada estado","code-annotations":"hover"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}