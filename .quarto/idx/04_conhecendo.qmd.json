{"title":"Conhecendo a base de dados","markdown":{"yaml":{"title":"Conhecendo a base de dados","code-annotations":"hover"},"headingText":"Estrutura da base de dados","containsRefs":false,"markdown":"\n\n::: callout\nConceitos prévios importantes:\n\n-   [Como importar bases de dados?](03_importacao.qmd)\n\n-   [Tipos de variáveis](02_conceitos_basicos_r.qmd)\n\n-   [Valores faltantes (`NA`)](02_conceitos_basicos_r.qmd)\n:::\n\nNesta seção, vamos conhecer algumas funções que nos ajudarão a conhecer um pouco mais sobre a base de dados que estamos trabalhando.\n\nEssa etapa é importante para:\n\n-   Entender qual é a estrutura da base de dados: quais são as variáveis presentes, o que cada linha representa, entre outros.\n\n-   Descobrir se há valores faltantes, em quais variáveis eles estão presentes e em que proporção.\n\n-   Identificar o que é necessário fazer para arrumar a base de dados (isso vamos explorar posteriormente).\n\n::: callout-tip\n**Sugestão:** Ao longo deste capítulo, sugerimos que tente identificar o que é necessário para arrumar essa base de dados.\n:::\n\nVamos começar importando a base de dados que utilizaremos:\n\n```{r}\n#| message: false\ndados <- readr::read_rds(\"dados/sidrar_4092_bruto.rds\")\n```\n\n\nVamos começar conhecendo a estrutura da base de dados. Para isso, existem algumas funções para saber o número de colunas e linhas, os nomes das colunas, entre outras informações. Algumas delas apresentam as mesmas informações, mas de formas diferentes.\n\n```{r}\n# Número de colunas\nncol(dados)\n\n# Número de linhas\nnrow(dados)\n\n# Número de linhas e colunas\ndim(dados)\n\n# Nomes das colunas\nnames(dados)\n```\n\nA função `glimpse()` do pacote `{dplyr}` apresenta informações como: número de linhas, número de colunas, nome e tipo de cada coluna, e os primeiros valores de cada coluna. Porém o texto resultante dependerá da largura do *Console*:\n\n```{r}\n#| eval: false\ndplyr::glimpse(dados)\n```\n\n![Captura de tela: Resultado da função glimpse()](images/04_glimpse.png){fig-align=\"center\"}\n\n### View\n\nUma outra função que é interessante é a `View()`. Ela nos permite visualizar a base de dados em uma nova janela, em formato de tabela. Porém, é importante tomar cuidado ao usá-la com bases de dados grandes, pois pode travar o RStudio dependendo.\n\n::: callout-tip\n**Observação:** Se você estiver com o `{tidyverse}` carregado, a função `view()` (com o v minúsculo) também está disponível. Ela é uma versão mais moderna da função `View()`, e tem algumas funcionalidades a mais. Para os fins dessa aula, podemos usar qualquer uma das duas.\n:::\n\nOutra forma de acessar o View é clicando na linha do objeto no painel *Environment* do RStudio:\n\n![Captura de tela: Onde clicamos para abrir o View](images/04_environment.png){fig-align=\"center\"}\n\n```{r}\n#| eval: false\nView(dados)\n```\n\n![Gravação da tela - Usando o View](images/04_view.gif){fig-align=\"center\"}\n\n## Sumário das variáveis\n\nEm funções apresentadas anteriormente, como a `names()`, já conseguimos ter uma ideia de quais são as variáveis da base de dados. Mas é interessante ter mais informações, como: tipo de variável, quantidade de valores faltantes, entre outros.\n\nNessa etapa, conheceremos algumas funções que nos ajudarão a ter essas informações. Algumas apresentam as mesmas informações, mas de formas diferentes. Portanto, é interessante conhecer algumas delas, e escolher qual é a que melhor atende às nossas necessidades.\n\n::: callout-warning\nCuidado: as funções apresentadas a seguir calculam algumas estatísticas descritivas (como a média, mediana, desvio padrão, valor mínimo, valor máximo, entre outras) em variáveis numéricas. Porém, ainda não \"arrumamos\" a base de dados (faremos isso no capítulo [Transformando dados](05_transformacao.qmd)), e os dados ainda não estão adequados para esses cálculos.\n\nAlguns exemplos:\n\n-   Várias colunas numéricas representam o código de uma categoria, e não faz sentido calcular a média desses códigos.\n\n-   A variável `valor` está relacionada com a variável `Unidade de Medida`. Neste momento, a tabela apresenta valores com diferentes unidades de medida, e não faz sentido calcular a média desses valores.\n\n\nFalaremos sobre o cálculo de estatísticas descritivas no capítulo [Análise Exploratória de Dados](06_analise_exploratoria.qmd).\n:::\n\n### summary()\n\nA função `summary()` é uma função do R base (ou seja, não precisamos carregar nenhum pacote para usá-la), e ela nos dá um sumário das variáveis da base de dados.\n\n```{r}\nsummary(dados)\n```\n\n### skimr::skim()\n\nO pacote `{skimr}` tem uma função chamada `skim()` que nos dá um sumário das variáveis da base de dados.\n\nÉ interesante salvar o resultado da função em um objeto, para que possamos acessar as informações posteriormente, em formato de tabela.\n\n```{r}\nskim_dados <- skimr::skim(dados)\n```\n\nA seguir, podemos ver o resultado da função `skim()`:\n\n```{r}\nskim_dados\n```\n\n\nO resultado da função `skim()` é dividido em duas partes:\n\n-   *Data summary*: informações gerais sobre a base de dados, como: nome do objeto, número de linhas, número de colunas, quantas colunas temos em cada tipo, e se a base está agrupada por alguma variável[^1].\n\n-   **Variable type**: para cada tipo de variável presente na base de dados, temos informações como:\n\n    -   `skim_variable`: nome da variável.\n    -   `n_missing`: número de valores faltantes.\n    -   `complete_rate`: proporção de valores não faltantes (está relacionada com a `n_missing`).\n    -   Outras colunas específicas segundo o tipo de variável.\n\n[^1]: Ainda não abordamos o conceito de grupos, então isso ficará mais claro posteriormente.\n\nA seguir, estão as informações que a função `skim()` retorna para os tipos de variáveis mais frequentes:\n\n-   *character* (dados de texto):\n    -   `min`: número mínimo de caracteres.\n    -   `max`: número máximo de caracteres.\n    -   `empty`: número de linhas contendo valores vazios (um valor vazio é um valor que contém apenas `\"\"`).\n    -   `n_unique`: número de valores únicos.\n    -   `whitespace`: número de linhas contendo apenas espaços em branco.\n-   *numeric* (dados numéricos):\n    -   `mean`: média.\n    -   `sd`: desvio padrão.\n    -   `p0`: valor mínimo.\n    -   `p25`: primeiro quartil.\n    -   `p50`: mediana.\n    -   `p75`: terceiro quartil.\n    -   `p100`: valor máximo.\n    -   `hist`: histograma dos valores.\n-   *date* (datas):\n    -   `min`: data mínima.\n    -   `max`: data máxima.\n    -   `median`: data mediana.\n    -   `n_unique`: número de datas únicas.\n-   *factor* (dados categóricos):\n    -   `ordered`: os níveis do fator estão ordenados?\n    -   `n_unique`: número de valores únicos do fator.\n    -   `top_counts`: os valores mais frequentes do fator.\n-   *logical* (dados booleanos):\n    -   `mean`: média dos valores, considerando que `TRUE` é 1 e `FALSE` é 0.\n    -   `count`: contagem dos valores `TRUE` e `FALSE`.\n\n\n## Valores faltantes (`NA`)\n\nA presença de valores faltantes é algo comum em bases de dados. Eles podem ocorrer por diversos motivos, como: não temos a informação, erros de digitação, entre outros.\n\nÉ importante identificar onde estão esses valores, para que possamos nos atentar em análises futuras.\n\nExistem algumas funções que nos ajudam a identificar a presença de valores faltantes na base de dados. O pacote `{naniar}` apresenta funções úteis para isso: a função `gg_miss_var()` cria uma visualição apresentando o nome das variáveis da base de dados, assim como a quantidade de valores faltantes em cada uma delas.\n\n```{r}\n#| label: exemplo-naniar-absoluto\n#| message: false\n\nnaniar::gg_miss_var(dados) # <1>\n```\n1. Valores absolutos\n\n```{r}\n#| label: exemplo-naniar-relativo\n#| message: false\n\nnaniar::gg_miss_var(dados, show_pct = TRUE) # <1>\n```\n1. Valores relativos\n\n\n## Retornar algumas linhas da base de dados\n\nEm situações onde trabalharmos com dados que possuem um número de linhas muito grande, não podemos utilizar a função `View()` para ver a tabela inteira.\n\nNesse caso, podemos ser interessante usar funções que retornam apenas algumas linhas da base de dados, como `head()`, `tail()`, `slice_sample()`, entre outras.\n\nAntes de usá-las, vamos adicionar uma coluna que represente o número da linha, para que seja mais fácil identificar as linhas que estamos selecionando:\n\n```{r}\ndados_com_n_linha <- tibble::rowid_to_column(dados, \"n_linha\") #<1>\n```\n1. A função `rowid_to_column()` adiciona uma coluna com o número da linha.\n\n\nAgora podemos usar as funções para retornar algumas linhas da base de dados. Observe os resultados apresentados, e os valores na coluna `n_linha`:\n\n```{r}\n# Exibindo as primeiras linhas\nhead(dados_com_n_linha)\n\n# Exibindo as últimas linhas\ntail(dados_com_n_linha)\n\n# \"Sorteando\" linhas\ndplyr::slice_sample(dados_com_n_linha, n = 5)\n```\n\n## Conhecendo os valores únicos de uma coluna\n\nPara variáveis categóricas ou de texto, é interessante conhecer os valores únicos presentes.\n\nPara acessar uma coluna específica, utilize o `$`. Elas retornarão como vetores, e poderemos usar as funções que já conhecemos. Ex: `dados$ano`.\n\n::: callout-tip\nDica: após escrever o `nome_do_dataframe$`, aperte `tab` para que o RStudio faça sugestões de colunas da base.\n:::\n\nA função `unique()` retorna os valores únicos de um vetor. Exemplo:\n\n```{r}\nunique(dados$`Unidade de Medida`)\n```\n\nNote que, nesse caso, foi necessário colocar uma crase para identificar o nome da coluna. Isso acontece porque a coluna contém espaços em branco e, por isso, o R entenderia que o nome da coluna é `Unidade` e `de` e `Medida`. Com a crase, o R entende que o nome da coluna é `Unidade de Medida`.\n\n::: callout-tip\nÉ uma boa prática evitar espaços em branco e caracteres especiais nos nomes das colunas. Em [Transformando dados > Padronizar nome das colunas](05_transformacao.html#padronizar-nome-das-colunas) apresentaremos uma forma de fazer isso!\n:::\n\nOutra forma de extrair o conteúdo de uma coluna é utilizando o operador `[[`:\n\n```{r}\nunique(dados[[\"Unidade de Medida\"]])\n```\n\nO resultado é o mesmo, mas dessa forma utilizamos o nome da coluna em texto (string) para acessar a coluna.\n\n## Sugestão de exercícios\n\nNesses exercícios a seguir, vamos utilizar a tabela como [deputadas e deputados que já estiveram em exercício na Câmara dos Deputados](https://dadosabertos.camara.leg.br/swagger/api.html?tab=staticfile#api).\n\n\n```{r}\n#| cache: true\n#| message: false\ndeputados <- readr::read_csv2(\"https://dadosabertos.camara.leg.br/arquivos/deputados/csv/deputados.csv\")\n```\nResponda as perguntas a seguir:\n\n1. Conhecendo a estrutura da base de dados:\n    -   Quantas colunas e linhas temos na base de dados?\n    -   O que cada linha representa?\n    -   Quais são as colunas presentes na colunas?\n    -   Os nomes das colunas estão aceitáveis (por exemplo, sem espaços, acentos, caracteres especiais)?\n    -  Qual é o tipo de cada variável?\n    - Existe alguma variável que deveria ser de outro tipo?\n    \n2. Valores faltantes (*missing values*):\n    -   Em quais variáveis temos valores faltantes?\n    -   Qual é a variável com a maior quantidade de valores faltantes?\n    - O que significa os valores faltantes na coluna `dataFalecimento`?\n    \n3. Conhecendo variáveis com categorias:\n    - Quais são os valores únicos para a variável `siglaSexo`?\n\n\n","srcMarkdownNoYaml":"\n\n::: callout\nConceitos prévios importantes:\n\n-   [Como importar bases de dados?](03_importacao.qmd)\n\n-   [Tipos de variáveis](02_conceitos_basicos_r.qmd)\n\n-   [Valores faltantes (`NA`)](02_conceitos_basicos_r.qmd)\n:::\n\nNesta seção, vamos conhecer algumas funções que nos ajudarão a conhecer um pouco mais sobre a base de dados que estamos trabalhando.\n\nEssa etapa é importante para:\n\n-   Entender qual é a estrutura da base de dados: quais são as variáveis presentes, o que cada linha representa, entre outros.\n\n-   Descobrir se há valores faltantes, em quais variáveis eles estão presentes e em que proporção.\n\n-   Identificar o que é necessário fazer para arrumar a base de dados (isso vamos explorar posteriormente).\n\n::: callout-tip\n**Sugestão:** Ao longo deste capítulo, sugerimos que tente identificar o que é necessário para arrumar essa base de dados.\n:::\n\nVamos começar importando a base de dados que utilizaremos:\n\n```{r}\n#| message: false\ndados <- readr::read_rds(\"dados/sidrar_4092_bruto.rds\")\n```\n\n## Estrutura da base de dados\n\nVamos começar conhecendo a estrutura da base de dados. Para isso, existem algumas funções para saber o número de colunas e linhas, os nomes das colunas, entre outras informações. Algumas delas apresentam as mesmas informações, mas de formas diferentes.\n\n```{r}\n# Número de colunas\nncol(dados)\n\n# Número de linhas\nnrow(dados)\n\n# Número de linhas e colunas\ndim(dados)\n\n# Nomes das colunas\nnames(dados)\n```\n\nA função `glimpse()` do pacote `{dplyr}` apresenta informações como: número de linhas, número de colunas, nome e tipo de cada coluna, e os primeiros valores de cada coluna. Porém o texto resultante dependerá da largura do *Console*:\n\n```{r}\n#| eval: false\ndplyr::glimpse(dados)\n```\n\n![Captura de tela: Resultado da função glimpse()](images/04_glimpse.png){fig-align=\"center\"}\n\n### View\n\nUma outra função que é interessante é a `View()`. Ela nos permite visualizar a base de dados em uma nova janela, em formato de tabela. Porém, é importante tomar cuidado ao usá-la com bases de dados grandes, pois pode travar o RStudio dependendo.\n\n::: callout-tip\n**Observação:** Se você estiver com o `{tidyverse}` carregado, a função `view()` (com o v minúsculo) também está disponível. Ela é uma versão mais moderna da função `View()`, e tem algumas funcionalidades a mais. Para os fins dessa aula, podemos usar qualquer uma das duas.\n:::\n\nOutra forma de acessar o View é clicando na linha do objeto no painel *Environment* do RStudio:\n\n![Captura de tela: Onde clicamos para abrir o View](images/04_environment.png){fig-align=\"center\"}\n\n```{r}\n#| eval: false\nView(dados)\n```\n\n![Gravação da tela - Usando o View](images/04_view.gif){fig-align=\"center\"}\n\n## Sumário das variáveis\n\nEm funções apresentadas anteriormente, como a `names()`, já conseguimos ter uma ideia de quais são as variáveis da base de dados. Mas é interessante ter mais informações, como: tipo de variável, quantidade de valores faltantes, entre outros.\n\nNessa etapa, conheceremos algumas funções que nos ajudarão a ter essas informações. Algumas apresentam as mesmas informações, mas de formas diferentes. Portanto, é interessante conhecer algumas delas, e escolher qual é a que melhor atende às nossas necessidades.\n\n::: callout-warning\nCuidado: as funções apresentadas a seguir calculam algumas estatísticas descritivas (como a média, mediana, desvio padrão, valor mínimo, valor máximo, entre outras) em variáveis numéricas. Porém, ainda não \"arrumamos\" a base de dados (faremos isso no capítulo [Transformando dados](05_transformacao.qmd)), e os dados ainda não estão adequados para esses cálculos.\n\nAlguns exemplos:\n\n-   Várias colunas numéricas representam o código de uma categoria, e não faz sentido calcular a média desses códigos.\n\n-   A variável `valor` está relacionada com a variável `Unidade de Medida`. Neste momento, a tabela apresenta valores com diferentes unidades de medida, e não faz sentido calcular a média desses valores.\n\n\nFalaremos sobre o cálculo de estatísticas descritivas no capítulo [Análise Exploratória de Dados](06_analise_exploratoria.qmd).\n:::\n\n### summary()\n\nA função `summary()` é uma função do R base (ou seja, não precisamos carregar nenhum pacote para usá-la), e ela nos dá um sumário das variáveis da base de dados.\n\n```{r}\nsummary(dados)\n```\n\n### skimr::skim()\n\nO pacote `{skimr}` tem uma função chamada `skim()` que nos dá um sumário das variáveis da base de dados.\n\nÉ interesante salvar o resultado da função em um objeto, para que possamos acessar as informações posteriormente, em formato de tabela.\n\n```{r}\nskim_dados <- skimr::skim(dados)\n```\n\nA seguir, podemos ver o resultado da função `skim()`:\n\n```{r}\nskim_dados\n```\n\n\nO resultado da função `skim()` é dividido em duas partes:\n\n-   *Data summary*: informações gerais sobre a base de dados, como: nome do objeto, número de linhas, número de colunas, quantas colunas temos em cada tipo, e se a base está agrupada por alguma variável[^1].\n\n-   **Variable type**: para cada tipo de variável presente na base de dados, temos informações como:\n\n    -   `skim_variable`: nome da variável.\n    -   `n_missing`: número de valores faltantes.\n    -   `complete_rate`: proporção de valores não faltantes (está relacionada com a `n_missing`).\n    -   Outras colunas específicas segundo o tipo de variável.\n\n[^1]: Ainda não abordamos o conceito de grupos, então isso ficará mais claro posteriormente.\n\nA seguir, estão as informações que a função `skim()` retorna para os tipos de variáveis mais frequentes:\n\n-   *character* (dados de texto):\n    -   `min`: número mínimo de caracteres.\n    -   `max`: número máximo de caracteres.\n    -   `empty`: número de linhas contendo valores vazios (um valor vazio é um valor que contém apenas `\"\"`).\n    -   `n_unique`: número de valores únicos.\n    -   `whitespace`: número de linhas contendo apenas espaços em branco.\n-   *numeric* (dados numéricos):\n    -   `mean`: média.\n    -   `sd`: desvio padrão.\n    -   `p0`: valor mínimo.\n    -   `p25`: primeiro quartil.\n    -   `p50`: mediana.\n    -   `p75`: terceiro quartil.\n    -   `p100`: valor máximo.\n    -   `hist`: histograma dos valores.\n-   *date* (datas):\n    -   `min`: data mínima.\n    -   `max`: data máxima.\n    -   `median`: data mediana.\n    -   `n_unique`: número de datas únicas.\n-   *factor* (dados categóricos):\n    -   `ordered`: os níveis do fator estão ordenados?\n    -   `n_unique`: número de valores únicos do fator.\n    -   `top_counts`: os valores mais frequentes do fator.\n-   *logical* (dados booleanos):\n    -   `mean`: média dos valores, considerando que `TRUE` é 1 e `FALSE` é 0.\n    -   `count`: contagem dos valores `TRUE` e `FALSE`.\n\n\n## Valores faltantes (`NA`)\n\nA presença de valores faltantes é algo comum em bases de dados. Eles podem ocorrer por diversos motivos, como: não temos a informação, erros de digitação, entre outros.\n\nÉ importante identificar onde estão esses valores, para que possamos nos atentar em análises futuras.\n\nExistem algumas funções que nos ajudam a identificar a presença de valores faltantes na base de dados. O pacote `{naniar}` apresenta funções úteis para isso: a função `gg_miss_var()` cria uma visualição apresentando o nome das variáveis da base de dados, assim como a quantidade de valores faltantes em cada uma delas.\n\n```{r}\n#| label: exemplo-naniar-absoluto\n#| message: false\n\nnaniar::gg_miss_var(dados) # <1>\n```\n1. Valores absolutos\n\n```{r}\n#| label: exemplo-naniar-relativo\n#| message: false\n\nnaniar::gg_miss_var(dados, show_pct = TRUE) # <1>\n```\n1. Valores relativos\n\n\n## Retornar algumas linhas da base de dados\n\nEm situações onde trabalharmos com dados que possuem um número de linhas muito grande, não podemos utilizar a função `View()` para ver a tabela inteira.\n\nNesse caso, podemos ser interessante usar funções que retornam apenas algumas linhas da base de dados, como `head()`, `tail()`, `slice_sample()`, entre outras.\n\nAntes de usá-las, vamos adicionar uma coluna que represente o número da linha, para que seja mais fácil identificar as linhas que estamos selecionando:\n\n```{r}\ndados_com_n_linha <- tibble::rowid_to_column(dados, \"n_linha\") #<1>\n```\n1. A função `rowid_to_column()` adiciona uma coluna com o número da linha.\n\n\nAgora podemos usar as funções para retornar algumas linhas da base de dados. Observe os resultados apresentados, e os valores na coluna `n_linha`:\n\n```{r}\n# Exibindo as primeiras linhas\nhead(dados_com_n_linha)\n\n# Exibindo as últimas linhas\ntail(dados_com_n_linha)\n\n# \"Sorteando\" linhas\ndplyr::slice_sample(dados_com_n_linha, n = 5)\n```\n\n## Conhecendo os valores únicos de uma coluna\n\nPara variáveis categóricas ou de texto, é interessante conhecer os valores únicos presentes.\n\nPara acessar uma coluna específica, utilize o `$`. Elas retornarão como vetores, e poderemos usar as funções que já conhecemos. Ex: `dados$ano`.\n\n::: callout-tip\nDica: após escrever o `nome_do_dataframe$`, aperte `tab` para que o RStudio faça sugestões de colunas da base.\n:::\n\nA função `unique()` retorna os valores únicos de um vetor. Exemplo:\n\n```{r}\nunique(dados$`Unidade de Medida`)\n```\n\nNote que, nesse caso, foi necessário colocar uma crase para identificar o nome da coluna. Isso acontece porque a coluna contém espaços em branco e, por isso, o R entenderia que o nome da coluna é `Unidade` e `de` e `Medida`. Com a crase, o R entende que o nome da coluna é `Unidade de Medida`.\n\n::: callout-tip\nÉ uma boa prática evitar espaços em branco e caracteres especiais nos nomes das colunas. Em [Transformando dados > Padronizar nome das colunas](05_transformacao.html#padronizar-nome-das-colunas) apresentaremos uma forma de fazer isso!\n:::\n\nOutra forma de extrair o conteúdo de uma coluna é utilizando o operador `[[`:\n\n```{r}\nunique(dados[[\"Unidade de Medida\"]])\n```\n\nO resultado é o mesmo, mas dessa forma utilizamos o nome da coluna em texto (string) para acessar a coluna.\n\n## Sugestão de exercícios\n\nNesses exercícios a seguir, vamos utilizar a tabela como [deputadas e deputados que já estiveram em exercício na Câmara dos Deputados](https://dadosabertos.camara.leg.br/swagger/api.html?tab=staticfile#api).\n\n\n```{r}\n#| cache: true\n#| message: false\ndeputados <- readr::read_csv2(\"https://dadosabertos.camara.leg.br/arquivos/deputados/csv/deputados.csv\")\n```\nResponda as perguntas a seguir:\n\n1. Conhecendo a estrutura da base de dados:\n    -   Quantas colunas e linhas temos na base de dados?\n    -   O que cada linha representa?\n    -   Quais são as colunas presentes na colunas?\n    -   Os nomes das colunas estão aceitáveis (por exemplo, sem espaços, acentos, caracteres especiais)?\n    -  Qual é o tipo de cada variável?\n    - Existe alguma variável que deveria ser de outro tipo?\n    \n2. Valores faltantes (*missing values*):\n    -   Em quais variáveis temos valores faltantes?\n    -   Qual é a variável com a maior quantidade de valores faltantes?\n    - O que significa os valores faltantes na coluna `dataFalecimento`?\n    \n3. Conhecendo variáveis com categorias:\n    - Quais são os valores únicos para a variável `siglaSexo`?\n\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"toc-depth":5,"output-file":"04_conhecendo.html"},"language":{"toc-title-document":"Índice","toc-title-website":"Nesta página","related-formats-title":"Outros formatos","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Fonte","other-links-title":"Outros Links","code-links-title":"Ligações de código","launch-dev-container-title":"Iniciar Dev Container","launch-binder-title":"Iniciar Binder","article-notebook-label":"Caderno do Artigo","notebook-preview-download":"Baixar Caderno","notebook-preview-download-src":"Descarregar código fonte","notebook-preview-back":"Voltar ao Artigo","manuscript-meca-bundle":"Arquivo MECA","section-title-abstract":"Resumo","section-title-appendices":"Apêndices","section-title-footnotes":"Notas de rodapé","section-title-references":"Referências","section-title-reuse":"Reuso","section-title-copyright":"Direito autoral","section-title-citation":"Citação","appendix-attribution-cite-as":"Por favor, cite este trabalho como:","appendix-attribution-bibtex":"BibTeX","appendix-view-license":"Ver Licença","title-block-author-single":"Autor","title-block-author-plural":"Autores","title-block-affiliation-single":"Afiliação","title-block-affiliation-plural":"Afiliações","title-block-published":"Data de Publicação","title-block-modified":"Data de Modificação","title-block-keywords":"Palavras-chave","callout-tip-title":"Dica","callout-note-title":"Nota","callout-warning-title":"Aviso","callout-important-title":"Importante","callout-caution-title":"Cuidado","code-summary":"Código","code-tools-menu-caption":"Código","code-tools-show-all-code":"Mostrar o código","code-tools-hide-all-code":"Esconder o código","code-tools-view-source":"Ver o código fonte","code-tools-source-code":"Código fonte","tools-share":"Share","tools-download":"Download","code-line":"Linha","code-lines":"Linhas","copy-button-tooltip":"Copiar para a área de transferência","copy-button-tooltip-success":"Copiada","repo-action-links-edit":"Editar essa página","repo-action-links-source":"Ver o código fonte","repo-action-links-issue":"Criar uma issue","back-to-top":"De volta ao topo","search-no-results-text":"Nenhum resultado","search-matching-documents-text":"documentos correspondentes","search-copy-link-title":"Copiar link para a busca","search-hide-matches-text":"Esconder correspondências adicionais","search-more-match-text":"mais correspondência neste documento","search-more-matches-text":"mais correspondências neste documento","search-clear-button-title":"Limpar","search-text-placeholder":"","search-detached-cancel-button-title":"Cancelar","search-submit-button-title":"Enviar","search-label":"Procurar","toggle-section":"Alternar seção","toggle-sidebar":"Alternar barra lateral","toggle-dark-mode":"Alternar modo escuro","toggle-reader-mode":"Alternar modo de leitor","toggle-navigation":"Alternar de navegação","crossref-fig-title":"Figura","crossref-tbl-title":"Tabela","crossref-lst-title":"Listagem","crossref-thm-title":"Teorema","crossref-lem-title":"Lema","crossref-cor-title":"Corolário","crossref-prp-title":"Proposição","crossref-cnj-title":"Conjetura","crossref-def-title":"Definição","crossref-exm-title":"Exemplo","crossref-exr-title":"Exercício","crossref-ch-prefix":"Capítulo","crossref-apx-prefix":"Apêndice","crossref-sec-prefix":"Seção","crossref-eq-prefix":"Equação","crossref-lof-title":"Lista de Figuras","crossref-lot-title":"Lista de Tabelas","crossref-lol-title":"Lista de Listagens","environment-proof-title":"Comprovação","environment-remark-title":"Comentário","environment-solution-title":"Solução","listing-page-order-by":"Ordenar por","listing-page-order-by-default":"Pré-selecionado","listing-page-order-by-date-asc":"Mais velho","listing-page-order-by-date-desc":"O mais novo","listing-page-order-by-number-desc":"Decrescente","listing-page-order-by-number-asc":"Crescente","listing-page-field-date":"Data","listing-page-field-title":"Título","listing-page-field-description":"Descrição","listing-page-field-author":"Autor","listing-page-field-filename":"Nome do arquivo","listing-page-field-filemodified":"Arquivo modificado","listing-page-field-subtitle":"Subtítulo","listing-page-field-readingtime":"Tempo de leitura","listing-page-field-wordcount":"Contagem de Palavras","listing-page-field-categories":"Categorias","listing-page-minutes-compact":"{0} minutos","listing-page-category-all":"Tudo","listing-page-no-matches":"Nenhum item correspondente","listing-page-words":"{0} palavras","listing-page-filter":"Filtro","draft":"Rascunho"},"metadata":{"lang":"pt","fig-responsive":true,"quarto-version":"1.5.57","page-navigation":true,"page-footer":{"border":true,"left":"Copyright 2024, Beatriz Milz e IPEA/COCD","right":[{"icon":"github","href":"https://github.com/ipeadata-lab/curso_r_intro_202409s"}]},"bibliography":["references.bib"],"editor":"source","theme":"cosmo","title":"Conhecendo a base de dados","code-annotations":"hover"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}