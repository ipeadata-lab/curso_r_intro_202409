{"title":"Visualizando dados","markdown":{"yaml":{"title":"Visualizando dados","code-annotations":"hover"},"headingText":"Objetivos","containsRefs":false,"markdown":"\n\n\nNesta aula:\n\n-   Conheceremos o pacote `ggplot2` para visualização de dados\n\n-   Aprenderemos a criar diferentes tipos de gráficos como: de dispersão, linha, barra/coluna, entre outros\n\n-   Veremos como salvar os gráficos criados\n\n-   Exploraremos funções para customizar a aparência dos gráficos\n\nEsse é um exemplo de gráfico que criaremos ao longo da aula:\n\n![](graficos/grafico_customizado.png){fig-align=\"center\" width=\"80%\"}\n\nNesta aula, utilizaremos principalmente os pacotes `{ggplot2}` e `{dplyr}`. Vamos carregá-los:\n\n```{r}\n#| message: false\nlibrary(ggplot2) # <1>\nlibrary(dplyr) # <2>\n```\n\n1.  Pacote para visualização de dados\n2.  Pacote para transformação de dados\n\n## Importando dados\n\nNesta aula, utilizaremos a tabela preparada na [aula sobre transformação de dados](05_transformacao): `\"dados_output/sidra_4092_arrumado.rds\"`.\n\n::: {.callout-important collapse=\"true\"}\n### Expanda para fazer download da base de dados\n\nCaso não tenha o arquivo da tabela que utilizaremos, você pode baixar [aqui](https://github.com/ipeadata-lab/curso_r_intro_202409/raw/refs/heads/main/dados_output/sidra_4092_arrumado.rds), e copiar o arquivo para a pasta `dados_output` do seu projeto.\n\nOutra opção é executar o código abaixo:\n\n```{r}\n#| eval: false\ndownload.file(\n  url = \"https://github.com/ipeadata-lab/curso_r_intro_202409/raw/refs/heads/main/dados_output/sidra_4092_arrumado.rds\",  # <1>\n  destfile = \"dados_output/sidra_4092_arrumado.rds\", # <2>\n  mode = \"wb\" # <3>\n  )\n```\n\n1.  URL que desejamos baixar\n2.  Caminho onde queremos baixar o arquivo (diretório + nome do arquivo + extensão do arquivo)\n3.  Configuração que evita corromper arquivos binários.\n:::\n\nVamos carregar a base de dados com a função `read_rds()`:\n\n```{r}\n#| message: false\ndados <- readr::read_rds(\"dados_output/sidra_4092_arrumado.rds\") # <1>\nglimpse(dados) # <2>\n```\n\n1.  Importando os dados\n2.  Espiando a tabela: quantas colunas tem? quantas linhas? quais são as variáveis?\n\nVamos criar também um objeto contendo apenas aos dados referentes ao trimestre mais recente, para usar em alguns exemplos:\n\n```{r}\ndados_tri_recente <- dados |>  \n  filter(trimestre_inicio == max(trimestre_inicio)) # <1>\n```\n\n1.  Filtrando os dados para o trimestre mais recente\n\n## O que é o ggplot2?\n\nO `ggplot2` é o principal pacote para criação de gráficos em R. Ele é baseado na [gramática de gráficos](https://link.springer.com/book/10.1007/0-387-28695-0), uma teoria que apresenta uma forma de descrever os componentes de um gráfico.\n\nO `ggplot2` faz parte do [tidyverse](https://www.tidyverse.org/).\n\n## Vocabulário do ggplot2\n\nA gramática de gráficos é composta por alguns elementos, sendo os seguintes principais para iniciar:\n\n-   **Dados**: um data frame que contém os dados que serão apresentados\n\n-   ***Aesthetics*** **(atributos estéticos)**: mapeamento dos dados para propriedades visuais do gráfico, como eixos, cor, forma e tamanho\n\n-   **Geometrias**: formas geométricas que representam os dados, como pontos, linhas e barras.\n\nVamos fazer um exemplo simples, explorando cada um desses elementos. Para iniciar o gráfico, podemos informar os dados para a função `ggplot()`:\n\n```{r}\n#| label: exemplo-ggplot2-1\n#| code-annotations: below\ndados_tri_recente |>\n  ggplot()\n```\n\nA função `ggplot()` cria um objeto gráfico vazio. Para informar quais são as variáveis que serão mapeadas nos eixos `x` e `y`, utilizamos a função `aes()`:\n\n```{r}\n#| label: exemplo-ggplot2-2\n#| code-annotations: below\ndados_tri_recente |>\n  ggplot() + \n  aes(x = perc_desocupacao, y = uf)\n```\n\nO gráfico criado apresenta os eixos, e os valores possíveis. Porém ainda não tem nenhuma geometria para representar os dados. Para adicionar uma geometria ao gráfico, utilizamos funções da família `geom_*`. Nesse caso, vamos utilizar a função `geom_col()` para criar um gráfico de colunas:\n\n```{r}\n#| label: exemplo-ggplot2-3\n#| code-annotations: below\ndados_tri_recente |> # <1>\n  ggplot() + # <2>\n  aes(x = perc_desocupacao, y = uf) + # <3>\n  geom_col() # <4>\n```\n\n1.  **Dados:** dados que serão utilizados\n2.  `ggplot()`: função para iniciar o gráfico\n3.  ***Aesthetics*** **(atributos estéticos)**: informando quais variáveis serão utilizadas nos eixos x e y\n4.  **Geometria do gráfico:** informando que faremos um gráfico de colunas\n\n::: callout-tip\n**Atenção:** Observe que a cada linha de código, adicionamos um `+` para adicionar um novo elemento ao gráfico.\n\nA partir da função `ggplot()`, sempre utilizamos `+` para adicionar novos elementos ao gráfico.\n:::\n\n## Criando gráficos exploratórios\n\nVamos criar alguns gráficos exploratórios com os dados de desocupação por trimestre e por estado.\n\nGráficos exploratórios são utilizados para entender melhor os dados, identificar padrões e tendências, e verificar a presença de outliers. Neste momento, não estamos preocupados com a estética do gráfico, mas sim com a interpretação dos dados.\n\nFalaremos como [customizar os gráficos mais adiante](#customizando-gr%C3%A1ficos).\n\n### Tipos de gráficos\n\n#### Gráficos de dispersão\n\nVamos começar criando um gráfico de dispersão (conhecido também como gráfico de pontos). Para isso, utilizaremos a função `ggplot()` e a função `geom_point()`.\n\nO gráfico de dispersão é utilizado para visualizar a relação entre duas variáveis quantitativas.\n\n```{r}\n#| label: exemplo-ggplot2-dispersao\ndados |>\n  filter(uf_sigla == \"BA\") |>\n  ggplot() +\n  aes(x = trimestre_inicio, y = perc_desocupacao) +\n  geom_point()\n```\n\n#### Gráficos de linha\n\nGráficos de linha são muito utilizados para representar uma variável ao longo do tempo. A função de geometria utilizada é a `geom_line()`.\n\nVamos criar um gráfico de linha para visualizar a evolução da taxa de desocupação ao longo dos trimestres para apenas um estado:\n\n```{r}\n#| label: exemplo-ggplot2-linha\ndados |> \n  filter(uf_sigla == \"BA\") |> \n  ggplot() + \n  aes(x = trimestre_inicio, y = perc_desocupacao) + \n  geom_line()\n```\n\nE se quisermos ver para todos os estados? Nesse caso, é importante usar um argumento adicional na função `aes()`, o `group`, para que o `ggplot2` saiba que queremos uma linha para cada estado.\n\n```{r}\n#| label: exemplo-ggplot2-linha-todos-estados\ndados |> \n  ggplot() + \n  aes(x = trimestre_inicio, y = perc_desocupacao) + \n  geom_line(aes(group = uf))\n```\n\n### Combinando geometrias\n\nPodemos combinar diferentes geometrias no mesmo gráfico. Por exemplo, podemos adicionar um gráfico de pontos ao gráfico de linhas que criamos anteriormente:\n\n```{r}\n#| label: exemplo-ggplot2-linha-ponto\ndados |> \n  filter(uf_sigla == \"BA\") |> \n  ggplot() + \n  aes(x = trimestre_inicio, y = perc_desocupacao) + \n  geom_line(color = \"red\") +\n  geom_point(color = \"blue\")\n```\n\nOutro ponto importante é que a **ordem das geometrias importa**! No exemplo acima, a linha é desenhada primeiro, e os pontos são adicionados por cima da linha. Se trocarmos a ordem das geometrias, os pontos serão desenhados primeiro, e a linha será desenhada por cima dos pontos.\n\n```{r}\n#| label: exemplo-ggplot2-ponto-linha\ndados |> \n  filter(uf_sigla == \"BA\") |> \n  ggplot() + \n  aes(x = trimestre_inicio, y = perc_desocupacao) + \n  geom_point(color = \"blue\") +\n  geom_line(color = \"red\")\n```\n\n### Gráficos de barras/colunas\n\nPara os gráficos de barras/colunas, podemos utilizar duas funções: `geom_bar()` e `geom_col()`. A diferença entre elas é que `geom_bar()` é utilizada quando queremos contar a frequência de uma variável categórica, enquanto `geom_col()` é utilizada quando queremos visualizar uma variável numérica.\n\nVamos criar um gráfico de colunas para visualizar a taxa de desocupação dos estados no trimestre mais recente. Como já temos a coluna com o valor numérico que queremos visualizar (`perc_desocupacao`), utilizaremos a função `geom_col()`:\n\n```{r}\n#| label: exemplo-ggplot2-geom-col\ndados_tri_recente |> \n  ggplot() + \n  aes(y = uf, x = perc_desocupacao) + \n  geom_col()\n```\n\nA função `geom_bar()` é utilizada para representar **contagens**. Vamos responder a seguinte pergunta de exemplo: quantas vezes cada estado apresentou uma taxa de desocupação maior ou igual à 20%? Para isso, precisamos filtrar os dados **antes** de criar o gráfico, e a função `geom_bar()` será utilizada para contar a frequência de cada estado. Os estados que não aparecerem no gráfico é porque não tiveram nenhuma taxa de desocupação maior ou igual à 20%, no período que temos dados.\n\n```{r}\n#| label: exemplo-ggplot2-geom-bar\ndados |> \n  filter(perc_desocupacao >= 20) |>\n  ggplot() + \n  aes(x = uf) + \n  geom_bar()\n```\n\n### Gráfico de histograma\n\nO histograma é um gráfico que mostra a distribuição de uma variável numérica. A função de geometria utilizada é a `geom_histogram()`.\n\nPodemos visualizar a distribuição da variável `perc_desocupacao`, considerando todos os trimestres:\n\n```{r}\n#| label: exemplo-ggplot2-histogram\ndados |> \n  ggplot() + \n  aes(x = perc_desocupacao) + \n  geom_histogram(binwidth = 1)\n```\n\nOutro tipo de gráfico que pode ser utilizado para visualizar a distribuição de uma variável numérica é o gráfico de densidade. A função de geometria utilizada é a `geom_density()`.\n\n```{r}\n#| label: exemplo-ggplot2-density\ndados |> \n  ggplot() + \n  aes(x = perc_desocupacao) + \n  geom_density()\n```\n\n### Gráficos de caixa (*boxplot*)\n\nO gráfico de caixa[^1] (mais conhecido como *boxplot*) é utilizado para visualizar a distribuição de uma variável numérica. Esse é um tipo de gráfico que não é muito comum vermos no dia-a-dia, mas é muito usado em pesquisas e análises estatísticas.\n\n[^1]: Caso queira saber mais sobre o gráfico de caixa / *boxplot*, [recomendo a leitura deste texto escrito pela Fernanda Peres, sobre como interpretar o boxplot](https://fernandafperes.com.br/blog/interpretacao-boxplot/).\n\nEste gráfico apresenta informações como a mediana, quartis, valores mínimos e máximos, e possíveis outliers.\n\nPara criar um boxplot, utilizaremos a função de geometria `geom_boxplot()`\n\n```{r}\n#| label: exemplo-ggplot2-boxplot\ndados |> \n  ggplot() + \n  aes(y = regiao, x = perc_desocupacao) + \n  geom_boxplot()\n```\n\n### Gráficos por subgrupos\n\n#### Subgrupos por Cor\n\nPodemos adicionar mais uma variável ao gráfico, utilizando a cor para representá-la. Para isso, utilizamos os argumentos `fill` ou `color` dentro da função `aes()`:\n\n-   `fill`: preenche a área com a cor. Útil para gráficos de barras e colunas, por exemplo.\n-   `color`: adiciona a cor ao contorno. Útil para gráficos de linhas e pontos, por exemplo.\n\nVamos ver um exemplo de gráfico de colunas apresentado anteriormente, com preenchimento (`fill`) por região:\n\n```{r}\n#| label: exemplo-ggplot2-fill\ndados_tri_recente |>\n  ggplot() + \n  aes(x = perc_desocupacao, y = uf) + \n  geom_col(aes(fill = regiao)) # <1>\n```\n1.  Adicionando a cor de preenchimento utilizando a coluna `regiao`, com o argumento `fill`. Isso precisa estar **DENTRO** do `aes()`.\n\nVamos ver um exemplo de gráfico de linhas apresentado anteriormente, adicionamos pontos e usamos a cor para representar o período que consideramos como pandemia (`color`):\n\n```{r}\n#| label: exemplo-ggplot2-linha-color\ndados |> \n  filter(uf_sigla == \"BA\") |> # <1>\n  mutate(periodo_pandemia = as.character(periodo_pandemia)) |>\n  ggplot() + \n  aes(x = trimestre_inicio, y = perc_desocupacao) + \n  geom_line() +\n  geom_point(aes(color = periodo_pandemia)) # <2>\n```\n1.  Filtrando dados para representar apenas a Bahia.\n2.  Adicionando a cor do ponto utilizando a coluna `periodo_pandemia`, com o argumento `color`. Isso precisa estar **DENTRO** do `aes()`.\n\n#### Subgrupos por Facetas (*facet*)\n\nAs facetas (ou *facet*) são utilizadas para dividir o gráfico em subgráficos, com base nos valores de uma ou duas variáveis categóricas.\n\nExistem duas funções principais para criar facetas: `facet_wrap()` ou `facet_grid()`.\n\nA função `facet_wrap()` cria uma faceta para cada categoria da variável:\n\n```{r}\n#| label: exemplo-ggplot2-facet-wrap\ndados |> \n  ggplot() + \n  aes(x = trimestre_inicio, y = perc_desocupacao) + \n  geom_line(aes(group = uf)) + \n  facet_wrap(~regiao) # <1>\n```\n\n1.  Adicionando a função `facet_wrap()` para criar um gráfico para cada categoria da variável `regiao`.\n\nVeja que o gráfico é dividido em 5 subgráficos, um para cada região do Brasil. Os valores dos eixos `x` e `y` são os mesmos para todos os subgráficos, possibilitando a comparação entre eles.\n\nJá a função `facet_grid()` cria um gráfico para cada combinação de categorias de duas variáveis.\n\n```{r}\n#| label: exemplo-ggplot2-facet-grid\ndados |> \n  ggplot() + \n  aes(y = perc_desocupacao) + \n  geom_boxplot() + \n  facet_grid(regiao ~ periodo_pandemia) # <1>\n```\n\n1.  Adicionando a função `facet_grid()` para criar um gráfico para cada combinação de categorias das variáveis `regiao` e `periodo_pandemia`.\n\n### Revisão\n\nA partir dos exemplos apresentados, podemos listar alguns pontos importantes sobre o `ggplot2`:\n\n-   A função `ggplot()` cria um objeto gráfico vazio\n\n-   Podemos usar o pipe (`%>%` ou `|>`) para encadear as funções **até** a função `ggplot()`.\n\n-   A partir da função `ggplot()`, não usamos mais o pipe (`%>%` ou `|>`), e sim o `+`.\n\n-   A função `aes()` define o mapeamento estético (aesthetics mapping) entre as colunas da base de dados (variáveis) e os elementos visuais do gráfico (eixo, posição, cor, tamanho, etc).\n\n-   Os atributos estéticos (`aes`) `x` e `y` representam os eixos `x` e `y` do gráfico.\n\n-   Para adicionar uma geometria ao gráfico, usamos alguma função da família `geom_*`.\n\n-   Podemos usar mais do que uma geometria no mesmo gráfico, e a ordem importa!\n\n## Customizando gráficos\n\nAté aqui, discutimos como criar gráficos exploratórios, e vimos que o `ggplot2` nos permite criar gráficos de forma simples e rápida.\n\nApós criar um gráfico exploratório que nos ajuda a entender os dados, podemos customizá-lo para apresentar a outras pessoas, ou para publicar em relatórios e artigos.\n\nVamos ver algumas formas de customizar os gráficos criados, partindo do gráfico a seguir:\n\n```{r}\n#| label: customizando-base\n\ngrafico_base <- dados_tri_recente |> \n  ggplot() + \n  aes(y = uf, x = perc_desocupacao) + \n  geom_col()\n\ngrafico_base\n```\n\n### Ordenando as barras\n\nO ggplot ordena variáveis de texto em ordem alfabética. No exemplo acima, as barras estão ordenadas de acordo com a ordem alfabética dos estados: o Acre aparece primeiro, e o Tocantins, por último.\n\nPodemos ordenar as barras do gráfico de colunas de acordo com o valor da variável numérica utilizada (neste caso, `perc_desocupacao`).\n\nPara isso, precisaremos transformar a variável de texto `uf` em uma variável categórica ordenada (ou seja, um fator/*factor*).\n\n#### Fatores / *factors*\n\nOs fatores são utilizados para representar variáveis categóricas no R. Essas variáveis podem ser ordenadas ou não.\n\nEles são úteis para controlar a ordem de exibição de variáveis categóricas em gráficos, tabelas e modelos estatísticos.\n\nVamos criar um exemplo simples, criando uma tabela com a escolaridade de um grupo de pessoas:\n\n```{r}\nescolaridade <- tibble(\n  nome = c(\n    \"Maria\",\n    \"João\",\n    \"Pedro\",\n    \"Ana\",\n    \"José\",\n    \"Carlos\",\n    \"Mariana\",\n    \"Lucas\"\n  ),\n  escolaridade_concluida = c(\n    \"Pós-graduação\",\n    \"Ensino Médio\",\n    \"Ensino Fundamental II\",\n    \"Ensino Fundamental I\",\n    \"Ensino Fundamental I\",\n    \"Sem instrução\",\n    \"Ensino Técnico\",\n    \"Graduação\"\n  )\n)\n```\n\nSe ordenarmos a tabela pela variável `escolaridade_concluida`, veremos que a ordem é alfabética:\n\n```{r}\nescolaridade |> \n  arrange(escolaridade_concluida)\n```\n\nPara que, por exemplo, a variável `escolaridade_concluida` seja ordenada de acordo com a ordem de escolaridade, podemos transformá-la em um fator ordenado, utilizando a função `factor()`, e indicando quais são os níveis (*levels*) de escolaridade, na ordem que queremos que apareçam:\n\n```{r}\nescolaridade |>\n  mutate(\n  escolaridade_concluida_fct = factor( # <1>\n    escolaridade_concluida, # <2>\n    levels = c( # <3>\n      \"Sem instrução\", \n      \"Ensino Fundamental I\", \n      \"Ensino Fundamental II\", \n      \"Ensino Médio\", \n      \"Ensino Técnico\", \n      \"Graduação\", \n      \"Pós-graduação\" \n      ) # <3>\n    ) # <1>\n  ) |> \n  arrange(escolaridade_concluida_fct) # <4>\n```\n\n1.  Criando uma nova variável `escolaridade_concluida_fct` usando a função `factor()`\n2.  Variável que será transformada em fator\n3.  Níveis de escolaridade, na ordem que queremos que apareçam\n4.  Ordenando a tabela pela variável `escolaridade_concluida_fct`\n\nA função `factor()` é do R base, ou seja, não precisamos carregar nenhum pacote adicional para utilizá-la. Porém o pacote `{forcats}` (que faz parte do `{tidyverse}`) apresenta funções mais avançadas para trabalhar com fatores, como a função `fct_reorder()` que veremos a seguir.\n\n#### Voltando ao exemplo do gráfico de colunas\n\nPara isso, precisamos fazer uma transformação na variável `uf`, para que ela seja ordenada de acordo com o valor de `perc_desocupacao`. Isso deve ser feito **antes** de criar o gráfico.\n\nVamos ordenar as barras do gráfico anterior, de acordo com o valor de `perc_desocupacao`. Para isso, utilizamos a função `fct_reorder()` do pacote `{forcats}`.\n\nA função `fct_reorder()` recebe dois argumentos:\n\n-   A variável que queremos ordenar (a variável **categórica** que é representada em cada coluna)\n-   A variável que será utilizada para ordenar a primeira variável (a variável **numérica** que será utilizada para ordenar a variável categórica)\n\nNo caso do nosso exemplo, queremos ordenar as barras de acordo com o valor de `perc_desocupacao`, e a variável categórica que queremos ordenar é `uf`. Portanto, usaremos `fct_reorder(uf, perc_desocupacao)`.\n\n```{r}\n#| label: customizando-ordenacao\n\ngrafico_ordenado <- dados_tri_recente |> \n  mutate(uf_fct = forcats::fct_reorder(uf, perc_desocupacao)) |> # <1>\n  ggplot() + \n  aes(y = uf_fct, x = perc_desocupacao) + # <2>\n  geom_col()\n\ngrafico_ordenado\n```\n\n1.  Como explicado acima, criamos uma nova variável `uf_fct` que será utilizada para ordenar as barras de acordo com o valor de `perc_desocupacao`.\n2.  Utilizaremos no eixo `y` a variável criada: `uf_fct`.\n\n### Títulos e rótulos\n\nPor padrão, o gráfico está sem título, e com o nome das colunas nos eixos `x` e `y` e legendas.\n\nO `ggplot2` permite adicionar títulos e rótulos aos gráficos, utilizando a função `labs()`. Essa função apresenta vários argumentos, que podem ser divididos em dois grupos:\n\n-   Elementos com informações do gráficos: sempre estão disponíveis. Ex: `title`, `subtitle`, `caption`...\n\n-   Elementos relacionados aos atributos estéticos: dependem dos mapeamentos feitos com a função `aes()`. Ex: `x`, `y`, `fill`, `color`...\n\nVamos adicionar um título ao gráfico anterior, e rótulos para os eixos `x` e `y`:\n\n```{r}\ngrafico_com_labels <- grafico_ordenado + \n  labs(\n    title = \"Taxa de desocupação por estado\", # <1>\n    subtitle = \"Dados para o 2º trimestre 2024\",  # <1>\n    caption = \"Fonte: Dados referentes à PNAD Contínua Trimestral, obtidos no SIDRA/IBGE.\",  # <1>\n    x = \"Taxa de desocupação (%)\",  # <2>\n    y = \"Estado\", # <2>\n  )\n\ngrafico_com_labels\n```\n\n1.  Informações sobre o gráfico\n2.  Atributos estéticos utilizados\n\n### Escalas\n\nO `{ggplot2}` apresenta várias funções para trabalhar com as escalas dos gráficos. Essas funções apresentam o prefixo `scale_`.\n\nVamos explorar algumas dessas funções para trabalhar com escalas, mas lembre-se que existem muitas outras funções para customizar as escalas dos gráficos.\n\n::: {.callout-tip collapse=\"true\"}\n## Lista de funções para escalas no ggplot2\n\n```{r}\nls(\"package:ggplot2\") |> \n  stringr::str_subset(\"^scale_\")\n```\n:::\n\n#### Escalas de cores\n\nO `{ggplot2}` utiliza uma paleta de cores padrão bem colorida, observada nos exemplos anteriores. Porém podemos mudar a paleta de cores, ou até mesmo criar uma paleta de cores personalizada.\n\nAs funções de escalas de cores dependerão do tipo de atributo estético utilizado: `fill` ou `color`.\n\nQuando usamos o atributo `fill`, utilizamos as funções `scale_fill_*()`. Quando usamos o atributo `color`, utilizamos as funções `scale_color_*()`.\n\nOutro ponto importante é que as funções de escalas de cores dependem do **tipo de variável** que estamos mapeando.\n\nPor exemplo, se a variável mapeada é categórica, podemos usar a função `scale_fill_viridis_d()` para preencher as barras com uma paleta de cores viridis. Utilizando o exemplo que estamos criando, a região pode ser mapeada no atributo `fill`:\n\n```{r}\n#| label: customizando-cores-fill-categorico\ndados_tri_recente |> \n  ggplot() +\n  aes(y = uf, x = perc_desocupacao) +\n  geom_col(aes(fill = regiao)) +\n  scale_fill_viridis_d() \n```\n\nMas se a variável mapeada é numérica, podemos usar a função `scale_fill_viridis_c()`. O exemplo abaixo apresenta um gráfico similar, mas mapeando a variável `perc_desocupacao` no atributo `fill`:\n\n```{r}\n#| label: customizando-cores-fill-numerico\ndados_tri_recente |> \n  ggplot() +\n  aes(y = uf, x = perc_desocupacao) +\n  geom_col(aes(fill = perc_desocupacao)) +\n  scale_fill_viridis_c()\n```\n\n::: {.callout-tip collapse=\"true\"}\n## Lista de funções para escalas de cores no ggplot2\n\n-   Para o atributo `color`:\n\n```{r}\nls(\"package:ggplot2\") |> \n  stringr::str_subset(\"^scale_\") |> \n  stringr::str_subset(\"color\")\n```\n\n-   Para o atributo `fill`:\n\n```{r}\nls(\"package:ggplot2\") |> \n  stringr::str_subset(\"^scale_\") |> \n  stringr::str_subset(\"fill\")\n```\n:::\n\n\nUm ponto a ter atenção é o tipo de paleta de cores usadas. Algumas paletas de cores são mais adequadas para representar variáveis categóricas, enquanto outras são mais adequadas para representar variáveis numéricas. Veja a imagem com exemplos de paletas categóricas, sequenciais, e divergentes:\n\n![Fonte da imagem: [tmap book](https://r-tmap.github.io/tmap-book).](images/07_tipos_paletas.png)\n\n#### Escalas de eixos: datas\n\nPodemos customizar a escala do eixo `x` para apresentar as datas de forma personalizada. É importante que, para isso, a variável seja do tipo `Date` ou `Datetime`.\n\nPara isso, utilizamos a função `scale_x_date()`. Ela apresenta alguns argumentos importantes:\n\n-   `breaks`: indica a frequência das marcações no eixo `x`. Alguns exemplos são: `\"1 month\"` (marcação a cada mês), `\"3 months\"` (marcação a cada 3 meses), \"1 year\" (marcação a cada ano), entre outros.\n\n-   `date_labels`: formato da data que será apresentado. Alguns exemplos são: `\"%m/%Y\"` (mês/ano), `\"%d/%m/%Y\"` (dia/mês/ano), `\"%b/%Y\"` (mês abreviado/ano), entre outros.\n\nVamos criar um gráfico de linhas para visualizar a evolução da taxa de desocupação desde 2022 para a Bahia, e customizar a escala do eixo `x` para apresentar as datas de forma a apresentar uma marcação cada 3 meses:\n\n```{r}\n#| label: customizando-escala-data\ndados |>\n  filter(uf_sigla == \"BA\", ano >= 2022) |> # <1>\n  ggplot() +\n  aes(x = trimestre_inicio, y = perc_desocupacao) +\n  geom_line() +\n  geom_point() +\n  scale_x_date( # <2>\n    breaks = \"3 months\", # <3>\n    date_labels = \"%m/%Y\", # <4>\n    minor_breaks = \"1 month\" # <5>\n  ) # <2> \n```\n\n1.  Filtrando os dados para a Bahia, e considerando apenas os dados a partir de 2022.\n2.  Customizando a escala de data no eixo `x`.\n3.  Queremos que a marcação apareça a cada 3 meses.\n4.  Formato da data que será apresentado (mês/ano).\n5.  A *minor break* é uma linha que aparece entre as marcações principais, porém sem indicar uma legenda. Neste caso, queremos que apareça a cada mês.\n\n#### Escalas de eixos: numérico\n\nPodemos customizar a escala dos eixos `x` e/ou `y` quando estamos mapeando variáveis numéricas utilizando as funções `scale_x_continuous()` e `scale_y_continuous()`.\n\nO gráfico apresentado no exemplo anterior (onde configuramos a escala de datas) está com o eixo `y` limitado na faixa onde os dados são encontrados (11% à 18%). Porém, precisamos ter cuidado ao limitar os eixos, pois isso pode distorcer a visualização dos dados.\n\nPodemos definir que o eixo `y` comece em 0 e termine em 20%, utilizando o argumento `limits` da função `scale_y_continuous()`:\n\n```{r}\n#| label: customizando-escala-numerica\ndados |>\n  filter(uf_sigla == \"BA\", ano >= 2022) |>\n  ggplot() +\n  aes(x = trimestre_inicio, y = perc_desocupacao) +\n  geom_line() +\n  geom_point() +\n  scale_y_continuous(limits = c(0, 20))\n```\n\n### Temas\n\nOs gráficos que criamos até aqui utilizam o tema padrão do `{ggplot2}` (podemos identificar facilmente pelo fundo cinza). \n\nPorém existem funções para customizar o tema dos gráficos, alterando a cor de fundo, a cor dos textos, a fonte, entre outros elementos.\n\n#### `{ggplot2}`\n\nO `{ggplot2}` apresenta alguns temas que podem ser utilizados nos gráficos, utilizando funções com o prefixo `theme_*()`:\n\n```{r}\nls(\"package:ggplot2\") |> \n  stringr::str_subset(\"^theme_\") \n```\n\nPor exemplo, podemos alterar o tema do gráfico `grafico_ordenado` (criado anteriormente) para o tema `theme_minimal()`:\n\n```{r}\n#| label: customizando-tema-ggplot2\ngrafico_com_labels + \n  theme_minimal()\n```\n\n#### `{ggthemes}`\n\nO pacote `{ggthemes}` apresenta vários temas adicionais que podem ser utilizados nos gráficos criados com o `{ggplot2}`.\n\n```{r}\n#| eval: false\ninstall.packages(\"ggthemes\") # <1>\n```\n\n1.  Caso não tenha o pacote instalado, utilize essa linha de código para instalar o pacote.\n\nA lista abaixo apresenta os temas disponíveis no pacote `{ggthemes}`:\n\n```{r}\nlibrary(ggthemes)\nls(\"package:ggthemes\") |> \n  stringr::str_subset(\"^theme_\") \n```\n\nPodemos usar o tema `theme_economist()` para customizar o gráfico `grafico_com_labels`:\n\n```{r}\n#| fig-height: 6\n#| label: customizando-tema-ggthemes\ngrafico_com_labels + \n  ggthemes::theme_economist()\n```\n\n#### `{ipeaplot}`\n\nO pacote `{ipeaplot}` apresenta a função `theme_ipea()` que pode ser utilizada nos gráficos criados com o `{ggplot2}`.\n\n```{r}\n#| eval: false\ninstall.packages(\"ipeaplot\") # <1>\n```\n\n1.  Caso não tenha o pacote instalado, utilize essa linha de código para instalar o pacote.\n\nPodemos usar o tema `theme_ipea()` para customizar o gráfico abaixo:\n\n```{r}\n#| label: customizando-tema-ipeaplot\ndados |>\n  filter(regiao == \"Sul\") |>\n  ggplot() + \n  aes(x = trimestre_inicio, y = perc_desocupacao, color = uf) + \n  geom_line() + \n  ipeaplot::theme_ipea()\n```\n\n### Usando as funções de customização\n\nNos exemplos acima, apresentamos algumas funções para customizar os gráficos criados com o `{ggplot2}`.\n\nVamos usar essas funções para customizar o gráfico apresentado no exemplo acima:\n\n```{r}\n#| label: customizando-grafico-completo\ngrafico_customizado <- dados |> # <1>\n  filter(regiao == \"Sul\") |> \n  ggplot() + \n  aes(x = trimestre_inicio, y = perc_desocupacao, color = uf) +  \n  geom_line() + \n  ipeaplot::theme_ipea() + # <2>\n  ipeaplot::scale_color_ipea(palette = \"Viridis\") + # <3>\n  scale_x_date(breaks = \"1 year\", date_labels = \"%Y\") + # <4>\n  labs( # <5>\n    title = \"Taxa de desocupação por estado na região Sul\",\n    subtitle = \"Dados da PNAD Contínua Trimestral\",\n    caption = \"Fonte dos dados: SIDRA/IBGE.\",\n    color = \"Estado\",\n    x = \"Ano\",\n    y = \"Taxa de desocupação (%)\"\n  ) # <5>\n\ngrafico_customizado\n```\n\n1.  Vamos salvar o resultado do gráfico em um objeto.\n2.  Utilizando o tema `theme_ipea()` do pacote `{ipeaplot}`.\n3.  Utilizando a função `scale_color_ipea()` (do pacote `{ipeaplot}`) com paleta de cores `Orange-Blue`.\n4.  Customizando a escala de data no eixo `x`: apresentar uma marcação a cada ano.\n5.  Adicionando títulos e rótulos ao gráfico.\n\n## Salvando os gráficos\n\nPodemos salvar o gráfico em um arquivo, para utilizá-lo posteriormente. Para isso, criamos um objeto contendo o gráfico que queremos salvar, e utilizamos a função `ggsave()`.\n\nA função `ggsave()` salva o gráfico em um arquivo, e apresenta dois argumentos principais:\n\n-   `filename`: nome do arquivo onde o gráfico será salvo\n\n-   `plot`: objeto contendo o gráfico que será salvo\n\nEssa função também apresenta alguns argumentos para customizar como o gráfico será salvo, como:\n\n-   `width`: largura do gráfico\n\n-   `height`: altura do gráfico\n\n-   `units`: unidade de medida para a largura e altura do gráfico\n\n-   `dpi`: resolução do gráfico (quanto maior o valor, melhor a qualidade da imagem)\n\nVamos utilizar o gráfico customizado criado anteriormente (salvo no objeto `grafico_customizado`), e salvar em um arquivo utilizando a função `ggsave()`:\n\n```{r}\nggsave( # <1>\n  filename = \"graficos/grafico_customizado.png\", # <2>\n  plot = grafico_customizado, # <3>\n  width = 7, # <4>\n  height = 5, # <5>\n  dpi = 300 # <6>\n)\n```\n\n1.  Função para salvar o gráfico.\n2.  Nome do arquivo onde o gráfico será salvo.\n3.  Objeto contendo o gráfico que será salvo.\n4.  Largura do gráfico.\n5.  Altura do gráfico.\n6.  Resolução do gráfico.\n\nPodemos verificar se o gráfico foi salvo corretamente, utilizando a função `file.exists()`:\n\n```{r}\nfile.exists(\"graficos/grafico_customizado.png\")\n```\n\n## Preparação dos dados\n\nOs exemplos que utilizamos mostram um padrão no uso do `ggplot2`: a base de dados é passada para a função `ggplot()`, definimos quais variáveis serão mapeadas com a função `aes()`, e adicionamos uma (ou mais) geometria ao gráfico.\n\nPorém, algo que pode ser trabalhoso é preparar os dados para o gráfico. Nos exemplos que fizemos anteriormente, utilizamos uma tabela já preparada.\n\nNo entanto, em muitos casos, precisamos preparar os dados antes de criar o gráfico. Neste caso, muitas funções já vistas em aulas anteriores serão úteis (como `filter()`, `select()`, `mutate()`, `group_by()`, `summarise()`, `pivot_longer()`, `pivot_wider()`, entre outras). Caso necessário, consulte as aulas [Transformando dados](05_transformacao.qmd) e [Análise exploratória de dados](06_analise_exploratoria.qmd).\n\nEm [Exemplo prático: Visualização](07_visualizacao_exemplo.qmd), é apresentado um exemplo prático de visualização de dados, onde é feita a preparação dos dados antes de criar o gráfico.\n\n## Sugestões de exercícios\n\n### Criando gráficos exploratórios\n\n1.  Observe o gráfico abaixo, criado com o objeto `dados_tri_recente`, e responda:\n    -   Quais são as variáveis mapeadas nos eixos x e y?\n    -   Qual é a geometria utilizada?\n    -   Existe algum outro atributo estético mapeado no gráfico?\n\n```{r}\n#| label: exercicio-exploratoria-1\n#| echo: false\ndados_tri_recente |> \n  mutate(\n    percentual_forca_de_trabalho_ocupada = mil_pessoas_forca_de_trabalho_ocupada / mil_pessoas_total * 100,\n    uf = forcats::fct_reorder(uf, percentual_forca_de_trabalho_ocupada)\n  ) |> \n  ggplot() + \n  aes(x = percentual_forca_de_trabalho_ocupada, y = uf) + \n  geom_col(aes(fill = regiao)) +\n  theme_light()\n```\n\n2.  Observe o gráfico abaixo, e tente identificar qual é o problema no código. Sugira uma solução para corrigir o problema.\n\n```{r}\n#| label: exercicio-exploratoria-2\n\ndados_tri_recente |>\n  ggplot() + \n  aes(x = perc_desocupacao, y = uf) + \n  geom_col(aes(fill = \"regiao\"))\n```\n\n3.  Crie um gráfico de linhas para representar a evolução da taxa de desocupação ao longo do tempo para os estados da região Centro Oeste. Use as cores para representar cada estado.\n\n::: {.callout-tip collapse=\"true\"}\n## Dica 1\n\nO resultado esperado é:\n\n```{r}\n#| label: exercicio-exploratoria-3\n#| echo: false\ndados |> \n  filter(regiao == \"Centro Oeste\") |> \n  ggplot() + \n  aes(x = trimestre_inicio, y = perc_desocupacao, color = uf) + \n  geom_line()\n```\n:::\n\n4.  Crie um gráfico de linhas para representar a evolução da taxa de desocupação ao longo do tempo para os estados da região Norte. Utilize facetas para separar os gráficos por estado.\n\n::: {.callout-tip collapse=\"true\"}\n## Dica 1\n\nO resultado esperado é:\n\n```{r}\n#| label: exercicio-exploratoria-4\n#| echo: false\ndados |> \n  filter(regiao == \"Norte\") |> \n  ggplot() + \n  aes(x = trimestre_inicio, y = perc_desocupacao) + \n  geom_line() + \n  facet_wrap(~ uf)\n```\n:::\n\n### Customizando gráficos\n\n1.  Crie um gráfico de linhas para representar a evolução da taxa de desocupação ao longo do tempo para os estados da região Nordeste do Brasil, e salve em um objeto chamado `grafico_desocupacao_nordeste`. Mapeie os estados na cor das linhas. Com esse objeto, faça as tarefas abaixo:\n\n- a) Configure a escala do eixo x para que apareça as marcações dos anos. Isso ajudará a visualizar melhor a periodicidade dos dados.\n\n- b) Adicione os títulos e rótulos dos eixos no gráfico.\n\n- c) Experimente os temas apresentados anteriormente, e use no gráfico o que mais gostar.\n\n- d) Altere a escala de cores das linhas, utilizando uma paleta de cores de sua preferência. Tome cuidado pois estamos mapeando uma variável categórica.\n\n- e) Salve o gráfico em um arquivo chamado `graficos/grafico_desocupacao_nordeste.png`.\n\n\n## Links citados na aula\n### Parte 1 \n\n\n- [Site from data to viz](https://www.data-to-viz.com/) - galeria de gráficos\n\n- [R Graph Gallery](https://r-graph-gallery.com/) - Galeria de gráficos\n\n- Boxplot:\n  - [Texto sobre interpretação do boxplot](https://fernandafperes.com.br/blog/interpretacao-boxplot/)\n  - [R Graph Gallery - exemplos de boxplot](https://r-graph-gallery.com/boxplot.html)\n\n\n- Sobre gráficos de pizza:\n  - [Texto: O que não fazer em gráficos de pizza](https://fernandafperes.com.br/blog/reconstruindo-grafico-pizza/)\n  - [Texto escrito por Julio Trecenti (Dr. em Estatística): Gráficos de pizza são ruins?](https://forum.abj.org.br/t/graficos-de-pizza-sao-ruins/41)\n  \n- Sugestão de livros:\n  - Storytelling com Dados - Cole Nussbaumer Knaflic\n\n### Parte 2\n\n- [Gráficos por Bruno Mioto](https://www.brunomioto.com/charts.html)\n- [Documentação: pacote forcats](https://forcats.tidyverse.org/articles/forcats.html)\n- [Color palette finder](https://r-graph-gallery.com/color-palette-finder)\n\n## Sugestões de materiais\n\n-   Livro [R para Ciência de Dados 2ed](https://cienciadedatos.github.io/pt-r4ds/):\n    -   [Visualização de dados](https://cienciadedatos.github.io/pt-r4ds/data-visualize.html)\n    -   [Vsualizar](https://cienciadedatos.github.io/pt-r4ds/visualize.html)\n    -   [Visualizar: Camadas](https://cienciadedatos.github.io/pt-r4ds/layers.html)\n    -   [Visualizar: Análise exploratória de dados](https://cienciadedatos.github.io/pt-r4ds/EDA.html)\n    -   [Visualizar: Comunicação](https://cienciadedatos.github.io/pt-r4ds/communication.html)\n-   Livro: [Metodologia de Pesquisa Jurimétrica](https://livro.abj.org.br/):\n    -   [Capítulo 4 - Visualização](https://livro.abj.org.br/04-visualizacao.html)\n\n### Extras: Curiosidades e Referências\n\n-   [Grammar of Graphics](https://link.springer.com/book/10.1007/0-387-28695-0) - livro de Leland Wilkinson, cuja teoria é a base do `ggplot2`\n\n-   [ggplot2: Elegant Graphics for Data Analysis](https://ggplot2-book.org/) - livro de Hadley Wickham, criador do `ggplot2`, Danielle Navarro e Thomas Lin Pedersen (em inglês)\n","srcMarkdownNoYaml":"\n\n## Objetivos\n\nNesta aula:\n\n-   Conheceremos o pacote `ggplot2` para visualização de dados\n\n-   Aprenderemos a criar diferentes tipos de gráficos como: de dispersão, linha, barra/coluna, entre outros\n\n-   Veremos como salvar os gráficos criados\n\n-   Exploraremos funções para customizar a aparência dos gráficos\n\nEsse é um exemplo de gráfico que criaremos ao longo da aula:\n\n![](graficos/grafico_customizado.png){fig-align=\"center\" width=\"80%\"}\n\nNesta aula, utilizaremos principalmente os pacotes `{ggplot2}` e `{dplyr}`. Vamos carregá-los:\n\n```{r}\n#| message: false\nlibrary(ggplot2) # <1>\nlibrary(dplyr) # <2>\n```\n\n1.  Pacote para visualização de dados\n2.  Pacote para transformação de dados\n\n## Importando dados\n\nNesta aula, utilizaremos a tabela preparada na [aula sobre transformação de dados](05_transformacao): `\"dados_output/sidra_4092_arrumado.rds\"`.\n\n::: {.callout-important collapse=\"true\"}\n### Expanda para fazer download da base de dados\n\nCaso não tenha o arquivo da tabela que utilizaremos, você pode baixar [aqui](https://github.com/ipeadata-lab/curso_r_intro_202409/raw/refs/heads/main/dados_output/sidra_4092_arrumado.rds), e copiar o arquivo para a pasta `dados_output` do seu projeto.\n\nOutra opção é executar o código abaixo:\n\n```{r}\n#| eval: false\ndownload.file(\n  url = \"https://github.com/ipeadata-lab/curso_r_intro_202409/raw/refs/heads/main/dados_output/sidra_4092_arrumado.rds\",  # <1>\n  destfile = \"dados_output/sidra_4092_arrumado.rds\", # <2>\n  mode = \"wb\" # <3>\n  )\n```\n\n1.  URL que desejamos baixar\n2.  Caminho onde queremos baixar o arquivo (diretório + nome do arquivo + extensão do arquivo)\n3.  Configuração que evita corromper arquivos binários.\n:::\n\nVamos carregar a base de dados com a função `read_rds()`:\n\n```{r}\n#| message: false\ndados <- readr::read_rds(\"dados_output/sidra_4092_arrumado.rds\") # <1>\nglimpse(dados) # <2>\n```\n\n1.  Importando os dados\n2.  Espiando a tabela: quantas colunas tem? quantas linhas? quais são as variáveis?\n\nVamos criar também um objeto contendo apenas aos dados referentes ao trimestre mais recente, para usar em alguns exemplos:\n\n```{r}\ndados_tri_recente <- dados |>  \n  filter(trimestre_inicio == max(trimestre_inicio)) # <1>\n```\n\n1.  Filtrando os dados para o trimestre mais recente\n\n## O que é o ggplot2?\n\nO `ggplot2` é o principal pacote para criação de gráficos em R. Ele é baseado na [gramática de gráficos](https://link.springer.com/book/10.1007/0-387-28695-0), uma teoria que apresenta uma forma de descrever os componentes de um gráfico.\n\nO `ggplot2` faz parte do [tidyverse](https://www.tidyverse.org/).\n\n## Vocabulário do ggplot2\n\nA gramática de gráficos é composta por alguns elementos, sendo os seguintes principais para iniciar:\n\n-   **Dados**: um data frame que contém os dados que serão apresentados\n\n-   ***Aesthetics*** **(atributos estéticos)**: mapeamento dos dados para propriedades visuais do gráfico, como eixos, cor, forma e tamanho\n\n-   **Geometrias**: formas geométricas que representam os dados, como pontos, linhas e barras.\n\nVamos fazer um exemplo simples, explorando cada um desses elementos. Para iniciar o gráfico, podemos informar os dados para a função `ggplot()`:\n\n```{r}\n#| label: exemplo-ggplot2-1\n#| code-annotations: below\ndados_tri_recente |>\n  ggplot()\n```\n\nA função `ggplot()` cria um objeto gráfico vazio. Para informar quais são as variáveis que serão mapeadas nos eixos `x` e `y`, utilizamos a função `aes()`:\n\n```{r}\n#| label: exemplo-ggplot2-2\n#| code-annotations: below\ndados_tri_recente |>\n  ggplot() + \n  aes(x = perc_desocupacao, y = uf)\n```\n\nO gráfico criado apresenta os eixos, e os valores possíveis. Porém ainda não tem nenhuma geometria para representar os dados. Para adicionar uma geometria ao gráfico, utilizamos funções da família `geom_*`. Nesse caso, vamos utilizar a função `geom_col()` para criar um gráfico de colunas:\n\n```{r}\n#| label: exemplo-ggplot2-3\n#| code-annotations: below\ndados_tri_recente |> # <1>\n  ggplot() + # <2>\n  aes(x = perc_desocupacao, y = uf) + # <3>\n  geom_col() # <4>\n```\n\n1.  **Dados:** dados que serão utilizados\n2.  `ggplot()`: função para iniciar o gráfico\n3.  ***Aesthetics*** **(atributos estéticos)**: informando quais variáveis serão utilizadas nos eixos x e y\n4.  **Geometria do gráfico:** informando que faremos um gráfico de colunas\n\n::: callout-tip\n**Atenção:** Observe que a cada linha de código, adicionamos um `+` para adicionar um novo elemento ao gráfico.\n\nA partir da função `ggplot()`, sempre utilizamos `+` para adicionar novos elementos ao gráfico.\n:::\n\n## Criando gráficos exploratórios\n\nVamos criar alguns gráficos exploratórios com os dados de desocupação por trimestre e por estado.\n\nGráficos exploratórios são utilizados para entender melhor os dados, identificar padrões e tendências, e verificar a presença de outliers. Neste momento, não estamos preocupados com a estética do gráfico, mas sim com a interpretação dos dados.\n\nFalaremos como [customizar os gráficos mais adiante](#customizando-gr%C3%A1ficos).\n\n### Tipos de gráficos\n\n#### Gráficos de dispersão\n\nVamos começar criando um gráfico de dispersão (conhecido também como gráfico de pontos). Para isso, utilizaremos a função `ggplot()` e a função `geom_point()`.\n\nO gráfico de dispersão é utilizado para visualizar a relação entre duas variáveis quantitativas.\n\n```{r}\n#| label: exemplo-ggplot2-dispersao\ndados |>\n  filter(uf_sigla == \"BA\") |>\n  ggplot() +\n  aes(x = trimestre_inicio, y = perc_desocupacao) +\n  geom_point()\n```\n\n#### Gráficos de linha\n\nGráficos de linha são muito utilizados para representar uma variável ao longo do tempo. A função de geometria utilizada é a `geom_line()`.\n\nVamos criar um gráfico de linha para visualizar a evolução da taxa de desocupação ao longo dos trimestres para apenas um estado:\n\n```{r}\n#| label: exemplo-ggplot2-linha\ndados |> \n  filter(uf_sigla == \"BA\") |> \n  ggplot() + \n  aes(x = trimestre_inicio, y = perc_desocupacao) + \n  geom_line()\n```\n\nE se quisermos ver para todos os estados? Nesse caso, é importante usar um argumento adicional na função `aes()`, o `group`, para que o `ggplot2` saiba que queremos uma linha para cada estado.\n\n```{r}\n#| label: exemplo-ggplot2-linha-todos-estados\ndados |> \n  ggplot() + \n  aes(x = trimestre_inicio, y = perc_desocupacao) + \n  geom_line(aes(group = uf))\n```\n\n### Combinando geometrias\n\nPodemos combinar diferentes geometrias no mesmo gráfico. Por exemplo, podemos adicionar um gráfico de pontos ao gráfico de linhas que criamos anteriormente:\n\n```{r}\n#| label: exemplo-ggplot2-linha-ponto\ndados |> \n  filter(uf_sigla == \"BA\") |> \n  ggplot() + \n  aes(x = trimestre_inicio, y = perc_desocupacao) + \n  geom_line(color = \"red\") +\n  geom_point(color = \"blue\")\n```\n\nOutro ponto importante é que a **ordem das geometrias importa**! No exemplo acima, a linha é desenhada primeiro, e os pontos são adicionados por cima da linha. Se trocarmos a ordem das geometrias, os pontos serão desenhados primeiro, e a linha será desenhada por cima dos pontos.\n\n```{r}\n#| label: exemplo-ggplot2-ponto-linha\ndados |> \n  filter(uf_sigla == \"BA\") |> \n  ggplot() + \n  aes(x = trimestre_inicio, y = perc_desocupacao) + \n  geom_point(color = \"blue\") +\n  geom_line(color = \"red\")\n```\n\n### Gráficos de barras/colunas\n\nPara os gráficos de barras/colunas, podemos utilizar duas funções: `geom_bar()` e `geom_col()`. A diferença entre elas é que `geom_bar()` é utilizada quando queremos contar a frequência de uma variável categórica, enquanto `geom_col()` é utilizada quando queremos visualizar uma variável numérica.\n\nVamos criar um gráfico de colunas para visualizar a taxa de desocupação dos estados no trimestre mais recente. Como já temos a coluna com o valor numérico que queremos visualizar (`perc_desocupacao`), utilizaremos a função `geom_col()`:\n\n```{r}\n#| label: exemplo-ggplot2-geom-col\ndados_tri_recente |> \n  ggplot() + \n  aes(y = uf, x = perc_desocupacao) + \n  geom_col()\n```\n\nA função `geom_bar()` é utilizada para representar **contagens**. Vamos responder a seguinte pergunta de exemplo: quantas vezes cada estado apresentou uma taxa de desocupação maior ou igual à 20%? Para isso, precisamos filtrar os dados **antes** de criar o gráfico, e a função `geom_bar()` será utilizada para contar a frequência de cada estado. Os estados que não aparecerem no gráfico é porque não tiveram nenhuma taxa de desocupação maior ou igual à 20%, no período que temos dados.\n\n```{r}\n#| label: exemplo-ggplot2-geom-bar\ndados |> \n  filter(perc_desocupacao >= 20) |>\n  ggplot() + \n  aes(x = uf) + \n  geom_bar()\n```\n\n### Gráfico de histograma\n\nO histograma é um gráfico que mostra a distribuição de uma variável numérica. A função de geometria utilizada é a `geom_histogram()`.\n\nPodemos visualizar a distribuição da variável `perc_desocupacao`, considerando todos os trimestres:\n\n```{r}\n#| label: exemplo-ggplot2-histogram\ndados |> \n  ggplot() + \n  aes(x = perc_desocupacao) + \n  geom_histogram(binwidth = 1)\n```\n\nOutro tipo de gráfico que pode ser utilizado para visualizar a distribuição de uma variável numérica é o gráfico de densidade. A função de geometria utilizada é a `geom_density()`.\n\n```{r}\n#| label: exemplo-ggplot2-density\ndados |> \n  ggplot() + \n  aes(x = perc_desocupacao) + \n  geom_density()\n```\n\n### Gráficos de caixa (*boxplot*)\n\nO gráfico de caixa[^1] (mais conhecido como *boxplot*) é utilizado para visualizar a distribuição de uma variável numérica. Esse é um tipo de gráfico que não é muito comum vermos no dia-a-dia, mas é muito usado em pesquisas e análises estatísticas.\n\n[^1]: Caso queira saber mais sobre o gráfico de caixa / *boxplot*, [recomendo a leitura deste texto escrito pela Fernanda Peres, sobre como interpretar o boxplot](https://fernandafperes.com.br/blog/interpretacao-boxplot/).\n\nEste gráfico apresenta informações como a mediana, quartis, valores mínimos e máximos, e possíveis outliers.\n\nPara criar um boxplot, utilizaremos a função de geometria `geom_boxplot()`\n\n```{r}\n#| label: exemplo-ggplot2-boxplot\ndados |> \n  ggplot() + \n  aes(y = regiao, x = perc_desocupacao) + \n  geom_boxplot()\n```\n\n### Gráficos por subgrupos\n\n#### Subgrupos por Cor\n\nPodemos adicionar mais uma variável ao gráfico, utilizando a cor para representá-la. Para isso, utilizamos os argumentos `fill` ou `color` dentro da função `aes()`:\n\n-   `fill`: preenche a área com a cor. Útil para gráficos de barras e colunas, por exemplo.\n-   `color`: adiciona a cor ao contorno. Útil para gráficos de linhas e pontos, por exemplo.\n\nVamos ver um exemplo de gráfico de colunas apresentado anteriormente, com preenchimento (`fill`) por região:\n\n```{r}\n#| label: exemplo-ggplot2-fill\ndados_tri_recente |>\n  ggplot() + \n  aes(x = perc_desocupacao, y = uf) + \n  geom_col(aes(fill = regiao)) # <1>\n```\n1.  Adicionando a cor de preenchimento utilizando a coluna `regiao`, com o argumento `fill`. Isso precisa estar **DENTRO** do `aes()`.\n\nVamos ver um exemplo de gráfico de linhas apresentado anteriormente, adicionamos pontos e usamos a cor para representar o período que consideramos como pandemia (`color`):\n\n```{r}\n#| label: exemplo-ggplot2-linha-color\ndados |> \n  filter(uf_sigla == \"BA\") |> # <1>\n  mutate(periodo_pandemia = as.character(periodo_pandemia)) |>\n  ggplot() + \n  aes(x = trimestre_inicio, y = perc_desocupacao) + \n  geom_line() +\n  geom_point(aes(color = periodo_pandemia)) # <2>\n```\n1.  Filtrando dados para representar apenas a Bahia.\n2.  Adicionando a cor do ponto utilizando a coluna `periodo_pandemia`, com o argumento `color`. Isso precisa estar **DENTRO** do `aes()`.\n\n#### Subgrupos por Facetas (*facet*)\n\nAs facetas (ou *facet*) são utilizadas para dividir o gráfico em subgráficos, com base nos valores de uma ou duas variáveis categóricas.\n\nExistem duas funções principais para criar facetas: `facet_wrap()` ou `facet_grid()`.\n\nA função `facet_wrap()` cria uma faceta para cada categoria da variável:\n\n```{r}\n#| label: exemplo-ggplot2-facet-wrap\ndados |> \n  ggplot() + \n  aes(x = trimestre_inicio, y = perc_desocupacao) + \n  geom_line(aes(group = uf)) + \n  facet_wrap(~regiao) # <1>\n```\n\n1.  Adicionando a função `facet_wrap()` para criar um gráfico para cada categoria da variável `regiao`.\n\nVeja que o gráfico é dividido em 5 subgráficos, um para cada região do Brasil. Os valores dos eixos `x` e `y` são os mesmos para todos os subgráficos, possibilitando a comparação entre eles.\n\nJá a função `facet_grid()` cria um gráfico para cada combinação de categorias de duas variáveis.\n\n```{r}\n#| label: exemplo-ggplot2-facet-grid\ndados |> \n  ggplot() + \n  aes(y = perc_desocupacao) + \n  geom_boxplot() + \n  facet_grid(regiao ~ periodo_pandemia) # <1>\n```\n\n1.  Adicionando a função `facet_grid()` para criar um gráfico para cada combinação de categorias das variáveis `regiao` e `periodo_pandemia`.\n\n### Revisão\n\nA partir dos exemplos apresentados, podemos listar alguns pontos importantes sobre o `ggplot2`:\n\n-   A função `ggplot()` cria um objeto gráfico vazio\n\n-   Podemos usar o pipe (`%>%` ou `|>`) para encadear as funções **até** a função `ggplot()`.\n\n-   A partir da função `ggplot()`, não usamos mais o pipe (`%>%` ou `|>`), e sim o `+`.\n\n-   A função `aes()` define o mapeamento estético (aesthetics mapping) entre as colunas da base de dados (variáveis) e os elementos visuais do gráfico (eixo, posição, cor, tamanho, etc).\n\n-   Os atributos estéticos (`aes`) `x` e `y` representam os eixos `x` e `y` do gráfico.\n\n-   Para adicionar uma geometria ao gráfico, usamos alguma função da família `geom_*`.\n\n-   Podemos usar mais do que uma geometria no mesmo gráfico, e a ordem importa!\n\n## Customizando gráficos\n\nAté aqui, discutimos como criar gráficos exploratórios, e vimos que o `ggplot2` nos permite criar gráficos de forma simples e rápida.\n\nApós criar um gráfico exploratório que nos ajuda a entender os dados, podemos customizá-lo para apresentar a outras pessoas, ou para publicar em relatórios e artigos.\n\nVamos ver algumas formas de customizar os gráficos criados, partindo do gráfico a seguir:\n\n```{r}\n#| label: customizando-base\n\ngrafico_base <- dados_tri_recente |> \n  ggplot() + \n  aes(y = uf, x = perc_desocupacao) + \n  geom_col()\n\ngrafico_base\n```\n\n### Ordenando as barras\n\nO ggplot ordena variáveis de texto em ordem alfabética. No exemplo acima, as barras estão ordenadas de acordo com a ordem alfabética dos estados: o Acre aparece primeiro, e o Tocantins, por último.\n\nPodemos ordenar as barras do gráfico de colunas de acordo com o valor da variável numérica utilizada (neste caso, `perc_desocupacao`).\n\nPara isso, precisaremos transformar a variável de texto `uf` em uma variável categórica ordenada (ou seja, um fator/*factor*).\n\n#### Fatores / *factors*\n\nOs fatores são utilizados para representar variáveis categóricas no R. Essas variáveis podem ser ordenadas ou não.\n\nEles são úteis para controlar a ordem de exibição de variáveis categóricas em gráficos, tabelas e modelos estatísticos.\n\nVamos criar um exemplo simples, criando uma tabela com a escolaridade de um grupo de pessoas:\n\n```{r}\nescolaridade <- tibble(\n  nome = c(\n    \"Maria\",\n    \"João\",\n    \"Pedro\",\n    \"Ana\",\n    \"José\",\n    \"Carlos\",\n    \"Mariana\",\n    \"Lucas\"\n  ),\n  escolaridade_concluida = c(\n    \"Pós-graduação\",\n    \"Ensino Médio\",\n    \"Ensino Fundamental II\",\n    \"Ensino Fundamental I\",\n    \"Ensino Fundamental I\",\n    \"Sem instrução\",\n    \"Ensino Técnico\",\n    \"Graduação\"\n  )\n)\n```\n\nSe ordenarmos a tabela pela variável `escolaridade_concluida`, veremos que a ordem é alfabética:\n\n```{r}\nescolaridade |> \n  arrange(escolaridade_concluida)\n```\n\nPara que, por exemplo, a variável `escolaridade_concluida` seja ordenada de acordo com a ordem de escolaridade, podemos transformá-la em um fator ordenado, utilizando a função `factor()`, e indicando quais são os níveis (*levels*) de escolaridade, na ordem que queremos que apareçam:\n\n```{r}\nescolaridade |>\n  mutate(\n  escolaridade_concluida_fct = factor( # <1>\n    escolaridade_concluida, # <2>\n    levels = c( # <3>\n      \"Sem instrução\", \n      \"Ensino Fundamental I\", \n      \"Ensino Fundamental II\", \n      \"Ensino Médio\", \n      \"Ensino Técnico\", \n      \"Graduação\", \n      \"Pós-graduação\" \n      ) # <3>\n    ) # <1>\n  ) |> \n  arrange(escolaridade_concluida_fct) # <4>\n```\n\n1.  Criando uma nova variável `escolaridade_concluida_fct` usando a função `factor()`\n2.  Variável que será transformada em fator\n3.  Níveis de escolaridade, na ordem que queremos que apareçam\n4.  Ordenando a tabela pela variável `escolaridade_concluida_fct`\n\nA função `factor()` é do R base, ou seja, não precisamos carregar nenhum pacote adicional para utilizá-la. Porém o pacote `{forcats}` (que faz parte do `{tidyverse}`) apresenta funções mais avançadas para trabalhar com fatores, como a função `fct_reorder()` que veremos a seguir.\n\n#### Voltando ao exemplo do gráfico de colunas\n\nPara isso, precisamos fazer uma transformação na variável `uf`, para que ela seja ordenada de acordo com o valor de `perc_desocupacao`. Isso deve ser feito **antes** de criar o gráfico.\n\nVamos ordenar as barras do gráfico anterior, de acordo com o valor de `perc_desocupacao`. Para isso, utilizamos a função `fct_reorder()` do pacote `{forcats}`.\n\nA função `fct_reorder()` recebe dois argumentos:\n\n-   A variável que queremos ordenar (a variável **categórica** que é representada em cada coluna)\n-   A variável que será utilizada para ordenar a primeira variável (a variável **numérica** que será utilizada para ordenar a variável categórica)\n\nNo caso do nosso exemplo, queremos ordenar as barras de acordo com o valor de `perc_desocupacao`, e a variável categórica que queremos ordenar é `uf`. Portanto, usaremos `fct_reorder(uf, perc_desocupacao)`.\n\n```{r}\n#| label: customizando-ordenacao\n\ngrafico_ordenado <- dados_tri_recente |> \n  mutate(uf_fct = forcats::fct_reorder(uf, perc_desocupacao)) |> # <1>\n  ggplot() + \n  aes(y = uf_fct, x = perc_desocupacao) + # <2>\n  geom_col()\n\ngrafico_ordenado\n```\n\n1.  Como explicado acima, criamos uma nova variável `uf_fct` que será utilizada para ordenar as barras de acordo com o valor de `perc_desocupacao`.\n2.  Utilizaremos no eixo `y` a variável criada: `uf_fct`.\n\n### Títulos e rótulos\n\nPor padrão, o gráfico está sem título, e com o nome das colunas nos eixos `x` e `y` e legendas.\n\nO `ggplot2` permite adicionar títulos e rótulos aos gráficos, utilizando a função `labs()`. Essa função apresenta vários argumentos, que podem ser divididos em dois grupos:\n\n-   Elementos com informações do gráficos: sempre estão disponíveis. Ex: `title`, `subtitle`, `caption`...\n\n-   Elementos relacionados aos atributos estéticos: dependem dos mapeamentos feitos com a função `aes()`. Ex: `x`, `y`, `fill`, `color`...\n\nVamos adicionar um título ao gráfico anterior, e rótulos para os eixos `x` e `y`:\n\n```{r}\ngrafico_com_labels <- grafico_ordenado + \n  labs(\n    title = \"Taxa de desocupação por estado\", # <1>\n    subtitle = \"Dados para o 2º trimestre 2024\",  # <1>\n    caption = \"Fonte: Dados referentes à PNAD Contínua Trimestral, obtidos no SIDRA/IBGE.\",  # <1>\n    x = \"Taxa de desocupação (%)\",  # <2>\n    y = \"Estado\", # <2>\n  )\n\ngrafico_com_labels\n```\n\n1.  Informações sobre o gráfico\n2.  Atributos estéticos utilizados\n\n### Escalas\n\nO `{ggplot2}` apresenta várias funções para trabalhar com as escalas dos gráficos. Essas funções apresentam o prefixo `scale_`.\n\nVamos explorar algumas dessas funções para trabalhar com escalas, mas lembre-se que existem muitas outras funções para customizar as escalas dos gráficos.\n\n::: {.callout-tip collapse=\"true\"}\n## Lista de funções para escalas no ggplot2\n\n```{r}\nls(\"package:ggplot2\") |> \n  stringr::str_subset(\"^scale_\")\n```\n:::\n\n#### Escalas de cores\n\nO `{ggplot2}` utiliza uma paleta de cores padrão bem colorida, observada nos exemplos anteriores. Porém podemos mudar a paleta de cores, ou até mesmo criar uma paleta de cores personalizada.\n\nAs funções de escalas de cores dependerão do tipo de atributo estético utilizado: `fill` ou `color`.\n\nQuando usamos o atributo `fill`, utilizamos as funções `scale_fill_*()`. Quando usamos o atributo `color`, utilizamos as funções `scale_color_*()`.\n\nOutro ponto importante é que as funções de escalas de cores dependem do **tipo de variável** que estamos mapeando.\n\nPor exemplo, se a variável mapeada é categórica, podemos usar a função `scale_fill_viridis_d()` para preencher as barras com uma paleta de cores viridis. Utilizando o exemplo que estamos criando, a região pode ser mapeada no atributo `fill`:\n\n```{r}\n#| label: customizando-cores-fill-categorico\ndados_tri_recente |> \n  ggplot() +\n  aes(y = uf, x = perc_desocupacao) +\n  geom_col(aes(fill = regiao)) +\n  scale_fill_viridis_d() \n```\n\nMas se a variável mapeada é numérica, podemos usar a função `scale_fill_viridis_c()`. O exemplo abaixo apresenta um gráfico similar, mas mapeando a variável `perc_desocupacao` no atributo `fill`:\n\n```{r}\n#| label: customizando-cores-fill-numerico\ndados_tri_recente |> \n  ggplot() +\n  aes(y = uf, x = perc_desocupacao) +\n  geom_col(aes(fill = perc_desocupacao)) +\n  scale_fill_viridis_c()\n```\n\n::: {.callout-tip collapse=\"true\"}\n## Lista de funções para escalas de cores no ggplot2\n\n-   Para o atributo `color`:\n\n```{r}\nls(\"package:ggplot2\") |> \n  stringr::str_subset(\"^scale_\") |> \n  stringr::str_subset(\"color\")\n```\n\n-   Para o atributo `fill`:\n\n```{r}\nls(\"package:ggplot2\") |> \n  stringr::str_subset(\"^scale_\") |> \n  stringr::str_subset(\"fill\")\n```\n:::\n\n\nUm ponto a ter atenção é o tipo de paleta de cores usadas. Algumas paletas de cores são mais adequadas para representar variáveis categóricas, enquanto outras são mais adequadas para representar variáveis numéricas. Veja a imagem com exemplos de paletas categóricas, sequenciais, e divergentes:\n\n![Fonte da imagem: [tmap book](https://r-tmap.github.io/tmap-book).](images/07_tipos_paletas.png)\n\n#### Escalas de eixos: datas\n\nPodemos customizar a escala do eixo `x` para apresentar as datas de forma personalizada. É importante que, para isso, a variável seja do tipo `Date` ou `Datetime`.\n\nPara isso, utilizamos a função `scale_x_date()`. Ela apresenta alguns argumentos importantes:\n\n-   `breaks`: indica a frequência das marcações no eixo `x`. Alguns exemplos são: `\"1 month\"` (marcação a cada mês), `\"3 months\"` (marcação a cada 3 meses), \"1 year\" (marcação a cada ano), entre outros.\n\n-   `date_labels`: formato da data que será apresentado. Alguns exemplos são: `\"%m/%Y\"` (mês/ano), `\"%d/%m/%Y\"` (dia/mês/ano), `\"%b/%Y\"` (mês abreviado/ano), entre outros.\n\nVamos criar um gráfico de linhas para visualizar a evolução da taxa de desocupação desde 2022 para a Bahia, e customizar a escala do eixo `x` para apresentar as datas de forma a apresentar uma marcação cada 3 meses:\n\n```{r}\n#| label: customizando-escala-data\ndados |>\n  filter(uf_sigla == \"BA\", ano >= 2022) |> # <1>\n  ggplot() +\n  aes(x = trimestre_inicio, y = perc_desocupacao) +\n  geom_line() +\n  geom_point() +\n  scale_x_date( # <2>\n    breaks = \"3 months\", # <3>\n    date_labels = \"%m/%Y\", # <4>\n    minor_breaks = \"1 month\" # <5>\n  ) # <2> \n```\n\n1.  Filtrando os dados para a Bahia, e considerando apenas os dados a partir de 2022.\n2.  Customizando a escala de data no eixo `x`.\n3.  Queremos que a marcação apareça a cada 3 meses.\n4.  Formato da data que será apresentado (mês/ano).\n5.  A *minor break* é uma linha que aparece entre as marcações principais, porém sem indicar uma legenda. Neste caso, queremos que apareça a cada mês.\n\n#### Escalas de eixos: numérico\n\nPodemos customizar a escala dos eixos `x` e/ou `y` quando estamos mapeando variáveis numéricas utilizando as funções `scale_x_continuous()` e `scale_y_continuous()`.\n\nO gráfico apresentado no exemplo anterior (onde configuramos a escala de datas) está com o eixo `y` limitado na faixa onde os dados são encontrados (11% à 18%). Porém, precisamos ter cuidado ao limitar os eixos, pois isso pode distorcer a visualização dos dados.\n\nPodemos definir que o eixo `y` comece em 0 e termine em 20%, utilizando o argumento `limits` da função `scale_y_continuous()`:\n\n```{r}\n#| label: customizando-escala-numerica\ndados |>\n  filter(uf_sigla == \"BA\", ano >= 2022) |>\n  ggplot() +\n  aes(x = trimestre_inicio, y = perc_desocupacao) +\n  geom_line() +\n  geom_point() +\n  scale_y_continuous(limits = c(0, 20))\n```\n\n### Temas\n\nOs gráficos que criamos até aqui utilizam o tema padrão do `{ggplot2}` (podemos identificar facilmente pelo fundo cinza). \n\nPorém existem funções para customizar o tema dos gráficos, alterando a cor de fundo, a cor dos textos, a fonte, entre outros elementos.\n\n#### `{ggplot2}`\n\nO `{ggplot2}` apresenta alguns temas que podem ser utilizados nos gráficos, utilizando funções com o prefixo `theme_*()`:\n\n```{r}\nls(\"package:ggplot2\") |> \n  stringr::str_subset(\"^theme_\") \n```\n\nPor exemplo, podemos alterar o tema do gráfico `grafico_ordenado` (criado anteriormente) para o tema `theme_minimal()`:\n\n```{r}\n#| label: customizando-tema-ggplot2\ngrafico_com_labels + \n  theme_minimal()\n```\n\n#### `{ggthemes}`\n\nO pacote `{ggthemes}` apresenta vários temas adicionais que podem ser utilizados nos gráficos criados com o `{ggplot2}`.\n\n```{r}\n#| eval: false\ninstall.packages(\"ggthemes\") # <1>\n```\n\n1.  Caso não tenha o pacote instalado, utilize essa linha de código para instalar o pacote.\n\nA lista abaixo apresenta os temas disponíveis no pacote `{ggthemes}`:\n\n```{r}\nlibrary(ggthemes)\nls(\"package:ggthemes\") |> \n  stringr::str_subset(\"^theme_\") \n```\n\nPodemos usar o tema `theme_economist()` para customizar o gráfico `grafico_com_labels`:\n\n```{r}\n#| fig-height: 6\n#| label: customizando-tema-ggthemes\ngrafico_com_labels + \n  ggthemes::theme_economist()\n```\n\n#### `{ipeaplot}`\n\nO pacote `{ipeaplot}` apresenta a função `theme_ipea()` que pode ser utilizada nos gráficos criados com o `{ggplot2}`.\n\n```{r}\n#| eval: false\ninstall.packages(\"ipeaplot\") # <1>\n```\n\n1.  Caso não tenha o pacote instalado, utilize essa linha de código para instalar o pacote.\n\nPodemos usar o tema `theme_ipea()` para customizar o gráfico abaixo:\n\n```{r}\n#| label: customizando-tema-ipeaplot\ndados |>\n  filter(regiao == \"Sul\") |>\n  ggplot() + \n  aes(x = trimestre_inicio, y = perc_desocupacao, color = uf) + \n  geom_line() + \n  ipeaplot::theme_ipea()\n```\n\n### Usando as funções de customização\n\nNos exemplos acima, apresentamos algumas funções para customizar os gráficos criados com o `{ggplot2}`.\n\nVamos usar essas funções para customizar o gráfico apresentado no exemplo acima:\n\n```{r}\n#| label: customizando-grafico-completo\ngrafico_customizado <- dados |> # <1>\n  filter(regiao == \"Sul\") |> \n  ggplot() + \n  aes(x = trimestre_inicio, y = perc_desocupacao, color = uf) +  \n  geom_line() + \n  ipeaplot::theme_ipea() + # <2>\n  ipeaplot::scale_color_ipea(palette = \"Viridis\") + # <3>\n  scale_x_date(breaks = \"1 year\", date_labels = \"%Y\") + # <4>\n  labs( # <5>\n    title = \"Taxa de desocupação por estado na região Sul\",\n    subtitle = \"Dados da PNAD Contínua Trimestral\",\n    caption = \"Fonte dos dados: SIDRA/IBGE.\",\n    color = \"Estado\",\n    x = \"Ano\",\n    y = \"Taxa de desocupação (%)\"\n  ) # <5>\n\ngrafico_customizado\n```\n\n1.  Vamos salvar o resultado do gráfico em um objeto.\n2.  Utilizando o tema `theme_ipea()` do pacote `{ipeaplot}`.\n3.  Utilizando a função `scale_color_ipea()` (do pacote `{ipeaplot}`) com paleta de cores `Orange-Blue`.\n4.  Customizando a escala de data no eixo `x`: apresentar uma marcação a cada ano.\n5.  Adicionando títulos e rótulos ao gráfico.\n\n## Salvando os gráficos\n\nPodemos salvar o gráfico em um arquivo, para utilizá-lo posteriormente. Para isso, criamos um objeto contendo o gráfico que queremos salvar, e utilizamos a função `ggsave()`.\n\nA função `ggsave()` salva o gráfico em um arquivo, e apresenta dois argumentos principais:\n\n-   `filename`: nome do arquivo onde o gráfico será salvo\n\n-   `plot`: objeto contendo o gráfico que será salvo\n\nEssa função também apresenta alguns argumentos para customizar como o gráfico será salvo, como:\n\n-   `width`: largura do gráfico\n\n-   `height`: altura do gráfico\n\n-   `units`: unidade de medida para a largura e altura do gráfico\n\n-   `dpi`: resolução do gráfico (quanto maior o valor, melhor a qualidade da imagem)\n\nVamos utilizar o gráfico customizado criado anteriormente (salvo no objeto `grafico_customizado`), e salvar em um arquivo utilizando a função `ggsave()`:\n\n```{r}\nggsave( # <1>\n  filename = \"graficos/grafico_customizado.png\", # <2>\n  plot = grafico_customizado, # <3>\n  width = 7, # <4>\n  height = 5, # <5>\n  dpi = 300 # <6>\n)\n```\n\n1.  Função para salvar o gráfico.\n2.  Nome do arquivo onde o gráfico será salvo.\n3.  Objeto contendo o gráfico que será salvo.\n4.  Largura do gráfico.\n5.  Altura do gráfico.\n6.  Resolução do gráfico.\n\nPodemos verificar se o gráfico foi salvo corretamente, utilizando a função `file.exists()`:\n\n```{r}\nfile.exists(\"graficos/grafico_customizado.png\")\n```\n\n## Preparação dos dados\n\nOs exemplos que utilizamos mostram um padrão no uso do `ggplot2`: a base de dados é passada para a função `ggplot()`, definimos quais variáveis serão mapeadas com a função `aes()`, e adicionamos uma (ou mais) geometria ao gráfico.\n\nPorém, algo que pode ser trabalhoso é preparar os dados para o gráfico. Nos exemplos que fizemos anteriormente, utilizamos uma tabela já preparada.\n\nNo entanto, em muitos casos, precisamos preparar os dados antes de criar o gráfico. Neste caso, muitas funções já vistas em aulas anteriores serão úteis (como `filter()`, `select()`, `mutate()`, `group_by()`, `summarise()`, `pivot_longer()`, `pivot_wider()`, entre outras). Caso necessário, consulte as aulas [Transformando dados](05_transformacao.qmd) e [Análise exploratória de dados](06_analise_exploratoria.qmd).\n\nEm [Exemplo prático: Visualização](07_visualizacao_exemplo.qmd), é apresentado um exemplo prático de visualização de dados, onde é feita a preparação dos dados antes de criar o gráfico.\n\n## Sugestões de exercícios\n\n### Criando gráficos exploratórios\n\n1.  Observe o gráfico abaixo, criado com o objeto `dados_tri_recente`, e responda:\n    -   Quais são as variáveis mapeadas nos eixos x e y?\n    -   Qual é a geometria utilizada?\n    -   Existe algum outro atributo estético mapeado no gráfico?\n\n```{r}\n#| label: exercicio-exploratoria-1\n#| echo: false\ndados_tri_recente |> \n  mutate(\n    percentual_forca_de_trabalho_ocupada = mil_pessoas_forca_de_trabalho_ocupada / mil_pessoas_total * 100,\n    uf = forcats::fct_reorder(uf, percentual_forca_de_trabalho_ocupada)\n  ) |> \n  ggplot() + \n  aes(x = percentual_forca_de_trabalho_ocupada, y = uf) + \n  geom_col(aes(fill = regiao)) +\n  theme_light()\n```\n\n2.  Observe o gráfico abaixo, e tente identificar qual é o problema no código. Sugira uma solução para corrigir o problema.\n\n```{r}\n#| label: exercicio-exploratoria-2\n\ndados_tri_recente |>\n  ggplot() + \n  aes(x = perc_desocupacao, y = uf) + \n  geom_col(aes(fill = \"regiao\"))\n```\n\n3.  Crie um gráfico de linhas para representar a evolução da taxa de desocupação ao longo do tempo para os estados da região Centro Oeste. Use as cores para representar cada estado.\n\n::: {.callout-tip collapse=\"true\"}\n## Dica 1\n\nO resultado esperado é:\n\n```{r}\n#| label: exercicio-exploratoria-3\n#| echo: false\ndados |> \n  filter(regiao == \"Centro Oeste\") |> \n  ggplot() + \n  aes(x = trimestre_inicio, y = perc_desocupacao, color = uf) + \n  geom_line()\n```\n:::\n\n4.  Crie um gráfico de linhas para representar a evolução da taxa de desocupação ao longo do tempo para os estados da região Norte. Utilize facetas para separar os gráficos por estado.\n\n::: {.callout-tip collapse=\"true\"}\n## Dica 1\n\nO resultado esperado é:\n\n```{r}\n#| label: exercicio-exploratoria-4\n#| echo: false\ndados |> \n  filter(regiao == \"Norte\") |> \n  ggplot() + \n  aes(x = trimestre_inicio, y = perc_desocupacao) + \n  geom_line() + \n  facet_wrap(~ uf)\n```\n:::\n\n### Customizando gráficos\n\n1.  Crie um gráfico de linhas para representar a evolução da taxa de desocupação ao longo do tempo para os estados da região Nordeste do Brasil, e salve em um objeto chamado `grafico_desocupacao_nordeste`. Mapeie os estados na cor das linhas. Com esse objeto, faça as tarefas abaixo:\n\n- a) Configure a escala do eixo x para que apareça as marcações dos anos. Isso ajudará a visualizar melhor a periodicidade dos dados.\n\n- b) Adicione os títulos e rótulos dos eixos no gráfico.\n\n- c) Experimente os temas apresentados anteriormente, e use no gráfico o que mais gostar.\n\n- d) Altere a escala de cores das linhas, utilizando uma paleta de cores de sua preferência. Tome cuidado pois estamos mapeando uma variável categórica.\n\n- e) Salve o gráfico em um arquivo chamado `graficos/grafico_desocupacao_nordeste.png`.\n\n\n## Links citados na aula\n### Parte 1 \n\n\n- [Site from data to viz](https://www.data-to-viz.com/) - galeria de gráficos\n\n- [R Graph Gallery](https://r-graph-gallery.com/) - Galeria de gráficos\n\n- Boxplot:\n  - [Texto sobre interpretação do boxplot](https://fernandafperes.com.br/blog/interpretacao-boxplot/)\n  - [R Graph Gallery - exemplos de boxplot](https://r-graph-gallery.com/boxplot.html)\n\n\n- Sobre gráficos de pizza:\n  - [Texto: O que não fazer em gráficos de pizza](https://fernandafperes.com.br/blog/reconstruindo-grafico-pizza/)\n  - [Texto escrito por Julio Trecenti (Dr. em Estatística): Gráficos de pizza são ruins?](https://forum.abj.org.br/t/graficos-de-pizza-sao-ruins/41)\n  \n- Sugestão de livros:\n  - Storytelling com Dados - Cole Nussbaumer Knaflic\n\n### Parte 2\n\n- [Gráficos por Bruno Mioto](https://www.brunomioto.com/charts.html)\n- [Documentação: pacote forcats](https://forcats.tidyverse.org/articles/forcats.html)\n- [Color palette finder](https://r-graph-gallery.com/color-palette-finder)\n\n## Sugestões de materiais\n\n-   Livro [R para Ciência de Dados 2ed](https://cienciadedatos.github.io/pt-r4ds/):\n    -   [Visualização de dados](https://cienciadedatos.github.io/pt-r4ds/data-visualize.html)\n    -   [Vsualizar](https://cienciadedatos.github.io/pt-r4ds/visualize.html)\n    -   [Visualizar: Camadas](https://cienciadedatos.github.io/pt-r4ds/layers.html)\n    -   [Visualizar: Análise exploratória de dados](https://cienciadedatos.github.io/pt-r4ds/EDA.html)\n    -   [Visualizar: Comunicação](https://cienciadedatos.github.io/pt-r4ds/communication.html)\n-   Livro: [Metodologia de Pesquisa Jurimétrica](https://livro.abj.org.br/):\n    -   [Capítulo 4 - Visualização](https://livro.abj.org.br/04-visualizacao.html)\n\n### Extras: Curiosidades e Referências\n\n-   [Grammar of Graphics](https://link.springer.com/book/10.1007/0-387-28695-0) - livro de Leland Wilkinson, cuja teoria é a base do `ggplot2`\n\n-   [ggplot2: Elegant Graphics for Data Analysis](https://ggplot2-book.org/) - livro de Hadley Wickham, criador do `ggplot2`, Danielle Navarro e Thomas Lin Pedersen (em inglês)\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"toc-depth":5,"output-file":"07_visualizacao.html"},"language":{"toc-title-document":"Índice","toc-title-website":"Nesta página","related-formats-title":"Outros formatos","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Fonte","other-links-title":"Outros Links","code-links-title":"Ligações de código","launch-dev-container-title":"Iniciar Dev Container","launch-binder-title":"Iniciar Binder","article-notebook-label":"Caderno do Artigo","notebook-preview-download":"Baixar Caderno","notebook-preview-download-src":"Descarregar código fonte","notebook-preview-back":"Voltar ao Artigo","manuscript-meca-bundle":"Arquivo MECA","section-title-abstract":"Resumo","section-title-appendices":"Apêndices","section-title-footnotes":"Notas de rodapé","section-title-references":"Referências","section-title-reuse":"Reuso","section-title-copyright":"Direito autoral","section-title-citation":"Citação","appendix-attribution-cite-as":"Por favor, cite este trabalho como:","appendix-attribution-bibtex":"BibTeX","appendix-view-license":"Ver Licença","title-block-author-single":"Autor","title-block-author-plural":"Autores","title-block-affiliation-single":"Afiliação","title-block-affiliation-plural":"Afiliações","title-block-published":"Data de Publicação","title-block-modified":"Data de Modificação","title-block-keywords":"Palavras-chave","callout-tip-title":"Dica","callout-note-title":"Nota","callout-warning-title":"Aviso","callout-important-title":"Importante","callout-caution-title":"Cuidado","code-summary":"Código","code-tools-menu-caption":"Código","code-tools-show-all-code":"Mostrar o código","code-tools-hide-all-code":"Esconder o código","code-tools-view-source":"Ver o código fonte","code-tools-source-code":"Código fonte","tools-share":"Share","tools-download":"Download","code-line":"Linha","code-lines":"Linhas","copy-button-tooltip":"Copiar para a área de transferência","copy-button-tooltip-success":"Copiada","repo-action-links-edit":"Editar essa página","repo-action-links-source":"Ver o código fonte","repo-action-links-issue":"Criar uma issue","back-to-top":"De volta ao topo","search-no-results-text":"Nenhum resultado","search-matching-documents-text":"documentos correspondentes","search-copy-link-title":"Copiar link para a busca","search-hide-matches-text":"Esconder correspondências adicionais","search-more-match-text":"mais correspondência neste documento","search-more-matches-text":"mais correspondências neste documento","search-clear-button-title":"Limpar","search-text-placeholder":"","search-detached-cancel-button-title":"Cancelar","search-submit-button-title":"Enviar","search-label":"Procurar","toggle-section":"Alternar seção","toggle-sidebar":"Alternar barra lateral","toggle-dark-mode":"Alternar modo escuro","toggle-reader-mode":"Alternar modo de leitor","toggle-navigation":"Alternar de navegação","crossref-fig-title":"Figura","crossref-tbl-title":"Tabela","crossref-lst-title":"Listagem","crossref-thm-title":"Teorema","crossref-lem-title":"Lema","crossref-cor-title":"Corolário","crossref-prp-title":"Proposição","crossref-cnj-title":"Conjetura","crossref-def-title":"Definição","crossref-exm-title":"Exemplo","crossref-exr-title":"Exercício","crossref-ch-prefix":"Capítulo","crossref-apx-prefix":"Apêndice","crossref-sec-prefix":"Seção","crossref-eq-prefix":"Equação","crossref-lof-title":"Lista de Figuras","crossref-lot-title":"Lista de Tabelas","crossref-lol-title":"Lista de Listagens","environment-proof-title":"Comprovação","environment-remark-title":"Comentário","environment-solution-title":"Solução","listing-page-order-by":"Ordenar por","listing-page-order-by-default":"Pré-selecionado","listing-page-order-by-date-asc":"Mais velho","listing-page-order-by-date-desc":"O mais novo","listing-page-order-by-number-desc":"Decrescente","listing-page-order-by-number-asc":"Crescente","listing-page-field-date":"Data","listing-page-field-title":"Título","listing-page-field-description":"Descrição","listing-page-field-author":"Autor","listing-page-field-filename":"Nome do arquivo","listing-page-field-filemodified":"Arquivo modificado","listing-page-field-subtitle":"Subtítulo","listing-page-field-readingtime":"Tempo de leitura","listing-page-field-wordcount":"Contagem de Palavras","listing-page-field-categories":"Categorias","listing-page-minutes-compact":"{0} minutos","listing-page-category-all":"Tudo","listing-page-no-matches":"Nenhum item correspondente","listing-page-words":"{0} palavras","listing-page-filter":"Filtro","draft":"Rascunho"},"metadata":{"lang":"pt","fig-responsive":true,"quarto-version":"1.5.57","page-navigation":true,"page-footer":{"border":true,"left":"Copyright 2024, Beatriz Milz e IPEA/COCD","right":[{"icon":"github","href":"https://github.com/ipeadata-lab/curso_r_intro_202409s"}]},"bibliography":["references.bib"],"editor":"source","theme":"cosmo","title":"Visualizando dados","code-annotations":"hover"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}