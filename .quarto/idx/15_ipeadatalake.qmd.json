{"title":"Acessando dados com o {ipeadatalake}","markdown":{"yaml":{"title":"Acessando dados com o {ipeadatalake}","subtitle":"Módulo ministrado pela COCD","from":"markdown+emoji","code-annotations":"hover","execute":{"eval":true}},"headingText":"Introdução","containsRefs":false,"markdown":"\n\n\nEm termos gerais, um \"*data lake*\" é um conjunto de bases de dados armazenadas num repositório que permite rápido e fácil acesso e integração entre bases diferentes. O Ipea vem gradativamente progredindo na construção e integração do seu *data lake*, que inclui uma ampla gama de bases de dados públicos, e registros administrativos restritos do governo federal e instituições parceiras. \n\nTodos esses dados podem ser acessados diretamente no `storage6`, como visto na aula anterior. No entanto, uma maneira mais fácil de acessar esses dados é pelo pacote de R \n[**{ipeadatalake}**](https://gitlab.ipea.gov.br/data/ipeadatalake). Nesta aula você vai aprender alguns exemplos de como usar o pacote {ipeadatalake} no R. ![](images/logo_ipeadatalake.png){width=150 fig-align=\"right\"}\n\n\n\n# Instalando o {ipeadatalake}\n\nSó é possível instalar e usar o pacote {ipeadatalake} em computadores dentro da rede do Ipea. Para instalar o pacote, você vai precisar dos pacotes {remotes}, {getPass} e {git2r}.\n\n```{r warning = FALSE, eval = FALSE}\n#| label: pacotes-de-instalacao-do-ipeadatalake\npkgs_to_install <- c('remotes', 'getPass', 'git2r')\ninstall.packages(pkgs_to_install)\n```\n\nPronto, agora basta rodar o codigo abaixo para instalar o {ipeadatalake}. Note que você deve passar sua matrícula para o objeto `your_id`, e que o R abrir uma janela *pop-up* para você inserir sua senha.\n\n```{r warning = FALSE, eval = FALSE, message=FALSE}\n#| label: instalando-ipeadatalake\n# seu login (matricula)\nyour_id <- \"r1701707\" \n\nremotes::install_git(\n  url = \"https://gitlab.ipea.gov.br/data/ipeadatalake@v0.1.0\", \n  credentials = git2r::cred_user_pass(\n    username = your_id, \n    password = getPass::getPass()\n    )\n  )\n\n```\n\n\n# Visão geral do {ipeadatalake}\n\nAté o momento desse curso, o pacote incluía as seguintes funções / bases de dados:\n\n1. `ler_bmap()`              # trabalho\n2. `ler_cadunico()`\n3. `ler_censo_escolar()`\n4. `ler_censo_demografico()`\n5. `ler_cnefe()`\n6. `ler_pnadc()`\n7. `ler_rais()`\n\nEstas são as algumas das principais bases de dados do *data lake* do Ipea, mas em breve o pacote deverá incluir novas funções para ler outras bases, como as listadas abaixo. A inclusão de novas bases no {ipeadatalake} também depende em grande medida dos pesquisadores especialistas de cada base e que contribuem para sua organização e importação.\n\n8. [*em breve*] `ler_condicionalidades()`\n9. [*em breve*] `ler_pof()`\n10. [*em breve*] `ler_cpf()`\n11. [*em breve*] `ler_cnpj()`\n12. [*em breve*] `ler_pnad()`\n\n\nA sintaxe de todas as funções do {ipeadatalake} segue uma mesma lógica, o que torna intuitivo e fácil a leitura de diversas bases de dados com apenas uma linha de código. A estrutura básica das funções tem os seguintes argumentos:\n\n```{R eval = FALSE, message = FALSE}\n#| label: ilustra-argumentos-das-funcoes\nler_rais(\n  ano,           # <1> \n  colunas,       # <2> \n  as_data_frame, # <3>\n  geoloc,        # <4> \n  verbose        # <5> \n  )\n```\n1. Ano de referenência\n2. seleciona colunas que devem ser lidas\n3. Retorna resultado como um `Arrow DataSet` ou `data.frame`\n4. Adiciona columnas com dados espaciais (disponível apenas para algumas bases)\n5. Permite função imprimir mensagens\n\nAlém dessas funções de leitura de dados, o {ipeadatalake} tem a função `abrir_documentacao()`, que abre a pasta com a documentação de uma base de dados selecionada.\n\n```{r, message = FALSE, eval=FALSE}\n#| label: ler_documentation\n# censo escolar\nipeadatalake::abrir_documentacao(dados = 'censo_escolar')\n\n# RAIS\nipeadatalake::abrir_documentacao(dados = 'rais')\n```\n\n\n\n## Trabalhando com dados maior do que a RAM\n\nAssim como o pacote [{censobr}](https://ipeagit.github.io/censobr/), que vimos na aula anterior, o pacote {ipeadatalake} também facilita que usuários trabalhem com grandes bases de dados de maneira eficiente utilizando pouca memória RAM a partir de integração com pacotes como {dplyr}, {arrow} e {duckdb}.\n\n![](images/arrow_plus_dplyr.png){width=350 fig-align=\"center\"}\n\n::: {.callout-important appearance=\"default\"}\nPor padrão, as funções do {ipeadatalake} sempre retoram um objeto tipo `Dataset` / `ArrowObject`.\n:::\n\n\n\nVamos então partir para exemplos na prática, e começar carregando as bibliotecas que vamos usar.\n\n```{r, message = FALSE, warning=FALSE}\n#| label: load-libraries\n# carrega bibliotecas\nlibrary(ipeadatalake)\nlibrary(arrow)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(geobr)\n```\n\n# Exemplo 1: Censo Demográfico\n\nO pacote possui a função `ler_censo_demografico()` para ler os dados dos censos demográficos brasileiros (IBGE). Esta função é um *wrapper* do pacote {censobr} para ler os dados localmente do *data lake* to Ipea. Assim, você tem as vantagens do {censobr} sem ter que baixar os dados, e o acesso é praticamente instantâneo. Uma diferença importante é que aqui, ao invés de termos uma função separada para cada base de dados do censo demográfico, nós temos uma única função, e o tipo de base de dados deve ser informado no argumento `type`:\n\n```{r, message = FALSE, warning=FALSE}\n#| label: exemplo-ler_censo_demografico\n# dados de populacao\ndf_pop <- ipeadatalake::ler_censo_demografico(\n  ano = 2010, \n  tipo = 'populacao'\n  )\n\n# dados de domicilios\ndf_dom <- ipeadatalake::ler_censo_demografico(\n  ano = 2010, \n  tipo = 'domicilios'\n  )\n\n```\n\n\n# Exemplo 2: Censo Escolar\n\nOutra base de dados pública disponível no pacote é o Censo Escolar (Inep). A base traz os dados tanto de escolas de ensino básico quanto profissional. Para edições do censo anteriores a 2007, no entanto, o usuário precisa explicitar qual tipo de escola deve ser lido, pois a função carrega separadamente os dados das escolas de educação básica (`\"type = basica\"`), e as escolas de ensino profissional (`\"type = profissional\"`).\n\n\n```{r, message = FALSE, warning=FALSE}\n#| label: exemplo-ler_censo_escolar\n# todas escolas em 2023\ndf_esc_2023 <- ipeadatalake::ler_censo_escolar(\n  ano = 2023\n  )\n\n# escolas de ensino basico em 2000\ndf_esc_2000 <- ipeadatalake::ler_censo_escolar(\n  ano = 2000, \n  tipo = 'basica', \n  )\n\n```\n\nNesse exercício abaixo, nós vamos calcular a proporção das escolas públicas municipais que estava conectadas à rede de água em 2023, e como esse índice varia entre as grandes regiões do Brasil.\n\n```{r, message = FALSE, warning=FALSE}\n#| label: exemplo-ler_censo_escolar-tabela\ndf_esc_agua <- df_esc_2023 |> \n  filter(TP_DEPENDENCIA == 3) |>                                # <1>\n  group_by(NO_REGIAO) |>                                        # <2>\n  summarise(total_escolas = n(),                                # <3>\n            rede_agua_abs = sum(IN_AGUA_REDE_PUBLICA, na.rm=T), # <4>\n            rede_agua_pct = rede_agua_abs / total_escolas) |>   # <5>\n    collect()                                                   # <6>\n\n\nhead(df_esc_agua)\n```\n1. Mantém somente escolas públicas municipais\n2. Agrupa por região\n3. Conta total de escolas\n4. Conta total de escolas com rede de água (valor 1 com rede, e 0 sem rede)\n5. Calcula proporção de escolas com rede de água\n6. Carrega resultado na memória\n\n\nCom essa tabela em mãos, a gente pode fazer um ggplot com o que aprendemos na aula passada.\n\n```{r, message = FALSE, warning=FALSE}\n#| label: exemplo-ler_censo_escolar-figura\nggplot(data = df_esc_agua) +\n  geom_col(aes(x=reorder(NO_REGIAO, rede_agua_pct), y = rede_agua_pct), fill='#0d6556') +\n  scale_y_continuous(labels = scales::percent) +\n  labs(title = \"Escolas públicas municipais conectadas a rede de água. Brasil, 2023.\", \n       x=\"Região\", y=\"Proporção\") +\n  theme_classic()\n\n```\n\n# Exemplo 2: PNADc\n\nA PNAD Contínua (PNADc) é uma pesquisa amostral realizada pelo IBGE que coleta dados socioeconômicos regularmente para monitorar indicadores sobre o mercado de trabalho, rendimento, educação e outras características da população. A PNADc tem uma lógica interna as vezes complexa devido ao desenho de como a pesquisa é conduzida e de que quais variáveis são perguntadas em cada onda da pesquisa. Para saber quais questões foram perguntadas em qual onda da pesquisa, ver detalhes na documentação da função `??ler_pnadc` e no dicionário de variáveis.\n\nEm linhas gerais, o comportamento padrão da função `ler_pnadc()` é retornar os dados anuais consolidados para o `ano` de input do usuário, e você precisa apenas indicar se quer os dados levantados durante a entrevista de número `1` ou `5`. Alternativamente, basta você indicar o `ano` de input e o `trimestre` de quando os dados foram coletados.\n\nNeste exemplo abaixo, nós vamos calcular qual a proporção de pessoas com ensino superior completo segundo cor/raça no ano de 2023. Para ler os dados, basta rodar o código:\n\n```{r, message = FALSE, warning=FALSE}\n#| label: exemplo-ler_pnadc\ndf_pnadc <- ipeadatalake::ler_pnadc(\n  ano = 2023, \n  entrevista  = 1\n  )\n\n```\n\nO próximo passo é processar os dados para calcular o indicador desejado. Isso exige que a gente crie manipule os dados seguindo o conteúdo que aprendemos nas aulas passadas.\n\n\n```{r, message = FALSE, warning=FALSE}\n#| label: exemplo-ler_pnadc_process\n\ntab_edu <- df_pnadc |>\n  filter(v2009 >= 20) |>                           # <1>\n  mutate(dummy_edu_sup = ifelse(vd3004==7,1,0)) |> # <2>\n  group_by(v2010) |>                               # <3>\n  summarise(pop_total = sum(v1031),                # <4>\n          pop_sup_abs = sum(v1031 * dummy_edu_sup),# <5>\n          pop_sup_pct = pop_sup_abs / pop_total    # <6>\n          ) |>             \n  collect()                                        # <7>\n\nhead(tab_edu)\n```\n1. Mantém apenas pessoas com 20 anos de idade ou mais\n2. Cria uma variável dummy indicando se a pessoa completou ensino superior\n3. Agrupa observações por cor/raça\n4. Calcula população total\n5. Calcula população com ensino superior completo\n6. Calcula proporção de pessoas com ensino superior completo\n7. Carrega resultado na memória\n\n\nPor fim, basta recodificar a coluna de cor/raça e fazermos um ggplot.\n\n```{r, message = FALSE, warning=FALSE}\n#| label: exemplo-ler_pnadc_figura\n# recodifica cor\ntab_edu <- tab_edu |>\n  mutate( cor = dplyr::case_when(\n    v2010 == 1 ~ 'Branca',\n    v2010 == 2 ~ 'Preta',\n    v2010 == 3 ~ 'Amarela',\n    v2010 == 4 ~ 'Parda', \n    v2010 == 5 ~ 'Indígena',\n    v2010 == 9 ~ 'Ignorado'))\n\n# figura\nggplot(data=tab_edu) +\n  geom_col(aes(x=reorder(cor, pop_sup_pct), y=pop_sup_pct), fill='#1ba185') +\n  scale_y_continuous(labels = scales::percent) +\n  labs(title = \"Proproção de pessoas com 20 anos ou mais com ensino superior completo. Brasil, 2023.\", x=\"Cor/raça\", y=\"Proporção\") +\n  theme_classic()\n```\n\n### Amostra complexa\n\nPara usuários avançados que queiram fazer análises incorporando o desenho de amostra complexa da PNADc, basta passar o parâmetro `survey = TRUE` que a função `ler_pnadc()` automaticamente gera e retorna o objeto `svyrep.design`. Dicas sobre como analisar esses dados utilizando os pacotes {survey} e {srvyr} [neste livro online](https://tidy-survey-r.github.io/tidy-survey-book/).\n\n```{r, message = FALSE, warning=FALSE}\n#| label: exemplo-ler_pnadc_survey\nsvy_pnadc <- ipeadatalake::ler_pnadc(\n  ano = 2023, \n  entrevista = 1, \n  survey = TRUE\n  )\n\nclass(svy_pnadc)\n```\n\n\n# Exemplo 3: Cadastro Único\n\nO Cadastro Único é a principal fonte de dados sobre a população em situação de vulnerabilidade socioeconômica no Brasil, e é utilizado para planejamento, implementação, monitoramento, operação e avaliação de diversas políticas de todas as esferas federativas no país.\n\nO Ipea recebe dados das atualizações mensais do Cadúnico. Por isso, ao invés do usuário informar o ano dos dados, é necessário informar a data `date` de referência no formato `YYYYMM`. Além disso, o usuário deve especificar se a função deve ler os dados de famílias (`type = 'familias'`) ou de pessoas (`type = 'pessoas'`)\n\n\nNesse examplo aqui, nós vamos estimar a proporção de famílias com acesso a rede de água em cada região do Brasil em julho de 2024. Repare que podemoves usar o argumento `columns` para carregar apenas as colunas que vamos usar, o que tornar todo processo muito mais rápido e eficiente.\n\n\n```{r, message = FALSE, warning=FALSE}\n#| label: exemplo-ler_cadunico\n\n# ler somente colunas de UF e tipo de abastecimento de agua\ndf_cadunico <- ipeadatalake::ler_cadunico(\n  data = 202407, \n  tipo = 'familia',\n  colunas = c('co_uf', 'co_abaste_agua_domic_fam')          # <1>\n)\n```\n1. Lendo somente as colunas necessárias\n\n\nCom os dados em formato arrow, podemos agora calcular proporção de famílias com rede de água em cada UF:\n\n```{r, message = FALSE, warning=FALSE}\n#| label: exemplo-ler_cadunico_summary_tb\n# recodifica coluna de abastecimento de agua\ndf_cadunico_agua <- df_cadunico |>\n  mutate(agual_canalizada = ifelse(co_abaste_agua_domic_fam==1, 1, 0)) |> # <1>\n  group_by(co_uf) |>                                                      # <2>\n  summarise(total_familias = n(),                                         # <3>\n            rede_agua_abs = sum(agual_canalizada, na.rm=T),               # <4>\n            rede_agua_pct = rede_agua_abs / total_familias) |>            # <5>\n  collect()                                                               # <6>\n\n\n```\n1. Recodifica variável de rede de água como dummy (1 com acesso, 0 sem acesso)\n2. Agrupa por UF\n3. Conta total de famílias\n4. Conta total de famílias com rede de água\n5. Calcula proporção de famílias com rede de água\n6. Carrega resultado na memória\n\n\nEssa tabela acima é agrupada por UF, então agora só falta agruparos resultados  por região e fazer o gráfico.\n\n```{r, message = FALSE, warning=FALSE}\n#| label: exemplo-cad_unico-figura\n\n# tira média de cada região\ndf_cadunico_agua_tb <- df_cadunico_agua |>\n  mutate(regiao = substring(co_uf, 1, 1)) |>\n  group_by(regiao) |>\n  summarise(cobertura_agua  = weighted.mean(x=rede_agua_pct, total_familias))\n\n# figura\nggplot(data = df_cadunico_agua_tb) +\n  geom_col(aes(x=reorder(regiao, cobertura_agua), y = cobertura_agua), , fill='#2f4b7c') +\n  scale_y_continuous(labels = scales::percent) +\n  labs(title = \"Escolas públicas municipais conectadas a rede de água. Brasil, 2023.\", \n       x=\"Região\", y=\"Proporção\") +\n  theme_classic()\n```\n\n\n\n# Exemplo 4: Dados com coordenadas geográficas\n\nAlgumas bases de dados no *data lake* do Ipea possuem informação dos endereços das unidades de análise (e.g. empresas, pessoas, estabelecimentos de ensino etc). A política que o Ipea começou a adotar a partir de 2023 é fazer a geolocalização massiva de todas as suas bases de dados para todos os anos, e disponibilizar as informações espaciais para todos os usuários.\n\n::: {.callout-note appearance=\"default\"}\nAtualmente, essas informações espaciais estão disponíveis apenas para algumas bases, como censo escolar, CadÚnico, e Rais.\n:::\n\nEm todos os casos, pasta passar o parametro `geocode = TRUE` para acessar esses dados. Neste exemplo abaixo, nós lemos os dados do censo escolar e adicionamos as colunas espaciais.\n\n\n```{r, message = FALSE, warning=FALSE}\n#| label: exemplo-dados_espaciais_read\n# ler dados com colunas espaciais\ndf_esc_2023 <- ipeadatalake::ler_censo_escolar(\n  ano = 2023, \n  geoloc = TRUE\n  )\n\n```\n\nPare por um instante e veja o nome das colunas espaciais usando `names(df_esc_2023)`. Veja detalhes na documentação da função: `??ler_censo_escolar` o que essas colunas significam.\n\n::: {.callout-warning appearance=\"default\"}\nDentre as colunas de dados espaciais, a coluna `Addr_type` é que traz informação sobre as categorias de precisão das coordenadas geográficas. A definicao exata de cada categoria se encontra [na documentacao do ArcGIS](https://pro.arcgis.com/en/pro-app/latest/help/data/geocoding/what-is-included-in-the-geocoded-results-.htm). Você deve ter muita cautela na hora de usar estes dados, e entender qual o grau de precisão mínimo que a sua análise exige.\n:::\n\nAgora que entendemos um pouco melhor esses dados, vamos fazer uma rápida inspeção visual para examinar a distribuição espacial das escolas com acesso a rede de água no estado de Sergipe. Neste exemplo, nós só precisamos saber o município de cada escola, então vamos aceitar os resultados do geocode para todas as observações da base.\n\n\n```{r, message = FALSE, warning=FALSE}\n#| label: exemplo-dados_espaciais_mapa\n\n# filtrar somente estado de Sergipe\ndf_esc_sergipe <- df_esc_2023 |>\n  filter(NO_UF == \"Sergipe\") |>\n  collect()\n  \n# ler geometria do estado de Sergipe\nsf_sergipe <- geobr::read_state(code_state = \"SE\")\n\n# mapa\nggplot() +\n  geom_sf(data = sf_sergipe) +\n  geom_point(data = df_esc_sergipe,\n             aes(x=lon, y = lat, color=as.factor(IN_AGUA_REDE_PUBLICA)), \n             alpha=.1, show.legend = FALSE) +\n  facet_grid(~IN_AGUA_REDE_PUBLICA) +\n  theme_void()\n\n```\n\n\n\n\n\n","srcMarkdownNoYaml":"\n\n# Introdução\n\nEm termos gerais, um \"*data lake*\" é um conjunto de bases de dados armazenadas num repositório que permite rápido e fácil acesso e integração entre bases diferentes. O Ipea vem gradativamente progredindo na construção e integração do seu *data lake*, que inclui uma ampla gama de bases de dados públicos, e registros administrativos restritos do governo federal e instituições parceiras. \n\nTodos esses dados podem ser acessados diretamente no `storage6`, como visto na aula anterior. No entanto, uma maneira mais fácil de acessar esses dados é pelo pacote de R \n[**{ipeadatalake}**](https://gitlab.ipea.gov.br/data/ipeadatalake). Nesta aula você vai aprender alguns exemplos de como usar o pacote {ipeadatalake} no R. ![](images/logo_ipeadatalake.png){width=150 fig-align=\"right\"}\n\n\n\n# Instalando o {ipeadatalake}\n\nSó é possível instalar e usar o pacote {ipeadatalake} em computadores dentro da rede do Ipea. Para instalar o pacote, você vai precisar dos pacotes {remotes}, {getPass} e {git2r}.\n\n```{r warning = FALSE, eval = FALSE}\n#| label: pacotes-de-instalacao-do-ipeadatalake\npkgs_to_install <- c('remotes', 'getPass', 'git2r')\ninstall.packages(pkgs_to_install)\n```\n\nPronto, agora basta rodar o codigo abaixo para instalar o {ipeadatalake}. Note que você deve passar sua matrícula para o objeto `your_id`, e que o R abrir uma janela *pop-up* para você inserir sua senha.\n\n```{r warning = FALSE, eval = FALSE, message=FALSE}\n#| label: instalando-ipeadatalake\n# seu login (matricula)\nyour_id <- \"r1701707\" \n\nremotes::install_git(\n  url = \"https://gitlab.ipea.gov.br/data/ipeadatalake@v0.1.0\", \n  credentials = git2r::cred_user_pass(\n    username = your_id, \n    password = getPass::getPass()\n    )\n  )\n\n```\n\n\n# Visão geral do {ipeadatalake}\n\nAté o momento desse curso, o pacote incluía as seguintes funções / bases de dados:\n\n1. `ler_bmap()`              # trabalho\n2. `ler_cadunico()`\n3. `ler_censo_escolar()`\n4. `ler_censo_demografico()`\n5. `ler_cnefe()`\n6. `ler_pnadc()`\n7. `ler_rais()`\n\nEstas são as algumas das principais bases de dados do *data lake* do Ipea, mas em breve o pacote deverá incluir novas funções para ler outras bases, como as listadas abaixo. A inclusão de novas bases no {ipeadatalake} também depende em grande medida dos pesquisadores especialistas de cada base e que contribuem para sua organização e importação.\n\n8. [*em breve*] `ler_condicionalidades()`\n9. [*em breve*] `ler_pof()`\n10. [*em breve*] `ler_cpf()`\n11. [*em breve*] `ler_cnpj()`\n12. [*em breve*] `ler_pnad()`\n\n\nA sintaxe de todas as funções do {ipeadatalake} segue uma mesma lógica, o que torna intuitivo e fácil a leitura de diversas bases de dados com apenas uma linha de código. A estrutura básica das funções tem os seguintes argumentos:\n\n```{R eval = FALSE, message = FALSE}\n#| label: ilustra-argumentos-das-funcoes\nler_rais(\n  ano,           # <1> \n  colunas,       # <2> \n  as_data_frame, # <3>\n  geoloc,        # <4> \n  verbose        # <5> \n  )\n```\n1. Ano de referenência\n2. seleciona colunas que devem ser lidas\n3. Retorna resultado como um `Arrow DataSet` ou `data.frame`\n4. Adiciona columnas com dados espaciais (disponível apenas para algumas bases)\n5. Permite função imprimir mensagens\n\nAlém dessas funções de leitura de dados, o {ipeadatalake} tem a função `abrir_documentacao()`, que abre a pasta com a documentação de uma base de dados selecionada.\n\n```{r, message = FALSE, eval=FALSE}\n#| label: ler_documentation\n# censo escolar\nipeadatalake::abrir_documentacao(dados = 'censo_escolar')\n\n# RAIS\nipeadatalake::abrir_documentacao(dados = 'rais')\n```\n\n\n\n## Trabalhando com dados maior do que a RAM\n\nAssim como o pacote [{censobr}](https://ipeagit.github.io/censobr/), que vimos na aula anterior, o pacote {ipeadatalake} também facilita que usuários trabalhem com grandes bases de dados de maneira eficiente utilizando pouca memória RAM a partir de integração com pacotes como {dplyr}, {arrow} e {duckdb}.\n\n![](images/arrow_plus_dplyr.png){width=350 fig-align=\"center\"}\n\n::: {.callout-important appearance=\"default\"}\nPor padrão, as funções do {ipeadatalake} sempre retoram um objeto tipo `Dataset` / `ArrowObject`.\n:::\n\n\n\nVamos então partir para exemplos na prática, e começar carregando as bibliotecas que vamos usar.\n\n```{r, message = FALSE, warning=FALSE}\n#| label: load-libraries\n# carrega bibliotecas\nlibrary(ipeadatalake)\nlibrary(arrow)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(geobr)\n```\n\n# Exemplo 1: Censo Demográfico\n\nO pacote possui a função `ler_censo_demografico()` para ler os dados dos censos demográficos brasileiros (IBGE). Esta função é um *wrapper* do pacote {censobr} para ler os dados localmente do *data lake* to Ipea. Assim, você tem as vantagens do {censobr} sem ter que baixar os dados, e o acesso é praticamente instantâneo. Uma diferença importante é que aqui, ao invés de termos uma função separada para cada base de dados do censo demográfico, nós temos uma única função, e o tipo de base de dados deve ser informado no argumento `type`:\n\n```{r, message = FALSE, warning=FALSE}\n#| label: exemplo-ler_censo_demografico\n# dados de populacao\ndf_pop <- ipeadatalake::ler_censo_demografico(\n  ano = 2010, \n  tipo = 'populacao'\n  )\n\n# dados de domicilios\ndf_dom <- ipeadatalake::ler_censo_demografico(\n  ano = 2010, \n  tipo = 'domicilios'\n  )\n\n```\n\n\n# Exemplo 2: Censo Escolar\n\nOutra base de dados pública disponível no pacote é o Censo Escolar (Inep). A base traz os dados tanto de escolas de ensino básico quanto profissional. Para edições do censo anteriores a 2007, no entanto, o usuário precisa explicitar qual tipo de escola deve ser lido, pois a função carrega separadamente os dados das escolas de educação básica (`\"type = basica\"`), e as escolas de ensino profissional (`\"type = profissional\"`).\n\n\n```{r, message = FALSE, warning=FALSE}\n#| label: exemplo-ler_censo_escolar\n# todas escolas em 2023\ndf_esc_2023 <- ipeadatalake::ler_censo_escolar(\n  ano = 2023\n  )\n\n# escolas de ensino basico em 2000\ndf_esc_2000 <- ipeadatalake::ler_censo_escolar(\n  ano = 2000, \n  tipo = 'basica', \n  )\n\n```\n\nNesse exercício abaixo, nós vamos calcular a proporção das escolas públicas municipais que estava conectadas à rede de água em 2023, e como esse índice varia entre as grandes regiões do Brasil.\n\n```{r, message = FALSE, warning=FALSE}\n#| label: exemplo-ler_censo_escolar-tabela\ndf_esc_agua <- df_esc_2023 |> \n  filter(TP_DEPENDENCIA == 3) |>                                # <1>\n  group_by(NO_REGIAO) |>                                        # <2>\n  summarise(total_escolas = n(),                                # <3>\n            rede_agua_abs = sum(IN_AGUA_REDE_PUBLICA, na.rm=T), # <4>\n            rede_agua_pct = rede_agua_abs / total_escolas) |>   # <5>\n    collect()                                                   # <6>\n\n\nhead(df_esc_agua)\n```\n1. Mantém somente escolas públicas municipais\n2. Agrupa por região\n3. Conta total de escolas\n4. Conta total de escolas com rede de água (valor 1 com rede, e 0 sem rede)\n5. Calcula proporção de escolas com rede de água\n6. Carrega resultado na memória\n\n\nCom essa tabela em mãos, a gente pode fazer um ggplot com o que aprendemos na aula passada.\n\n```{r, message = FALSE, warning=FALSE}\n#| label: exemplo-ler_censo_escolar-figura\nggplot(data = df_esc_agua) +\n  geom_col(aes(x=reorder(NO_REGIAO, rede_agua_pct), y = rede_agua_pct), fill='#0d6556') +\n  scale_y_continuous(labels = scales::percent) +\n  labs(title = \"Escolas públicas municipais conectadas a rede de água. Brasil, 2023.\", \n       x=\"Região\", y=\"Proporção\") +\n  theme_classic()\n\n```\n\n# Exemplo 2: PNADc\n\nA PNAD Contínua (PNADc) é uma pesquisa amostral realizada pelo IBGE que coleta dados socioeconômicos regularmente para monitorar indicadores sobre o mercado de trabalho, rendimento, educação e outras características da população. A PNADc tem uma lógica interna as vezes complexa devido ao desenho de como a pesquisa é conduzida e de que quais variáveis são perguntadas em cada onda da pesquisa. Para saber quais questões foram perguntadas em qual onda da pesquisa, ver detalhes na documentação da função `??ler_pnadc` e no dicionário de variáveis.\n\nEm linhas gerais, o comportamento padrão da função `ler_pnadc()` é retornar os dados anuais consolidados para o `ano` de input do usuário, e você precisa apenas indicar se quer os dados levantados durante a entrevista de número `1` ou `5`. Alternativamente, basta você indicar o `ano` de input e o `trimestre` de quando os dados foram coletados.\n\nNeste exemplo abaixo, nós vamos calcular qual a proporção de pessoas com ensino superior completo segundo cor/raça no ano de 2023. Para ler os dados, basta rodar o código:\n\n```{r, message = FALSE, warning=FALSE}\n#| label: exemplo-ler_pnadc\ndf_pnadc <- ipeadatalake::ler_pnadc(\n  ano = 2023, \n  entrevista  = 1\n  )\n\n```\n\nO próximo passo é processar os dados para calcular o indicador desejado. Isso exige que a gente crie manipule os dados seguindo o conteúdo que aprendemos nas aulas passadas.\n\n\n```{r, message = FALSE, warning=FALSE}\n#| label: exemplo-ler_pnadc_process\n\ntab_edu <- df_pnadc |>\n  filter(v2009 >= 20) |>                           # <1>\n  mutate(dummy_edu_sup = ifelse(vd3004==7,1,0)) |> # <2>\n  group_by(v2010) |>                               # <3>\n  summarise(pop_total = sum(v1031),                # <4>\n          pop_sup_abs = sum(v1031 * dummy_edu_sup),# <5>\n          pop_sup_pct = pop_sup_abs / pop_total    # <6>\n          ) |>             \n  collect()                                        # <7>\n\nhead(tab_edu)\n```\n1. Mantém apenas pessoas com 20 anos de idade ou mais\n2. Cria uma variável dummy indicando se a pessoa completou ensino superior\n3. Agrupa observações por cor/raça\n4. Calcula população total\n5. Calcula população com ensino superior completo\n6. Calcula proporção de pessoas com ensino superior completo\n7. Carrega resultado na memória\n\n\nPor fim, basta recodificar a coluna de cor/raça e fazermos um ggplot.\n\n```{r, message = FALSE, warning=FALSE}\n#| label: exemplo-ler_pnadc_figura\n# recodifica cor\ntab_edu <- tab_edu |>\n  mutate( cor = dplyr::case_when(\n    v2010 == 1 ~ 'Branca',\n    v2010 == 2 ~ 'Preta',\n    v2010 == 3 ~ 'Amarela',\n    v2010 == 4 ~ 'Parda', \n    v2010 == 5 ~ 'Indígena',\n    v2010 == 9 ~ 'Ignorado'))\n\n# figura\nggplot(data=tab_edu) +\n  geom_col(aes(x=reorder(cor, pop_sup_pct), y=pop_sup_pct), fill='#1ba185') +\n  scale_y_continuous(labels = scales::percent) +\n  labs(title = \"Proproção de pessoas com 20 anos ou mais com ensino superior completo. Brasil, 2023.\", x=\"Cor/raça\", y=\"Proporção\") +\n  theme_classic()\n```\n\n### Amostra complexa\n\nPara usuários avançados que queiram fazer análises incorporando o desenho de amostra complexa da PNADc, basta passar o parâmetro `survey = TRUE` que a função `ler_pnadc()` automaticamente gera e retorna o objeto `svyrep.design`. Dicas sobre como analisar esses dados utilizando os pacotes {survey} e {srvyr} [neste livro online](https://tidy-survey-r.github.io/tidy-survey-book/).\n\n```{r, message = FALSE, warning=FALSE}\n#| label: exemplo-ler_pnadc_survey\nsvy_pnadc <- ipeadatalake::ler_pnadc(\n  ano = 2023, \n  entrevista = 1, \n  survey = TRUE\n  )\n\nclass(svy_pnadc)\n```\n\n\n# Exemplo 3: Cadastro Único\n\nO Cadastro Único é a principal fonte de dados sobre a população em situação de vulnerabilidade socioeconômica no Brasil, e é utilizado para planejamento, implementação, monitoramento, operação e avaliação de diversas políticas de todas as esferas federativas no país.\n\nO Ipea recebe dados das atualizações mensais do Cadúnico. Por isso, ao invés do usuário informar o ano dos dados, é necessário informar a data `date` de referência no formato `YYYYMM`. Além disso, o usuário deve especificar se a função deve ler os dados de famílias (`type = 'familias'`) ou de pessoas (`type = 'pessoas'`)\n\n\nNesse examplo aqui, nós vamos estimar a proporção de famílias com acesso a rede de água em cada região do Brasil em julho de 2024. Repare que podemoves usar o argumento `columns` para carregar apenas as colunas que vamos usar, o que tornar todo processo muito mais rápido e eficiente.\n\n\n```{r, message = FALSE, warning=FALSE}\n#| label: exemplo-ler_cadunico\n\n# ler somente colunas de UF e tipo de abastecimento de agua\ndf_cadunico <- ipeadatalake::ler_cadunico(\n  data = 202407, \n  tipo = 'familia',\n  colunas = c('co_uf', 'co_abaste_agua_domic_fam')          # <1>\n)\n```\n1. Lendo somente as colunas necessárias\n\n\nCom os dados em formato arrow, podemos agora calcular proporção de famílias com rede de água em cada UF:\n\n```{r, message = FALSE, warning=FALSE}\n#| label: exemplo-ler_cadunico_summary_tb\n# recodifica coluna de abastecimento de agua\ndf_cadunico_agua <- df_cadunico |>\n  mutate(agual_canalizada = ifelse(co_abaste_agua_domic_fam==1, 1, 0)) |> # <1>\n  group_by(co_uf) |>                                                      # <2>\n  summarise(total_familias = n(),                                         # <3>\n            rede_agua_abs = sum(agual_canalizada, na.rm=T),               # <4>\n            rede_agua_pct = rede_agua_abs / total_familias) |>            # <5>\n  collect()                                                               # <6>\n\n\n```\n1. Recodifica variável de rede de água como dummy (1 com acesso, 0 sem acesso)\n2. Agrupa por UF\n3. Conta total de famílias\n4. Conta total de famílias com rede de água\n5. Calcula proporção de famílias com rede de água\n6. Carrega resultado na memória\n\n\nEssa tabela acima é agrupada por UF, então agora só falta agruparos resultados  por região e fazer o gráfico.\n\n```{r, message = FALSE, warning=FALSE}\n#| label: exemplo-cad_unico-figura\n\n# tira média de cada região\ndf_cadunico_agua_tb <- df_cadunico_agua |>\n  mutate(regiao = substring(co_uf, 1, 1)) |>\n  group_by(regiao) |>\n  summarise(cobertura_agua  = weighted.mean(x=rede_agua_pct, total_familias))\n\n# figura\nggplot(data = df_cadunico_agua_tb) +\n  geom_col(aes(x=reorder(regiao, cobertura_agua), y = cobertura_agua), , fill='#2f4b7c') +\n  scale_y_continuous(labels = scales::percent) +\n  labs(title = \"Escolas públicas municipais conectadas a rede de água. Brasil, 2023.\", \n       x=\"Região\", y=\"Proporção\") +\n  theme_classic()\n```\n\n\n\n# Exemplo 4: Dados com coordenadas geográficas\n\nAlgumas bases de dados no *data lake* do Ipea possuem informação dos endereços das unidades de análise (e.g. empresas, pessoas, estabelecimentos de ensino etc). A política que o Ipea começou a adotar a partir de 2023 é fazer a geolocalização massiva de todas as suas bases de dados para todos os anos, e disponibilizar as informações espaciais para todos os usuários.\n\n::: {.callout-note appearance=\"default\"}\nAtualmente, essas informações espaciais estão disponíveis apenas para algumas bases, como censo escolar, CadÚnico, e Rais.\n:::\n\nEm todos os casos, pasta passar o parametro `geocode = TRUE` para acessar esses dados. Neste exemplo abaixo, nós lemos os dados do censo escolar e adicionamos as colunas espaciais.\n\n\n```{r, message = FALSE, warning=FALSE}\n#| label: exemplo-dados_espaciais_read\n# ler dados com colunas espaciais\ndf_esc_2023 <- ipeadatalake::ler_censo_escolar(\n  ano = 2023, \n  geoloc = TRUE\n  )\n\n```\n\nPare por um instante e veja o nome das colunas espaciais usando `names(df_esc_2023)`. Veja detalhes na documentação da função: `??ler_censo_escolar` o que essas colunas significam.\n\n::: {.callout-warning appearance=\"default\"}\nDentre as colunas de dados espaciais, a coluna `Addr_type` é que traz informação sobre as categorias de precisão das coordenadas geográficas. A definicao exata de cada categoria se encontra [na documentacao do ArcGIS](https://pro.arcgis.com/en/pro-app/latest/help/data/geocoding/what-is-included-in-the-geocoded-results-.htm). Você deve ter muita cautela na hora de usar estes dados, e entender qual o grau de precisão mínimo que a sua análise exige.\n:::\n\nAgora que entendemos um pouco melhor esses dados, vamos fazer uma rápida inspeção visual para examinar a distribuição espacial das escolas com acesso a rede de água no estado de Sergipe. Neste exemplo, nós só precisamos saber o município de cada escola, então vamos aceitar os resultados do geocode para todas as observações da base.\n\n\n```{r, message = FALSE, warning=FALSE}\n#| label: exemplo-dados_espaciais_mapa\n\n# filtrar somente estado de Sergipe\ndf_esc_sergipe <- df_esc_2023 |>\n  filter(NO_UF == \"Sergipe\") |>\n  collect()\n  \n# ler geometria do estado de Sergipe\nsf_sergipe <- geobr::read_state(code_state = \"SE\")\n\n# mapa\nggplot() +\n  geom_sf(data = sf_sergipe) +\n  geom_point(data = df_esc_sergipe,\n             aes(x=lon, y = lat, color=as.factor(IN_AGUA_REDE_PUBLICA)), \n             alpha=.1, show.legend = FALSE) +\n  facet_grid(~IN_AGUA_REDE_PUBLICA) +\n  theme_void()\n\n```\n\n\n\n\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"toc-depth":5,"from":"markdown+emoji","output-file":"15_ipeadatalake.html"},"language":{"toc-title-document":"Índice","toc-title-website":"Nesta página","related-formats-title":"Outros formatos","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Fonte","other-links-title":"Outros Links","code-links-title":"Ligações de código","launch-dev-container-title":"Iniciar Dev Container","launch-binder-title":"Iniciar Binder","article-notebook-label":"Caderno do Artigo","notebook-preview-download":"Baixar Caderno","notebook-preview-download-src":"Descarregar código fonte","notebook-preview-back":"Voltar ao Artigo","manuscript-meca-bundle":"Arquivo MECA","section-title-abstract":"Resumo","section-title-appendices":"Apêndices","section-title-footnotes":"Notas de rodapé","section-title-references":"Referências","section-title-reuse":"Reuso","section-title-copyright":"Direito autoral","section-title-citation":"Citação","appendix-attribution-cite-as":"Por favor, cite este trabalho como:","appendix-attribution-bibtex":"BibTeX","appendix-view-license":"Ver Licença","title-block-author-single":"Autor","title-block-author-plural":"Autores","title-block-affiliation-single":"Afiliação","title-block-affiliation-plural":"Afiliações","title-block-published":"Data de Publicação","title-block-modified":"Data de Modificação","title-block-keywords":"Palavras-chave","callout-tip-title":"Dica","callout-note-title":"Nota","callout-warning-title":"Aviso","callout-important-title":"Importante","callout-caution-title":"Cuidado","code-summary":"Código","code-tools-menu-caption":"Código","code-tools-show-all-code":"Mostrar o código","code-tools-hide-all-code":"Esconder o código","code-tools-view-source":"Ver o código fonte","code-tools-source-code":"Código fonte","tools-share":"Share","tools-download":"Download","code-line":"Linha","code-lines":"Linhas","copy-button-tooltip":"Copiar para a área de transferência","copy-button-tooltip-success":"Copiada","repo-action-links-edit":"Editar essa página","repo-action-links-source":"Ver o código fonte","repo-action-links-issue":"Criar uma issue","back-to-top":"De volta ao topo","search-no-results-text":"Nenhum resultado","search-matching-documents-text":"documentos correspondentes","search-copy-link-title":"Copiar link para a busca","search-hide-matches-text":"Esconder correspondências adicionais","search-more-match-text":"mais correspondência neste documento","search-more-matches-text":"mais correspondências neste documento","search-clear-button-title":"Limpar","search-text-placeholder":"","search-detached-cancel-button-title":"Cancelar","search-submit-button-title":"Enviar","search-label":"Procurar","toggle-section":"Alternar seção","toggle-sidebar":"Alternar barra lateral","toggle-dark-mode":"Alternar modo escuro","toggle-reader-mode":"Alternar modo de leitor","toggle-navigation":"Alternar de navegação","crossref-fig-title":"Figura","crossref-tbl-title":"Tabela","crossref-lst-title":"Listagem","crossref-thm-title":"Teorema","crossref-lem-title":"Lema","crossref-cor-title":"Corolário","crossref-prp-title":"Proposição","crossref-cnj-title":"Conjetura","crossref-def-title":"Definição","crossref-exm-title":"Exemplo","crossref-exr-title":"Exercício","crossref-ch-prefix":"Capítulo","crossref-apx-prefix":"Apêndice","crossref-sec-prefix":"Seção","crossref-eq-prefix":"Equação","crossref-lof-title":"Lista de Figuras","crossref-lot-title":"Lista de Tabelas","crossref-lol-title":"Lista de Listagens","environment-proof-title":"Comprovação","environment-remark-title":"Comentário","environment-solution-title":"Solução","listing-page-order-by":"Ordenar por","listing-page-order-by-default":"Pré-selecionado","listing-page-order-by-date-asc":"Mais velho","listing-page-order-by-date-desc":"O mais novo","listing-page-order-by-number-desc":"Decrescente","listing-page-order-by-number-asc":"Crescente","listing-page-field-date":"Data","listing-page-field-title":"Título","listing-page-field-description":"Descrição","listing-page-field-author":"Autor","listing-page-field-filename":"Nome do arquivo","listing-page-field-filemodified":"Arquivo modificado","listing-page-field-subtitle":"Subtítulo","listing-page-field-readingtime":"Tempo de leitura","listing-page-field-wordcount":"Contagem de Palavras","listing-page-field-categories":"Categorias","listing-page-minutes-compact":"{0} minutos","listing-page-category-all":"Tudo","listing-page-no-matches":"Nenhum item correspondente","listing-page-words":"{0} palavras","listing-page-filter":"Filtro","draft":"Rascunho"},"metadata":{"lang":"pt","fig-responsive":true,"quarto-version":"1.5.57","page-navigation":true,"page-footer":{"border":true,"left":"Copyright 2024, Beatriz Milz e IPEA/COCD","right":[{"icon":"github","href":"https://github.com/ipeadata-lab/curso_r_intro_202409s"}]},"bibliography":["references.bib"],"editor":"source","theme":"cosmo","title":"Acessando dados com o {ipeadatalake}","subtitle":"Módulo ministrado pela COCD","code-annotations":"hover"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}