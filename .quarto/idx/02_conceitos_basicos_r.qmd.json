{"title":"Linguagem R","markdown":{"yaml":{"title":"Linguagem R","code-annotations":"hover"},"headingText":"Operações matemáticas","containsRefs":false,"markdown":"\n\nExistem muitos conceitos básicos que são fundamentais para quem está começando a programar em R.\n\nNesta aula, vamos abordar algun conceitos considerados mais importantes para as próximas aulas.\n\n\nO R permite realizar operações matemáticas básicas, como soma, subtração, multiplicação, divisão, potenciação, entre outras.\n\n```{r}\n1 + 1 # Soma\n1 - 1 # Subtração\n2 * 3 # Multiplicação\n10 / 2 # Divisão\n2 ^ 3 # Potenciação\n```\n\nA ordem matemática das operações também vale no R. Por exemplo, a expressão `2 + 3 * 4` será calculada como `2 + (3 * 4)`:\n\n```{r}\n2 + 3 * 4\n```\n\n## Objetos\n\nNo R, um objeto é uma estrutura de dados que armazena valores: podemos armazenar um valor único, um conjunto de valores, uma base de dados, entre outros.\n\nÉ muito útil armazenar valores em objetos, pois podemos reutilizá-los em diferentes partes do código, sem precisar digitar o valor novamente.\n\n\n### Objetos existentes no R\n\nExistem alguns objetos já criados no R, como por exemplo o objeto `letters`, que armazena as letras do alfabeto:\n\n```{r}\npi\nletters\n```\n\n\n::: callout-warning\nO R é *case-sensitive*, ou seja, ele diferencia letras maiúsculas de minúsculas. Portanto, `nome` é diferente de `Nome`.\n\nPor exemplo, o objeto `pi` armazena o valor de π (com um número limitado de casas decimais). O nome do objeto é escrito em minúsculas:\n\n```{r}\npi\n```\n\nSe tentarmos acessar o objeto com o nome em maiúsculas, o R irá retornar um erro, pois esse objeto não existe:\n\n```{r}\n#| error: true\nPi\n```\n:::\n\n\n### Criando um objeto\n\nPara criar um objeto, precisamos definir um nome, e atribuir um valor à este nome. Para isso, usamos o operador de atribuição: `<-`. Um atalho para esse operador é o `Ctrl` + `-` no Windows, ou `Option` + `-` no Mac .\n\nNo exemplo a seguir, criamos um objeto chamado `nome_do_curso` e atribuímos a ele o texto `\"Introdução à análise de dados no R\"`:\n\n```{r}\nnome_do_curso <- \"Introdução à análise de dados no R\"\n```\n\nPodemos acessar o valor armazenado em um objeto digitando o nome do objeto:\n\n```{r}\nnome_do_curso\n```\n\nO objeto apenas será alterado se utilizarmos o operador de atribuição novamente. Por exemplo, a função `tolower()` transforma todas as letras de um texto em minúsculas:\n\n```{r}\ntolower(nome_do_curso)\n```\n\nMas como não utilizamos a atribuição, o objeto `nome_do_curso` não foi alterado:\n\n```{r}\nnome_do_curso\n```\n\nPara alterar o objeto, precisamos atribuir o resultado da função `tolower()` ao objeto `nome_do_curso`:\n\n```{r}\nnome_do_curso <- tolower(nome_do_curso)\n```\n\nAgora, o objeto `nome_do_curso` foi alterado:\n\n```{r}\nnome_do_curso\n```\n\nPortanto, cuidado: ao criar um objeto com nome igual à outro objeto existente, o objeto anterior será substituído pelo novo objeto.\n\n### Consultando os objetos criados\n\nPara consultar os objetos criados, podemos usar a função `ls()` (*list objects*), que lista todos os objetos criados no *Painel Environment*:\n\n```{r}\nls()\n```\n\nOutra forma é consultar o *Painel Environment* no RStudio, que exibe todos os objetos criados, e permite acessar o valor de cada objeto:\n\n![Captura de tela do RStudio: Painel Environment](images/02_environment.png){fig-align=\"center\" width=\"50%\"}\n\n### Removendo objetos\n\nCaso queira remover um objeto, podemos usar a função `rm()` (*remove objects*). Por exemplo, para remover o objeto `nome_do_curso`:\n\n```{r}\n#| eval: false\nrm(nome_do_curso)\n```\n\nPodemos consultar novamente os objetos existentes e verificar se o objeto foi removido:\n\n```{r}\nls()\n```\n\nCaso queira remover todos os objetos carregados, podemos usar a função `rm(list = ls())`.\n\n```{r}\n#| eval: false\nrm(list = ls()) # <1>\n```\n1. Remover todos os objetos do *Global Environment*\n\n### Destivando o .RData\n\nA configuração padrão do RStudio define que, quando fechamos o RStudio, o R salva todos os objetos criados em um arquivo chamado `.RData`[^r-data]. Na próxima vez que o RStudio for aberto, os objetos serão carregados automaticamente.\n\n[^r-data]: Leia mais sobre o arquivo `.RData` no [Zen do R](https://curso-r.github.io/zen-do-r/rdata-rhistory.html).\n\nPorém isso **não é uma boa prática**. O importante é desenvolver um script que tenha todos os passos necessários para reproduzir os resultados, e não depender de objetos salvos em um arquivo como o `.RData`. \n\nPara desabilitar essas configurações, no menu *Tools* \\> *Global Options* \\> *General*:\n\n  - Desmarcar a opção *Restore .RData into workspace at startup*;\n\n  - Em *Save workspace to .RData on exit*, selecionar *Never*.\n  \n  - Desmarcar a opção *Always save history (even when not saving .RData)*.\n\n\n![Captura de tela do RStudio: Global Options > General](images/02_rdata.png){fig-align=\"center\" width=\"50%\"}\n\n\nApós desativar essa opção, o RStudio não carregará os objetos salvos no `.RData` na próxima vez que for aberto. Dessa forma, se quisermos apagar todos os objetos, podemos reiniciar a sessão do R (clicando em *Session* \\> *Restart R* no menu superior do RStudio).\n\n\n\n\n### Nomeando objetos\n\nExistem regras e boas práticas para nomear objetos no R. As regras são obrigatórias: se não seguirmos, o código irá gerar um erro. As boas práticas são recomendações, com o objetivo de evitar erros futuros, e facilitar a leitura do código.\n\n::: callout-tip\nRecomendamos seguir essas recomendações não apenas para o nome dos objetos, mas também para nome de pastas e arquivos, nome de colunas, entre outros.\n:::\n\n#### Regras para nomear objetos no R\n\n-   O nome não deve começar com um número. Ex: `1objeto` não é um nome válido.\n\n```{r}\n#| error: true\n1objeto <- \"exemplo\"\n```\n\n-   O nome não deve começar com underline (`_`). Ex: `_objeto` não é um nome válido.\n\n```{r}\n#| error: true\n_objeto <- \"exemplo\"\n```\n\n-   O nome do objeto não deve conter traços (`-`), pois o R interpreta o traço como um operador de subtração. Ex: `meu-objeto` não é um nome válido.\n\n```{r}\n#| error: true\n\nobjeto-1 <- \"exemplo\"\n```\n\n#### Boas práticas para nomear objetos no R\n\n-   O nome não deve começar com um ponto. Isso não gerará um erro, porém é contra-indicado pois essa sintaxe é utilizada para nomear objetos ocultos no R (portanto, não aparecerá no *Painel Environment*), e isso pode dificultar o acesso posteriormente. Ex: `.objeto` não deve ser usado.\n\n-   Não utilizar acentos, cedilhas, ou outros caracteres especiais. Isso pode gerar problemas de compatibilidade com outros sistemas (chamamos de *encoding*). Ex: `aviões` não é um nome recomendado.\n\n-   Não utilizar espaços, pois dificulta o acesso ao objeto posteriormente: precisaremos utilizar a crase em volta do nome do objeto para acessá-lo.\n\n-   Existem diferentes estilos para nomear objetos[^1], como *snake_case*, onde todas as letras devem ser minúsculas, e as palavras separadas por underline. O importante é escolher um estilo e manter a consistência.\n\n[^1]: A documentação da função `snakecase::to_any_case()` fornece uma lista de estilos de nomenclatura disponíveis no pacote `snakecase`.\n\n## Tipos de dados\n\n Existem diferentes tipos de dados que podemos armazenar em objetos no R, como números, textos, lógicos, fatores, datas, entre outros.\n\nÉ muito importante identificar o tipo de dado que estamos trabalhando, pois cada tipo de dado permite usar funções específicas.\n\nA função `class()` permite verificar a classe de um objeto. Por exemplo, podemos verificar a classe do objeto `pi`:\n\n```{r}\nclass(pi)\n```\n\n### Numérico\n\nOs objetos numéricos no R podem ser de dois tipos:\n\n  - inteiros (*integer*): armazena apenas números inteiros, ou seja, sem casas decimais. Ex: 1, 2, 3, 4, 5.\n\n  - numéricos (*numeric* ou *double*): armazena números que podem conter casas decimais. Ex: 1, 2, **3.14**, 4, 5.\n  \nNa maioria dos casos, utilizamos o tipo *numeric* para armazenar números, pois ele é mais flexível.\n\nPor exemplo, para criar um objeto que armazena o número 42:\n\n```{r}\nexemplo_numero <- 42\nclass(exemplo_numero)\n```\n\nPara criar um objeto que armazena um valor usado para converter dólar em reais (R$), podemos usar o tipo `numeric`:\n\n```{r}\nconversao_dolar <- 5.45\nclass(conversao_dolar)\n```\n\n### Lógico (booleano)\n\nO tipo lógico (*logical*) armazena valores booleanos: `TRUE` (verdadeiro) ou `FALSE` (falso). Os valores binários podem ser convertidos para números, onde `TRUE` será 1, e `FALSE` será 0.\n\n\nPor exemplo, para criar objetos com os valores lógicos `TRUE` e `FALSE`:\n\n```{r}\nexemplo_logico_verdadeiro <- TRUE\nclass(exemplo_logico_verdadeiro)\n\nexemplo_logico_falso <- FALSE\nclass(exemplo_logico_falso)\n```\n\n\n### Character (texto)\n\nO tipo texto (*character*, ou também conhecido como *string*) armazena textos. Para criar um objeto com um texto, precisamos colocar o texto entre aspas:\n\n```{r}\nnome_do_curso <- \"Introdução à análise de dados no R\"\nclass(nome_do_curso)\n```\n\n\n\n### Fator (categórico)\n\nO tipo fator (*factor*) armazena variáveis categóricas, ou seja, variáveis que possuem um número limitado de categorias. Os valores possíveis de categoria são chamados de *levels*. Os fatores podem ser ordenados ou não ordenados.\n\nOs fatores são muito úteis para a visualização de dados e para alguns modelos usados em análise de dados.\n\nNeste momento, não vamos aprofundar no conceito de fatores: falaremos mais sobre eles nas próximas aulas.\n\n\n### Datas\n\nO tipo data (*Date*) armazena datas no formato `aaaa-mm-dd` (ano-mês-dia). \n\nPara criar um objeto com uma data, podemos usar a função `as.Date()`, que converte um texto para o tipo *Date*. Por exemplo, para criar um objeto com a data de início do curso:\n\n```{r}\ndata_inicio_curso <- as.Date(\"2024-10-01\")\nclass(data_inicio_curso)\n```\n\n\nA função `Sys.Date()` retorna a data atual do sistema:\n\n```{r}\ndata_sistema <- Sys.Date()\nclass(data_sistema)\n```\n\nPodemos fazer operações com datas:\n\n```{r}\ndata_inicio_curso - data_sistema # <1>\ndata_sistema + 1  # <2>\nas.Date(\"2024-02-29\") + 1 # <3>\n```\n1. Diferença entre duas datas\n2. Somar um dia à data em que o código foi executado\n3. Somar um dia à data de 29 de fevereiro de 2024\n\n\n## Conversões entre tipos de dados\n\nExistem várias funções que podemos usar para transformar variáveis de um tipo para outro. Essas funções tem começam com `as.` seguido pelo tipo de dado que queremos que seja convertido. Por exemplo: \n\n- `as.character()`: converte valores para texto\n- `as.numeric()`:  converte valores para número\n- `as.logical()`:  converte valores para lógico\n- `as.factor()`:  converte valores para fator\n- `as.Date()`:  converte valores para data\n\n```{r}\nas.character(2024) #<1>\n\nas.numeric(TRUE) #<2>\n\nas.Date(\"2024-10-01\") #<3>\n\nas.logical(\"TRUE\") #<4>\n```\n1. Converter número para texto\n2. Converter lógico para número\n3. Converter texto para data\n4. Converter texto para lógico\n\nPorém, nem toda conversão fará sentido. Por exemplo, podemos converter um número para texto, porém nem toda conversão de texto para número funcionará como esperado:\n\n```{r}\nas.numeric(\"2024\") #<1>\nas.numeric(\"Curso de R\") #<1>\n```\n1. Converter para número\n\nQuando a conversão não é possível, o R irá retornar um valor `NA` (*Not Available*), que indica um valor faltante. Falaremos mais sobre valores faltantes na próxima seção.\n\n\n## Valores faltantes (`NA`)\n\nValores faltantes, conhecidos também como ***missing values***, são valores que não estão disponíveis, ou que não foram informados. No R, esses valores são representados pelo valor `NA` (*Not Available*).\n\nPodemos testar se um valor é `NA` usando a função `is.na()`: essa função retornará `TRUE` se o valor for `NA`, e `FALSE` caso contrário.\n\n```{r}\nis.na(NA)\n```\nAlgo importante é que o R não consegue fazer operações matemáticas com valores `NA`. Por exemplo, se tentarmos realizar qualquer operação matemática com `NA`, o resultado será `NA`:\n\n```{r}\nNA + 1\n\nNA + NA\n\nNA * 2\n```\n\nÉ importante identificar os valores NA em nossos dados, pois eles podem afetar o resultado de nossas análises. Por exemplo, se tentarmos calcular a média de um conjunto com valores `NA`, o resultado será `NA`:\n\n```{r}\nnumeros_com_na <- c(1, 2, NA, 4, 5)\nmean(numeros_com_na)\n```\n\nEm aulas futuras falaremos sobre como identificar os `NA` em nossos dados, e algumas estratégias para lidar com eles. Neste momento, podemos utilizar o argumento `na.rm = TRUE` para que os `NA` sejam removidos antes de executar a função que calcula a média:\n\n```{r}\nmean(numeros_com_na, na.rm = TRUE)\n```\n\n\n## Tipos de objetos\n\nExistem diferentes tipos de objetos no R, e cada tipo de objeto possui diferentes propriedades. Os principais tipos de objetos que utilizaremos ao longo do curso são: vetores, *data.frames* e listas. \n\n\n### Vetores\n\nVetores armazenam um conjunto de valores de uma dimensão. Eles podem ser criados com a função `c()`, que significa *combine* (combinar). Por exemplo, para criar um vetor com os números de 1 a 5:\n\n```{r}\nvetor_de_numeros <- c(1, 2, 3, 4, 5)\n```\n\nOs vetores podem armazenar diferentes tipos de dados, como números, textos, fatores, entre outros. Porém cada vetor pode armazenar apenas um tipo de dado. Por exemplo, se tentarmos criar um vetor que armazena números e textos, o R irá converter todos os valores para texto. Essa propriedade é chamada de **coerção**.\n\n```{r}\nvetor_misto <- c(1, 2, \"três\", 4, 5)\nclass(vetor_misto)\nvetor_misto\n```\n\n\nNo geral, podemos converter dados sem perder informação seguindo essa ordem: Lógico > Inteiro > Numérico > Texto.\n\n\n<!-- ### Matrizes -->\n\n<!-- As matrizes são conjunto de valores com duas dimensões: linhas e colunas. Assim como os vetores, as matrizes podem armazenar apenas um tipo de dado. -->\n\n<!-- Para criar uma matriz, usamos a função `matrix()`. Por exemplo, para criar uma matriz com 2 linhas e 3 colunas, armazenando os números de 1 a 6, podemos usar o seguinte código: -->\n\n<!-- ```{r} -->\n<!-- matriz <- matrix(data = 1:6, nrow = 2, ncol = 3) -->\n<!-- matriz -->\n<!-- ``` -->\n\n<!-- Não utilizaremos matrizes nesse curso, portanto não vamos aprofundar nesse tipo de objeto. -->\n\n### Data.frames\n\nOs *data.frames* são conjuntos de valores com duas dimensões: linhas e colunas. Porém, diferente do que vimos para as matrizes, os *data.frames* podem armazenar diferentes tipos de dados em cada coluna.\n\nEsse é o principal tipo de objeto que utilizaremos nesse curso, pois ele é muito útil para armazenar dados tabulares.\n\nExistem alguns *data.frames* já criados no R, como o `airquality`, que armazena dados sobre a qualidade do ar na cidade de Nova York, em 1973. Essas são as primeiras linhas do *data.frame* `airquality`: \n\n```{r}\nhead(airquality)\n```\n\n\nPara criar um data.frame, podemos usar a função `data.frame()`. Entretanto, o mais comum é importar dados de arquivos, como CSV, Excel, ou de bancos de dados. Falaremos sobre como importar dados na [próxima aula](03_importacao.qmd).\n\n\n### Listas\n\nAs listas são os objetos mais flexíveis do R: podemos armazenar diferentes tipos de objetos dentro de uma mesma lista. Por exemplo, podemos armazenar um vetor, uma matriz, um *data.frame*, e até mesmo outra lista dentro de uma lista.\n\nPodemos criar uma lista com a função `list()`. Os elementos da lista podem ser nomeados ou não. Vamos criar uma lista nomeada, com três elementos: o número π, o *data.frame* `airquality`, e o vetor `letters`:\n\n```{r}\nlista_exemplo <- list(numero_pi = pi,\n                      df_qualidade_do_ar = airquality,\n                      letras = letters)\nclass(lista_exemplo)\n```\n\nA função `str()` (*structure*) exibe a estrutura da lista, mostrando os elementos e seus tipos:\n\n```{r}\nstr(lista_exemplo)\n```\n\n## Sugestões de exercícios\n\n1. Crie um objeto chamado `meu_nome` e armazene seu nome nele. Depois, use a função `toupper()` para converter seu nome para letras maiúsculas e salve o resultado em um novo objeto chamado `nome_maiusculo`. Verifique se os dois objetos foram criados corretamente, consultando o painel *Environment*.\n\n2. Observe os nomes a seguir, e identifique se estão adequados para nomear objetos e colunas no R. Para os nomes que não estão adequados, explique o motivo:\n\n   - `dados_altura`\n   - `1_dados`\n   - `media-altura`\n   - `media_altura`\n   - `Média altura`\n\n3. Tente adivinhar a classe dos objetos a seguir, e depois confira no R usando a função `class()`:\n\n```{r}\n#| eval: false\npi\nletters\ndplyr::starwars\ndplyr::starwars$mass\ndplyr::starwars$species\ndplyr::starwars$films\n```\n\n\n## Sugestões de materiais\n\n- Livro [Zen do R](https://curso-r.github.io/zen-do-r/index.html):\n  - [Capítulo .RData e .Rhistory](https://curso-r.github.io/zen-do-r/rdata-rhistory.html)\n\n-   Livro [R para Ciência de Dados 2ed](https://cienciadedatos.github.io/pt-r4ds/):\n    -   [Fluxo de Trabalho: básico](https://cienciadedatos.github.io/pt-r4ds/workflow-basics.html)\n","srcMarkdownNoYaml":"\n\nExistem muitos conceitos básicos que são fundamentais para quem está começando a programar em R.\n\nNesta aula, vamos abordar algun conceitos considerados mais importantes para as próximas aulas.\n\n## Operações matemáticas\n\nO R permite realizar operações matemáticas básicas, como soma, subtração, multiplicação, divisão, potenciação, entre outras.\n\n```{r}\n1 + 1 # Soma\n1 - 1 # Subtração\n2 * 3 # Multiplicação\n10 / 2 # Divisão\n2 ^ 3 # Potenciação\n```\n\nA ordem matemática das operações também vale no R. Por exemplo, a expressão `2 + 3 * 4` será calculada como `2 + (3 * 4)`:\n\n```{r}\n2 + 3 * 4\n```\n\n## Objetos\n\nNo R, um objeto é uma estrutura de dados que armazena valores: podemos armazenar um valor único, um conjunto de valores, uma base de dados, entre outros.\n\nÉ muito útil armazenar valores em objetos, pois podemos reutilizá-los em diferentes partes do código, sem precisar digitar o valor novamente.\n\n\n### Objetos existentes no R\n\nExistem alguns objetos já criados no R, como por exemplo o objeto `letters`, que armazena as letras do alfabeto:\n\n```{r}\npi\nletters\n```\n\n\n::: callout-warning\nO R é *case-sensitive*, ou seja, ele diferencia letras maiúsculas de minúsculas. Portanto, `nome` é diferente de `Nome`.\n\nPor exemplo, o objeto `pi` armazena o valor de π (com um número limitado de casas decimais). O nome do objeto é escrito em minúsculas:\n\n```{r}\npi\n```\n\nSe tentarmos acessar o objeto com o nome em maiúsculas, o R irá retornar um erro, pois esse objeto não existe:\n\n```{r}\n#| error: true\nPi\n```\n:::\n\n\n### Criando um objeto\n\nPara criar um objeto, precisamos definir um nome, e atribuir um valor à este nome. Para isso, usamos o operador de atribuição: `<-`. Um atalho para esse operador é o `Ctrl` + `-` no Windows, ou `Option` + `-` no Mac .\n\nNo exemplo a seguir, criamos um objeto chamado `nome_do_curso` e atribuímos a ele o texto `\"Introdução à análise de dados no R\"`:\n\n```{r}\nnome_do_curso <- \"Introdução à análise de dados no R\"\n```\n\nPodemos acessar o valor armazenado em um objeto digitando o nome do objeto:\n\n```{r}\nnome_do_curso\n```\n\nO objeto apenas será alterado se utilizarmos o operador de atribuição novamente. Por exemplo, a função `tolower()` transforma todas as letras de um texto em minúsculas:\n\n```{r}\ntolower(nome_do_curso)\n```\n\nMas como não utilizamos a atribuição, o objeto `nome_do_curso` não foi alterado:\n\n```{r}\nnome_do_curso\n```\n\nPara alterar o objeto, precisamos atribuir o resultado da função `tolower()` ao objeto `nome_do_curso`:\n\n```{r}\nnome_do_curso <- tolower(nome_do_curso)\n```\n\nAgora, o objeto `nome_do_curso` foi alterado:\n\n```{r}\nnome_do_curso\n```\n\nPortanto, cuidado: ao criar um objeto com nome igual à outro objeto existente, o objeto anterior será substituído pelo novo objeto.\n\n### Consultando os objetos criados\n\nPara consultar os objetos criados, podemos usar a função `ls()` (*list objects*), que lista todos os objetos criados no *Painel Environment*:\n\n```{r}\nls()\n```\n\nOutra forma é consultar o *Painel Environment* no RStudio, que exibe todos os objetos criados, e permite acessar o valor de cada objeto:\n\n![Captura de tela do RStudio: Painel Environment](images/02_environment.png){fig-align=\"center\" width=\"50%\"}\n\n### Removendo objetos\n\nCaso queira remover um objeto, podemos usar a função `rm()` (*remove objects*). Por exemplo, para remover o objeto `nome_do_curso`:\n\n```{r}\n#| eval: false\nrm(nome_do_curso)\n```\n\nPodemos consultar novamente os objetos existentes e verificar se o objeto foi removido:\n\n```{r}\nls()\n```\n\nCaso queira remover todos os objetos carregados, podemos usar a função `rm(list = ls())`.\n\n```{r}\n#| eval: false\nrm(list = ls()) # <1>\n```\n1. Remover todos os objetos do *Global Environment*\n\n### Destivando o .RData\n\nA configuração padrão do RStudio define que, quando fechamos o RStudio, o R salva todos os objetos criados em um arquivo chamado `.RData`[^r-data]. Na próxima vez que o RStudio for aberto, os objetos serão carregados automaticamente.\n\n[^r-data]: Leia mais sobre o arquivo `.RData` no [Zen do R](https://curso-r.github.io/zen-do-r/rdata-rhistory.html).\n\nPorém isso **não é uma boa prática**. O importante é desenvolver um script que tenha todos os passos necessários para reproduzir os resultados, e não depender de objetos salvos em um arquivo como o `.RData`. \n\nPara desabilitar essas configurações, no menu *Tools* \\> *Global Options* \\> *General*:\n\n  - Desmarcar a opção *Restore .RData into workspace at startup*;\n\n  - Em *Save workspace to .RData on exit*, selecionar *Never*.\n  \n  - Desmarcar a opção *Always save history (even when not saving .RData)*.\n\n\n![Captura de tela do RStudio: Global Options > General](images/02_rdata.png){fig-align=\"center\" width=\"50%\"}\n\n\nApós desativar essa opção, o RStudio não carregará os objetos salvos no `.RData` na próxima vez que for aberto. Dessa forma, se quisermos apagar todos os objetos, podemos reiniciar a sessão do R (clicando em *Session* \\> *Restart R* no menu superior do RStudio).\n\n\n\n\n### Nomeando objetos\n\nExistem regras e boas práticas para nomear objetos no R. As regras são obrigatórias: se não seguirmos, o código irá gerar um erro. As boas práticas são recomendações, com o objetivo de evitar erros futuros, e facilitar a leitura do código.\n\n::: callout-tip\nRecomendamos seguir essas recomendações não apenas para o nome dos objetos, mas também para nome de pastas e arquivos, nome de colunas, entre outros.\n:::\n\n#### Regras para nomear objetos no R\n\n-   O nome não deve começar com um número. Ex: `1objeto` não é um nome válido.\n\n```{r}\n#| error: true\n1objeto <- \"exemplo\"\n```\n\n-   O nome não deve começar com underline (`_`). Ex: `_objeto` não é um nome válido.\n\n```{r}\n#| error: true\n_objeto <- \"exemplo\"\n```\n\n-   O nome do objeto não deve conter traços (`-`), pois o R interpreta o traço como um operador de subtração. Ex: `meu-objeto` não é um nome válido.\n\n```{r}\n#| error: true\n\nobjeto-1 <- \"exemplo\"\n```\n\n#### Boas práticas para nomear objetos no R\n\n-   O nome não deve começar com um ponto. Isso não gerará um erro, porém é contra-indicado pois essa sintaxe é utilizada para nomear objetos ocultos no R (portanto, não aparecerá no *Painel Environment*), e isso pode dificultar o acesso posteriormente. Ex: `.objeto` não deve ser usado.\n\n-   Não utilizar acentos, cedilhas, ou outros caracteres especiais. Isso pode gerar problemas de compatibilidade com outros sistemas (chamamos de *encoding*). Ex: `aviões` não é um nome recomendado.\n\n-   Não utilizar espaços, pois dificulta o acesso ao objeto posteriormente: precisaremos utilizar a crase em volta do nome do objeto para acessá-lo.\n\n-   Existem diferentes estilos para nomear objetos[^1], como *snake_case*, onde todas as letras devem ser minúsculas, e as palavras separadas por underline. O importante é escolher um estilo e manter a consistência.\n\n[^1]: A documentação da função `snakecase::to_any_case()` fornece uma lista de estilos de nomenclatura disponíveis no pacote `snakecase`.\n\n## Tipos de dados\n\n Existem diferentes tipos de dados que podemos armazenar em objetos no R, como números, textos, lógicos, fatores, datas, entre outros.\n\nÉ muito importante identificar o tipo de dado que estamos trabalhando, pois cada tipo de dado permite usar funções específicas.\n\nA função `class()` permite verificar a classe de um objeto. Por exemplo, podemos verificar a classe do objeto `pi`:\n\n```{r}\nclass(pi)\n```\n\n### Numérico\n\nOs objetos numéricos no R podem ser de dois tipos:\n\n  - inteiros (*integer*): armazena apenas números inteiros, ou seja, sem casas decimais. Ex: 1, 2, 3, 4, 5.\n\n  - numéricos (*numeric* ou *double*): armazena números que podem conter casas decimais. Ex: 1, 2, **3.14**, 4, 5.\n  \nNa maioria dos casos, utilizamos o tipo *numeric* para armazenar números, pois ele é mais flexível.\n\nPor exemplo, para criar um objeto que armazena o número 42:\n\n```{r}\nexemplo_numero <- 42\nclass(exemplo_numero)\n```\n\nPara criar um objeto que armazena um valor usado para converter dólar em reais (R$), podemos usar o tipo `numeric`:\n\n```{r}\nconversao_dolar <- 5.45\nclass(conversao_dolar)\n```\n\n### Lógico (booleano)\n\nO tipo lógico (*logical*) armazena valores booleanos: `TRUE` (verdadeiro) ou `FALSE` (falso). Os valores binários podem ser convertidos para números, onde `TRUE` será 1, e `FALSE` será 0.\n\n\nPor exemplo, para criar objetos com os valores lógicos `TRUE` e `FALSE`:\n\n```{r}\nexemplo_logico_verdadeiro <- TRUE\nclass(exemplo_logico_verdadeiro)\n\nexemplo_logico_falso <- FALSE\nclass(exemplo_logico_falso)\n```\n\n\n### Character (texto)\n\nO tipo texto (*character*, ou também conhecido como *string*) armazena textos. Para criar um objeto com um texto, precisamos colocar o texto entre aspas:\n\n```{r}\nnome_do_curso <- \"Introdução à análise de dados no R\"\nclass(nome_do_curso)\n```\n\n\n\n### Fator (categórico)\n\nO tipo fator (*factor*) armazena variáveis categóricas, ou seja, variáveis que possuem um número limitado de categorias. Os valores possíveis de categoria são chamados de *levels*. Os fatores podem ser ordenados ou não ordenados.\n\nOs fatores são muito úteis para a visualização de dados e para alguns modelos usados em análise de dados.\n\nNeste momento, não vamos aprofundar no conceito de fatores: falaremos mais sobre eles nas próximas aulas.\n\n\n### Datas\n\nO tipo data (*Date*) armazena datas no formato `aaaa-mm-dd` (ano-mês-dia). \n\nPara criar um objeto com uma data, podemos usar a função `as.Date()`, que converte um texto para o tipo *Date*. Por exemplo, para criar um objeto com a data de início do curso:\n\n```{r}\ndata_inicio_curso <- as.Date(\"2024-10-01\")\nclass(data_inicio_curso)\n```\n\n\nA função `Sys.Date()` retorna a data atual do sistema:\n\n```{r}\ndata_sistema <- Sys.Date()\nclass(data_sistema)\n```\n\nPodemos fazer operações com datas:\n\n```{r}\ndata_inicio_curso - data_sistema # <1>\ndata_sistema + 1  # <2>\nas.Date(\"2024-02-29\") + 1 # <3>\n```\n1. Diferença entre duas datas\n2. Somar um dia à data em que o código foi executado\n3. Somar um dia à data de 29 de fevereiro de 2024\n\n\n## Conversões entre tipos de dados\n\nExistem várias funções que podemos usar para transformar variáveis de um tipo para outro. Essas funções tem começam com `as.` seguido pelo tipo de dado que queremos que seja convertido. Por exemplo: \n\n- `as.character()`: converte valores para texto\n- `as.numeric()`:  converte valores para número\n- `as.logical()`:  converte valores para lógico\n- `as.factor()`:  converte valores para fator\n- `as.Date()`:  converte valores para data\n\n```{r}\nas.character(2024) #<1>\n\nas.numeric(TRUE) #<2>\n\nas.Date(\"2024-10-01\") #<3>\n\nas.logical(\"TRUE\") #<4>\n```\n1. Converter número para texto\n2. Converter lógico para número\n3. Converter texto para data\n4. Converter texto para lógico\n\nPorém, nem toda conversão fará sentido. Por exemplo, podemos converter um número para texto, porém nem toda conversão de texto para número funcionará como esperado:\n\n```{r}\nas.numeric(\"2024\") #<1>\nas.numeric(\"Curso de R\") #<1>\n```\n1. Converter para número\n\nQuando a conversão não é possível, o R irá retornar um valor `NA` (*Not Available*), que indica um valor faltante. Falaremos mais sobre valores faltantes na próxima seção.\n\n\n## Valores faltantes (`NA`)\n\nValores faltantes, conhecidos também como ***missing values***, são valores que não estão disponíveis, ou que não foram informados. No R, esses valores são representados pelo valor `NA` (*Not Available*).\n\nPodemos testar se um valor é `NA` usando a função `is.na()`: essa função retornará `TRUE` se o valor for `NA`, e `FALSE` caso contrário.\n\n```{r}\nis.na(NA)\n```\nAlgo importante é que o R não consegue fazer operações matemáticas com valores `NA`. Por exemplo, se tentarmos realizar qualquer operação matemática com `NA`, o resultado será `NA`:\n\n```{r}\nNA + 1\n\nNA + NA\n\nNA * 2\n```\n\nÉ importante identificar os valores NA em nossos dados, pois eles podem afetar o resultado de nossas análises. Por exemplo, se tentarmos calcular a média de um conjunto com valores `NA`, o resultado será `NA`:\n\n```{r}\nnumeros_com_na <- c(1, 2, NA, 4, 5)\nmean(numeros_com_na)\n```\n\nEm aulas futuras falaremos sobre como identificar os `NA` em nossos dados, e algumas estratégias para lidar com eles. Neste momento, podemos utilizar o argumento `na.rm = TRUE` para que os `NA` sejam removidos antes de executar a função que calcula a média:\n\n```{r}\nmean(numeros_com_na, na.rm = TRUE)\n```\n\n\n## Tipos de objetos\n\nExistem diferentes tipos de objetos no R, e cada tipo de objeto possui diferentes propriedades. Os principais tipos de objetos que utilizaremos ao longo do curso são: vetores, *data.frames* e listas. \n\n\n### Vetores\n\nVetores armazenam um conjunto de valores de uma dimensão. Eles podem ser criados com a função `c()`, que significa *combine* (combinar). Por exemplo, para criar um vetor com os números de 1 a 5:\n\n```{r}\nvetor_de_numeros <- c(1, 2, 3, 4, 5)\n```\n\nOs vetores podem armazenar diferentes tipos de dados, como números, textos, fatores, entre outros. Porém cada vetor pode armazenar apenas um tipo de dado. Por exemplo, se tentarmos criar um vetor que armazena números e textos, o R irá converter todos os valores para texto. Essa propriedade é chamada de **coerção**.\n\n```{r}\nvetor_misto <- c(1, 2, \"três\", 4, 5)\nclass(vetor_misto)\nvetor_misto\n```\n\n\nNo geral, podemos converter dados sem perder informação seguindo essa ordem: Lógico > Inteiro > Numérico > Texto.\n\n\n<!-- ### Matrizes -->\n\n<!-- As matrizes são conjunto de valores com duas dimensões: linhas e colunas. Assim como os vetores, as matrizes podem armazenar apenas um tipo de dado. -->\n\n<!-- Para criar uma matriz, usamos a função `matrix()`. Por exemplo, para criar uma matriz com 2 linhas e 3 colunas, armazenando os números de 1 a 6, podemos usar o seguinte código: -->\n\n<!-- ```{r} -->\n<!-- matriz <- matrix(data = 1:6, nrow = 2, ncol = 3) -->\n<!-- matriz -->\n<!-- ``` -->\n\n<!-- Não utilizaremos matrizes nesse curso, portanto não vamos aprofundar nesse tipo de objeto. -->\n\n### Data.frames\n\nOs *data.frames* são conjuntos de valores com duas dimensões: linhas e colunas. Porém, diferente do que vimos para as matrizes, os *data.frames* podem armazenar diferentes tipos de dados em cada coluna.\n\nEsse é o principal tipo de objeto que utilizaremos nesse curso, pois ele é muito útil para armazenar dados tabulares.\n\nExistem alguns *data.frames* já criados no R, como o `airquality`, que armazena dados sobre a qualidade do ar na cidade de Nova York, em 1973. Essas são as primeiras linhas do *data.frame* `airquality`: \n\n```{r}\nhead(airquality)\n```\n\n\nPara criar um data.frame, podemos usar a função `data.frame()`. Entretanto, o mais comum é importar dados de arquivos, como CSV, Excel, ou de bancos de dados. Falaremos sobre como importar dados na [próxima aula](03_importacao.qmd).\n\n\n### Listas\n\nAs listas são os objetos mais flexíveis do R: podemos armazenar diferentes tipos de objetos dentro de uma mesma lista. Por exemplo, podemos armazenar um vetor, uma matriz, um *data.frame*, e até mesmo outra lista dentro de uma lista.\n\nPodemos criar uma lista com a função `list()`. Os elementos da lista podem ser nomeados ou não. Vamos criar uma lista nomeada, com três elementos: o número π, o *data.frame* `airquality`, e o vetor `letters`:\n\n```{r}\nlista_exemplo <- list(numero_pi = pi,\n                      df_qualidade_do_ar = airquality,\n                      letras = letters)\nclass(lista_exemplo)\n```\n\nA função `str()` (*structure*) exibe a estrutura da lista, mostrando os elementos e seus tipos:\n\n```{r}\nstr(lista_exemplo)\n```\n\n## Sugestões de exercícios\n\n1. Crie um objeto chamado `meu_nome` e armazene seu nome nele. Depois, use a função `toupper()` para converter seu nome para letras maiúsculas e salve o resultado em um novo objeto chamado `nome_maiusculo`. Verifique se os dois objetos foram criados corretamente, consultando o painel *Environment*.\n\n2. Observe os nomes a seguir, e identifique se estão adequados para nomear objetos e colunas no R. Para os nomes que não estão adequados, explique o motivo:\n\n   - `dados_altura`\n   - `1_dados`\n   - `media-altura`\n   - `media_altura`\n   - `Média altura`\n\n3. Tente adivinhar a classe dos objetos a seguir, e depois confira no R usando a função `class()`:\n\n```{r}\n#| eval: false\npi\nletters\ndplyr::starwars\ndplyr::starwars$mass\ndplyr::starwars$species\ndplyr::starwars$films\n```\n\n\n## Sugestões de materiais\n\n- Livro [Zen do R](https://curso-r.github.io/zen-do-r/index.html):\n  - [Capítulo .RData e .Rhistory](https://curso-r.github.io/zen-do-r/rdata-rhistory.html)\n\n-   Livro [R para Ciência de Dados 2ed](https://cienciadedatos.github.io/pt-r4ds/):\n    -   [Fluxo de Trabalho: básico](https://cienciadedatos.github.io/pt-r4ds/workflow-basics.html)\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"toc-depth":5,"output-file":"02_conceitos_basicos_r.html"},"language":{"toc-title-document":"Índice","toc-title-website":"Nesta página","related-formats-title":"Outros formatos","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Fonte","other-links-title":"Outros Links","code-links-title":"Ligações de código","launch-dev-container-title":"Iniciar Dev Container","launch-binder-title":"Iniciar Binder","article-notebook-label":"Caderno do Artigo","notebook-preview-download":"Baixar Caderno","notebook-preview-download-src":"Descarregar código fonte","notebook-preview-back":"Voltar ao Artigo","manuscript-meca-bundle":"Arquivo MECA","section-title-abstract":"Resumo","section-title-appendices":"Apêndices","section-title-footnotes":"Notas de rodapé","section-title-references":"Referências","section-title-reuse":"Reuso","section-title-copyright":"Direito autoral","section-title-citation":"Citação","appendix-attribution-cite-as":"Por favor, cite este trabalho como:","appendix-attribution-bibtex":"BibTeX","appendix-view-license":"Ver Licença","title-block-author-single":"Autor","title-block-author-plural":"Autores","title-block-affiliation-single":"Afiliação","title-block-affiliation-plural":"Afiliações","title-block-published":"Data de Publicação","title-block-modified":"Data de Modificação","title-block-keywords":"Palavras-chave","callout-tip-title":"Dica","callout-note-title":"Nota","callout-warning-title":"Aviso","callout-important-title":"Importante","callout-caution-title":"Cuidado","code-summary":"Código","code-tools-menu-caption":"Código","code-tools-show-all-code":"Mostrar o código","code-tools-hide-all-code":"Esconder o código","code-tools-view-source":"Ver o código fonte","code-tools-source-code":"Código fonte","tools-share":"Share","tools-download":"Download","code-line":"Linha","code-lines":"Linhas","copy-button-tooltip":"Copiar para a área de transferência","copy-button-tooltip-success":"Copiada","repo-action-links-edit":"Editar essa página","repo-action-links-source":"Ver o código fonte","repo-action-links-issue":"Criar uma issue","back-to-top":"De volta ao topo","search-no-results-text":"Nenhum resultado","search-matching-documents-text":"documentos correspondentes","search-copy-link-title":"Copiar link para a busca","search-hide-matches-text":"Esconder correspondências adicionais","search-more-match-text":"mais correspondência neste documento","search-more-matches-text":"mais correspondências neste documento","search-clear-button-title":"Limpar","search-text-placeholder":"","search-detached-cancel-button-title":"Cancelar","search-submit-button-title":"Enviar","search-label":"Procurar","toggle-section":"Alternar seção","toggle-sidebar":"Alternar barra lateral","toggle-dark-mode":"Alternar modo escuro","toggle-reader-mode":"Alternar modo de leitor","toggle-navigation":"Alternar de navegação","crossref-fig-title":"Figura","crossref-tbl-title":"Tabela","crossref-lst-title":"Listagem","crossref-thm-title":"Teorema","crossref-lem-title":"Lema","crossref-cor-title":"Corolário","crossref-prp-title":"Proposição","crossref-cnj-title":"Conjetura","crossref-def-title":"Definição","crossref-exm-title":"Exemplo","crossref-exr-title":"Exercício","crossref-ch-prefix":"Capítulo","crossref-apx-prefix":"Apêndice","crossref-sec-prefix":"Seção","crossref-eq-prefix":"Equação","crossref-lof-title":"Lista de Figuras","crossref-lot-title":"Lista de Tabelas","crossref-lol-title":"Lista de Listagens","environment-proof-title":"Comprovação","environment-remark-title":"Comentário","environment-solution-title":"Solução","listing-page-order-by":"Ordenar por","listing-page-order-by-default":"Pré-selecionado","listing-page-order-by-date-asc":"Mais velho","listing-page-order-by-date-desc":"O mais novo","listing-page-order-by-number-desc":"Decrescente","listing-page-order-by-number-asc":"Crescente","listing-page-field-date":"Data","listing-page-field-title":"Título","listing-page-field-description":"Descrição","listing-page-field-author":"Autor","listing-page-field-filename":"Nome do arquivo","listing-page-field-filemodified":"Arquivo modificado","listing-page-field-subtitle":"Subtítulo","listing-page-field-readingtime":"Tempo de leitura","listing-page-field-wordcount":"Contagem de Palavras","listing-page-field-categories":"Categorias","listing-page-minutes-compact":"{0} minutos","listing-page-category-all":"Tudo","listing-page-no-matches":"Nenhum item correspondente","listing-page-words":"{0} palavras","listing-page-filter":"Filtro","draft":"Rascunho"},"metadata":{"lang":"pt","fig-responsive":true,"quarto-version":"1.5.57","page-navigation":true,"page-footer":{"border":true,"left":"Copyright 2024, Beatriz Milz e IPEA/COCD","right":[{"icon":"github","href":"https://github.com/ipeadata-lab/curso_r_intro_202409s"}]},"bibliography":["references.bib"],"editor":"source","theme":"cosmo","title":"Linguagem R","code-annotations":"hover"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}