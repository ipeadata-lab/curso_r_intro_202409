---
title: "Exemplo prático: Visualização"
subtitle: "Gráfico de colunas com proporção de pessoas por categoria de ocupação em cada estado"
code-annotations: hover
---

## Objetivo

Nesse exemplo, o objetivo é criar um gráfico de colunas para visualizar a proporção de pessoas por categoria de ocupação para cada estado, em um trimestre específico (nesse caso, utilizaremos os dados do trimestre mais recente)

Para isso, precisamos calcular a proporção de pessoas por categoria de ocupação, em cada estado. Depois, representaremos esses valores em um gráfico de colunas.

Esse é o gráfico que queremos criar:

![](graficos/grafico_ipeaplot.png)

## Pacotes necessários

```{r}
#| message: false
library(ggplot2) # <1>
library(dplyr) # <2>
library(ipeaplot) # <3>
```
1.  Pacote para visualização de dados
2.  Pacote para transformação de dados
3.  Pacote para o padrão Ipea

## Importando os dados

::: {.callout-important collapse="true"}
### Expanda para fazer download da base de dados

Caso não tenha o arquivo da tabela que utilizaremos, você pode baixar [aqui](https://github.com/ipeadata-lab/curso_r_intro_202409/raw/refs/heads/main/dados_output/sidra_4092_arrumado.rds), e copiar o arquivo para a pasta `dados_output` do seu projeto.

Outra opção é executar o código abaixo:

```{r}
#| eval: false
download.file(
  url = "https://github.com/ipeadata-lab/curso_r_intro_202409/raw/refs/heads/main/dados_output/sidra_4092_arrumado.rds",  # <1>
  destfile = "dados_output/sidra_4092_arrumado.rds", # <2>
  mode = "wb" # <3>
  )
```
1.  URL que desejamos baixar
2.  Caminho onde queremos baixar o arquivo (diretório + nome do arquivo + extensão do arquivo)
3.  Configuração que evita corromper arquivos binários.
:::

```{r}
#| message: false
dados <- readr::read_rds("dados_output/sidra_4092_arrumado.rds")

dados_tri_recente <- dados |>  
  filter(trimestre_inicio == max(trimestre_inicio)) # <1>
```
1.  Filtrando os dados para o trimestre mais recente

## Preparando os dados

É importante entender as categorias de ocupação que temos disponíveis na base de dados, se não podemos correr o risco de contar valores mais de uma vez:

![](images/07_categorias_ocupacao.png)

Portanto, para obter o total, precisaremos apenas das seguinte categorias de ocupação:

-   `mil_pessoas_forca_de_trabalho_ocupada`: Pessoas dentro da força de trabalho, que estão ocupadas.

-   `mil_pessoas_forca_de_trabalho_desocupada`: Pessoas dentro da força de trabalho, que estão desocupadas.

-   `mil_pessoas_fora_da_forca_de_trabalho`: Pessoas fora da força de trabalho.

Primeiro, vamos selecionar as colunas que utilizaremos para esse gráfico, para facilitar a preparação dos dados:

```{r}
dados_selecionados <- dados_tri_recente |> # <1>
  select( # <2>
    regiao,
    uf,
    trimestre,
    mil_pessoas_forca_de_trabalho_ocupada,
    mil_pessoas_forca_de_trabalho_desocupada,
    mil_pessoas_fora_da_forca_de_trabalho,
  ) # <2>

head(dados_selecionados) # <3>
```

1.  Utilizando os dados já filtrados para o trimestre mais recente.
2.  Selecionando as colunas que utilizaremos.
3.  Primeiras linhas da tabela resultante

Para calcular a proporção de pessoas por categoria de ocupação em cada estado, precisamos usar os valores que estão nas colunas `mil_pessoas_forca_de_trabalho_ocupada`, `mil_pessoas_forca_de_trabalho_desocupada` e `mil_pessoas_fora_da_forca_de_trabalho`. Porém, para fazer isso, precisamos transformar a tabela em formato longo.

Vamos transformar a tabela em formato longo, utilizando a função `pivot_longer()`:

```{r}
dados_longos <- dados_selecionados |> # <1>
  tidyr::pivot_longer( # <2>
    cols = tidyselect::starts_with("mil_pessoas"), # <3>
    names_to = "categoria", # <4>
    values_to = "mil_pessoas", # <5>
    names_prefix = "mil_pessoas_" # <6>
  ) #<2>

head(dados_longos) # <7>
```

1.  Utilizando os dados já filtrados para o trimestre mais recente, e selecionados com colunas relevantes
2.  Vamos transformar em formato longo para facilitar a criação do gráfico.
3.  Selecionando as colunas que começam com "mil_pessoas" para transformar em formato longo.
4.  Nome da nova coluna que conterá as categorias.
5.  Nome da nova coluna que conterá os valores.
6.  Prefixo que será removido do nome das colunas.
7.  Primeiras linhas da tabela resultante

Agora, podemos calcular a proporção de pessoas por categoria de ocupação em cada estado:

```{r}
dados_preparados <- dados_longos |> 
  group_by(regiao, uf, trimestre) |> # <1>
  mutate(perc = mil_pessoas / sum(mil_pessoas) * 100) |>  # <2>
  ungroup() # <3>

head(dados_preparados) # <4>
```

1.  Agrupando os dados por região, estado e trimestre.
2.  Calculando a proporção de pessoas por grupo (categoria).
3.  Removendo o agrupamento dos dados.
4.  Primeiras linhas da tabela resultante

## Criando o gráfico exploratório

Com os dados preparados, podemos criar o gráfico de colunas. Vamos primeiro criar um gráfico simples:

```{r}
#| label: exemplo-ggplot2-perc-exploratorio
dados_preparados |>  # <1>
  ggplot(aes(fill = categoria)) + # <2>
  aes(y = uf, x = perc) + # <3>
  geom_col() # <4>
```
1.  Vamos utilizar os dados preparados nas etapas anteriores.
2.  Iniciando um gráfico. Informando que queremos usar o `fill` (preenchimento) usando a categoria de ocupação.
3.  Definindo o eixo y como os estados e o eixo x como a proporção.
4.  Adicionando as colunas ao gráfico

É interessante melhorar as legendas dos eixos, pois estão no formato adequado para nomes de colunas (mas não a melhor forma de apresentar em um gráfico). **Isso requer trabalhar novamente na preparação dos dados!**

Vamos criar uma nova coluna com os nomes das categorias de ocupação por extenso:

```{r}
dados_grafico_1 <- dados_preparados |> 
  mutate( 
    categoria_label = case_match( # <1>
      categoria,
      "forca_de_trabalho_ocupada" ~ "Força de trabalho ocupada",
      "forca_de_trabalho_desocupada" ~ "Força de trabalho desocupada",
      "fora_da_forca_de_trabalho" ~ "Fora da força de trabalho"
    ) # <1>
  ) 
```
1.  Usando a função `case_math()` (similar ao `case_when()`), criamos uma nova coluna com os nomes das categorias de ocupação por extenso.


```{r}
#| label: exemplo-2-ggplot2-perc-exploratorio
dados_grafico_1 |> 
  ggplot(aes(fill = categoria_label)) + # <1>
  aes(y = uf, x = perc) + 
  geom_col()
```
1. Preenchendo a cor usando a nova coluna com os nomes das categorias de ocupação por extenso (`fill = categoria_label`).

Está um pouco melhor! Outra coisa interessante é reordenar os estados de acordo com a variável `perc` (proporção de pessoas em cada categoria). Isso fará com que o gráfico fique com aspecto "ordenado".

```{r}
dados_grafico_2 <- dados_grafico_1 |> 
  mutate( 
    categoria_fct = factor( # <1>
      categoria_label,
      levels = c(
        "Fora da força de trabalho",
        "Força de trabalho ocupada",
        "Força de trabalho desocupada"
      )), # <1>
    uf_fct = forcats::fct_reorder(uf, perc, min) # <2>
    ) 
```
1.  Transformando as categorias em fator, para que sigam a ordem que definimos ao serem apresentadas (e não em ordem alfabética).
2.  Reordenamos a coluna dos estados (`uf`) de acordo com a proporção de pessoas em cada categoria (`perc`), usando a função `min()` para ordenar usando os valores mínimos. Isso faz com que o gráfico fique com aspecto "ordenado".



```{r}
#| label: exemplo-3-ggplot2-perc-exploratorio
dados_grafico_2 |> 
  ggplot(aes(fill = categoria_fct)) + # <1>
  aes(y = uf_fct, x = perc) + # <2>
  geom_col()
```
1. O preenchimento da cor é feito com a nova coluna de categorias de ocupação em fator (*factor*).
2. Usamos a coluna `uf_fct` no eixo `y`.




## Customizando o gráfico

Vamos adicionar títulos, legendas e personalizar as cores do gráfico:

```{r}
#| label: exemplo-ggplot2-perc-customizado

trimestre_referencia <- unique(dados_grafico_2$trimestre) # <1>

grafico_proporcao <- dados_grafico_2 |> 
  ggplot(aes(fill = categoria_fct)) +  # <2>
  aes(x = uf_fct, y = perc) +  # <3>
  geom_col() + # <4>
  scale_fill_manual(values = c( "#5b5e62", "gray", "#cc1e00")) + # <5>
  labs( # <6>
    y = "Proporção (%)",
    x = "Estado",
    title = "Proporção por categoria de ocupação em cada estado",
    subtitle = paste0("Período: ", trimestre_referencia),
    fill = "Categoria",
    caption = "Dados da PNAD Contínua Trimestral - IBGE, obtidos no SIDRA."
  ) + # <6>
   theme_minimal()  + # <7>
  coord_flip() # <8>

grafico_proporcao
```
1.  Criando um objeto com o trimestre de referência. Isso será utilizado para adicionar informações ao gráfico.
2. Iniciando um gráfico, e incluindo o `aes()` com `fill` dentro da função `ggplot()`.
3. Definindo o eixo `x` como os estados e o eixo `y` como a proporção.
4. Adicionando a geometria de colunas ao gráfico, com a cor de preenchimento de acordo com a categoria de ocupação.
5.  Usamos uma escala de cores manual, onde podemos definir as cores usadas para cada categoria.
6.  Adicionando títulos e legendas ao gráfico.
7.  Aplicando um tema ao gráfico.
8.  Usando a função `coord_flip()` para inverter os eixos x e y.

Podemos salvar o gráfico em um arquivo, para utilizá-lo posteriormente:

```{r}
ggsave( # <1>
  filename = "graficos/grafico_proporcao_categoria_ocupacao.png", # <2>
  plot = grafico_proporcao, # <3>
  width = 10, # <4>
  height = 8, # <5> 
  dpi = 300 # <6>
)
```
1.  Função para salvar o gráfico.
2.  Nome do arquivo onde o gráfico será salvo.
3.  Objeto contendo o gráfico que será salvo.
4.  Largura do gráfico.
5.  Altura do gráfico.
6.  Resolução do gráfico.

## `{ipeaplot}`: criando graficos no padrão editorial do Ipea

O [`{ipeaplot}`](https://github.com/ipeadata-lab/ipeaplot) é um pacote em R desenvolvido pela equipe da Coordenação de Ciência de Dados (COCD). O objetivo é facilitar a padronização de gráficos e figuras seguindo as linhas editoriais do Ipea.

Ele foi desenhado para ser usado em conjunto com o pacote [{ggplot2}](https://ggplot2.tidyverse.org/). Atualmente, o `{ipeaplot}` inclui três conjuntos de funções principais:

1.  `theme_ipea()`: para formatação de elementos estilísticos da figura (eixos, fontes, linhas, grid, etc.);
2.  `scale_color_ipea()` e `scale_fill_ipea()`: selecionam paleta de cores dentro de um conjunto de opções utilizadas pelo Ipea;
3.  `save_pdf()` e `save_eps()`: salvam a figura com a extensão `.pdf` ou `.eps`, formatos possíveis de serem "modificados" durante o processo de edição das publicações pelo Editorial do Ipea.

Tivemos como inspiração outras instituições que criaram ferramentas parecidas como a UNHCR [{unhcrthemes}](https://github.com/unhcr-dataviz/unhcrthemes) e a BBC [{bbplot}](https://github.com/bbc/bbplot).

### Demonstração do pacote

Vamos primeiro instalar e chamar o pacote:

```{r}
#| eval: false

install.packages("ipeaplot") # <1>
library("ipeaplot") # <2>
```
1.  Instalar o `{ipeaplot}`.
2.  Chamar o pacote.

Agora aproveitaremos o exemplo anterior para demonstrar o funcionamnto do `{ipeaplot}`. Vamos começar a modificar a figura, usando o `{ipeaplot}` para ajustar ao "padrão do Ipea". Primeiro usamos a função `theme_ipea()` no lugar de `theme_minimal()`.

```{r}
#| label: grafico-ipeaplot-theme

grafico_ipeaplot <- grafico_proporcao +
  theme_ipea() # <1>

grafico_ipeaplot
```

1.  Adotando o tema padrão do Ipea

Apesar de sutis, temos alterações nas bordas, nas fontes e nas legendas da figura. Em seguida, vamos mudar a escala de cores para adotar o padrão "Texto para Discussão do Ipea" (paleta de cores azul):

```{r}
#| message: false
#| label: grafico-ipeaplot-paleta

grafico_ipeaplot <- grafico_ipeaplot +
  scale_fill_ipea(palette = 'Blue') # <1>

grafico_ipeaplot
```

1.  Usando a paleta de cores azul ("TD") 

Aí está, temos uma figura pronta para publicarmos nosso primeiro "Texto para Discussão" usando o R. Na verdade, nem tão pronta assim, pois o Ipea usa em títulos e legendas a família de fontes *Frutiger*. Como não é uma família com licença livre não podemos distribuir no `{ipeaplot}`. Porém, com o passo a seguir, o Editorial poderá, ao receber seu material para publicação, fazer os ajustes necessários na fonte dos títulos e legendas.

```{r}
#| eval: false

save_eps(grafico_ipeaplot, # <1>
         file.name = "graficos/grafico_ipeaplot.eps",
         width = 10,
         height = 8,
         dpi = 300
) # <1>

save_pdf(grafico_ipeaplot, # <2>
         file.name = "graficos/grafico_ipeaplot.pdf",
         width = 10,
         height = 8,
         dpi = 300
) # <2>
```
1. Salvando o gráfico em formato `.eps`
2. Salvando o gráfico em formato `.pdf`

```{r}
#| eval: true
#| echo: false
ggsave(
  filename = "graficos/grafico_ipeaplot.png",
  plot = grafico_ipeaplot,
  width = 10, 
  height = 8, 
  dpi = 300
)
```

Por trás das cortinas, as duas funções acima são semelhantes à `ggsave()`, usada anteriormente nesta aula. Porém, os atributos passados garantem que os gráficos serão salvos em formatos "editáveis" (`.eps` ou `.pdf`).
