---
# Conhecendo conceitos básicos do R
title: "Conceitos básicos do R"
---

Existem muitos conceitos básicos que são fundamentais para quem está começando a programar em R.

Nesta aula, vamos abordar algun conceitos considerados mais importantes para as próximas aulas.

## Objetos

No R, um objeto é uma estrutura de dados que armazena valores: podemos armazenar um valor único, um conjunto de valores, uma base de dados, entre outros.

É muito útil armazenar valores em objetos, pois podemos reutilizá-los em diferentes partes do código, sem precisar digitar o valor novamente.

### Objetos existentes no R

Existem alguns objetos já criados no R, como por exemplo: `pi`, que armazena o valor de π (com um número limitado de casas decimais), `letters`, que armazena as letras do alfabeto, entre outros:

```{r}
pi
letters
LETTERS
month.abb
month.name
```

### Criando um objeto

Para criar um objeto, precisamos definir um nome, e atribuir um valor à este nome. Para isso, usamos o operador de atribuição: `<-`. Um atalho para esse operador é o `Ctrl` + `-` no Windows, ou `Option` + `-` no Mac .

No exemplo a seguir, criamos um objeto chamado `nome_do_curso` e atribuímos a ele o texto `"Introdução à análise de dados no R"`:

```{r}
nome_do_curso <- "Introdução à análise de dados no R"
```

Podemos acessar o valor armazenado em um objeto digitando o nome do objeto:

```{r}
nome_do_curso
```

O objeto apenas será alterado se utilizarmos o operador de atribuição novamente. Por exemplo, a função `tolower()` transforma todas as letras de um texto em minúsculas:

```{r}
tolower(nome_do_curso)
```

Mas como não utilizamos a atribuição, o objeto `nome_do_curso` não foi alterado:

```{r}
nome_do_curso
```

Para alterar o objeto, precisamos atribuir o resultado da função `tolower()` ao objeto `nome_do_curso`:

```{r}
nome_do_curso <- tolower(nome_do_curso)
```

Agora, o objeto `nome_do_curso` foi alterado:

```{r}
nome_do_curso
```

Portanto, cuidado: ao criar um objeto com nome igual à outro objeto existente, o objeto anterior será substituído pelo novo objeto.

### Consultando os objetos criados

Para consultar os objetos criados, podemos usar a função `ls()` (*list objects*), que lista todos os objetos criados no ambiente de trabalho (*global environment*):

```{r}
ls()
```

Outra forma é consultar o *Painel Environment* no RStudio, que exibe todos os objetos criados, e permite acessar o valor de cada objeto:

![Captura de tela do RStudio: Painel Environment](images/02_environment.png){fig-align="center" width="50%"}

### Removendo objetos

Caso queira remover um objeto, podemos usar a função `rm()` (*remove objects*). Por exemplo, para remover o objeto `pkgs`:

```{r}
rm(nome_do_curso)
```

Podemos consultar novamente os objetos existentes e verificar se o objeto `pkgs` foi removido:

```{r}
ls()
```

Caso queira remover todos os objetos carregados, podemos reiniciar a sessão do R (clicando em *Session* \> *Restart R* no menu superior do RStudio), ou usar a função `rm(list = ls())`. Mas atenção: reiniciar a sessão do RStudio também irá "descarregar" todos os pacotes carregados; portanto, será necessário carregar os pacotes novamente.

```{r}
#| eval: false
rm(list = ls()) # remover todos os objetos do Global Environment
```

### Nomeando objetos

Existem regras e boas práticas para nomear objetos no R. As regras são obrigatórias: se não seguirmos, o código irá gerar um erro. As boas práticas são recomendações, com o objetivo de evitar erros futuros, e facilitar a leitura do código.

::: callout-tip
Recomendamos seguir essas recomendações não apenas para o nome dos objetos, mas também para nome de pastas e arquivos, nome de colunas, entre outros.
:::

#### Regras para nomear objetos no R

-   O nome não deve começar com um número. Ex: `1objeto` não é um nome válido.

```{r}
#| error: true
1objeto <- "exemplo"
```

-   O nome não deve começar com underline (`_`). Ex: `_objeto` não é um nome válido.

```{r}
#| error: true
_objeto <- "exemplo"
```

-   O nome do objeto não deve conter traços (`-`), pois o R interpreta o traço como um operador de subtração. Ex: `meu-objeto` não é um nome válido.

```{r}
#| error: true

objeto-1 <- "exemplo"
```

### Boas práticas para nomear objetos no R

-   O nome não deve começar com um ponto. Isso não gerará um erro, porém é contra-indicado pois essa sintaxe é utilizada para nomear objetos ocultos no R (portanto, não aparecerá no *Painel Environment*), e isso pode dificultar o acesso posteriormente. Ex: `.objeto` não deve ser usado.

-   Não utilizar acentos, cedilhas, ou outros caracteres especiais. Isso pode gerar problemas de compatibilidade com outros sistemas (chamamos de *encoding*). Ex: `aviões` não é um nome recomendado.

-   Não utilizar espaços, pois dificulta o acesso ao objeto posteriormente: precisaremos utilizar a crase em volta do nome do objeto para acessá-lo.

-   Existem diferentes estilos para nomear objetos[^1], como *snake_case*, onde todas as letras devem ser minúsculas, e as palavras separadas por underline. O importante é escolher um estilo e manter a consistência.

[^1]: A documentação da função `snakecase::to_any_case()` fornece uma lista de estilos de nomenclatura disponíveis no pacote `snakecase`.

<!-- -->

-   Utilizar nomes descritivos, que indiquem o conteúdo do objeto. Isso facilita a leitura do código, e a manutenção do código por outras pessoas.

## Tipos de objetos: vetores, matrizes, listas, data frames

Os objetos podem ser de diferentes tipos, como vetores, matrizes, listas, data frames, etc.

## Tipologia dos dados (lógico, numérico, caracter, fator)

## Tipo de dados e conversões

Existem várias funções para transformar variáveis de um tipo para outro, como `as.factor()`, `as.character()`, `as.numeric()`, `as.Date()`, etc.

## Valores faltantes (NA)

## Sugestões de materiais

-   Livro [R para Ciência de Dados 2ed](https://cienciadedatos.github.io/pt-r4ds/):
    -   [Fluxo de Trabalho: básico](https://cienciadedatos.github.io/pt-r4ds/workflow-basics.html)
