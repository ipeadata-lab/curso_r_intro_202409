---
# Manipulando dados com dplyr
title: "Transformando dados"
code-annotations: hover
---

## Introdução

Primeiramente, precisamos carregar o pacote `tidyverse` e a base de dados que vamos utilizar. A base de dados é a tabela 4092 do SIDRA, que apresenta dados sobre "pessoas de 14 anos ou mais de idade por condição em relação à força de trabalho e condição de ocupação"[^transformacao-dados], e foi baixada previamente (em [Importando dados](03_importacao.html#pacote-sidrar)).

[^transformacao-dados]: É interessante conhecer mais sobre a base de dados que estamos utilizando. O IBGE apresenta alguns conteúdos interessantes, como a página com informações sobre a [PNAD Contínua Trimestral](https://www.ibge.gov.br/estatisticas/sociais/trabalho/9173-pesquisa-nacional-por-amostra-de-domicilios-continua-trimestral.html?edicao=41004), e também a [página sobre desemprego](https://www.ibge.gov.br/explica/desemprego.php) que nos ajuda a entender as variáveis presentes.


Neste capítulo, vamos explorar as funções de transformação de dados do pacote `dplyr`, a partir da pergunta norteadora abaixo:

> Considerando que a tabela 4092 apresenta dados sobre "pessoas de 14 anos ou mais de idade por condição em relação à força de trabalho e condição de ocupação", **qual é a taxa de desocupação de cada estado e região do Brasil ao longo do tempo?**


```{r}
#| message: false
library(dplyr)
dados_brutos <- readr::read_rds("dados/sidrar_4092_bruto.rds") 
```


## Linhas, colunas e objetivo de análise

Uma pergunta que é sempre importante ter em mente ao analisar dados é: O que cada linha representa? Na estatística, esse é o conceito da **unidade observacional**.

O objeto `dados_brutos` apresenta uma linha para cada combinação das seguintes variáveis:

  - `Trimestre (Código)` / `Trimestre`

  - `Unidade da Federação` / `Unidade da Federação (Código)`

  - `Variável` / `Variável (Código)`
  
  - `Condição em relação à força de trabalho e condição de ocupação` e `Condição em relação à força de trabalho e condição de ocupação (Código)`

Podemos consultar os valores distintos possíveis no R, para garantir que estamos selecionando corretamente os valores de interesse.

As variáveis disponíveis na base de dados, e suas unidades de medida são:

```{r}
dados_brutos |>
  distinct(`Variável`, `Unidade de Medida`) # <1>
```
1. Colunas que queremos buscar os valores distintos

Podemos observar, cada linha representa uma combinação de trimestre, unidade da federação e variável. 

Outras perguntas relevantes ao analisar dados são:

  - Qual é a pergunta que eu quero responder com esses dados?
  - Quais são as variáveis que eu preciso para responder essa pergunta?


## Padronizar nome das colunas

É uma boa prática padronizar o nome das colunas de um data frame. Assim evitamos problemas de codificação de caracteres (*encoding*), facilitamos a legibilidade do código e evitamos possíveis erros ao acessar as colunas.

O pacote `janitor` possui a função `clean_names()`, que padroniza os nomes das colunas de um *data frame*. Ele substitui espaços por *underline* (`_`), remove caracteres especiais, e transforma o texto em minúsculo, garantindo maior consistência ao lidar com os dados. Isso evita erros ao acessar colunas.

```{r}
names(dados_brutos) # <1>
```
1. Checar o nome das colunas da base de dados


```{r}
dados_renomeados <- janitor::clean_names(dados_brutos)  # <1>

names(dados_renomeados)  # <2>
```
1. Limpar nomes das colunas da base de dados, e salvar em um novo objeto chamado `dados_renomeados`
2. Checar o nome das colunas da base de dados renomeada


## Pipe - Encadeando funções

Nos exemplos anteriores, utilizamos uma função por vez, para facilitar a compreensão de cada etapa. No entanto, à medida que nos familiarizamos com as funções, podemos encadear várias delas em um único fluxo de código usando o operador *pipe* (`%>%` ou `|>`). Isso torna o código mais conciso e elimina a criação de objetos intermediários desnecessários.

Porém, é importante ter cuidado para não criar sequências muito longas e difíceis de entender.


## Filtrando linhas (`filter()`)

Para responder à pergunta norteadora, não precisamos de todas as variáveis presentes na base de dados. Podemos **filtrar** as linhas que são relevantes para a análise, escolhendo as variáveis de interesse.

Nesse caso, podemos filtrar os dados onde a variável é igual à `"Pessoas de 14 anos ou mais de idade"`.

```{r}
dados_filtrados <- dados_renomeados |>
  filter(variavel == "Pessoas de 14 anos ou mais de idade")
```


Para verificar se o filtro foi feito corretamente, podemos checar o número de linhas de cada base de dados:

```{r}
nrow(dados_renomeados)
nrow(dados_filtrados)
```

Podemos verificar também os valores distintos para as colunas `variavel` e `unidade_de_medida` na base de dados `dados_filtrados`:

```{r}
dados_filtrados |>
  distinct(variavel, unidade_de_medida)
```

Agora sabemos que a base de dados `dados_filtrados` contém apenas dados sobre a variável `"Pessoas de 14 anos ou mais de idade"`, e que a unidade de medida da coluna `valor` é mil pessoas.

::: callout-tip
## Várias formas de filtrar as linhas
Como citamos anteriormente, em algumas situações existem várias formas diferentes de realizar uma tarefa.

No caso da função `filter()`, podemos utilizar diferentes operadores lógicos ou funções auxiliares para fazer filtros.

Os exemplos abaixo podem ser úteis para consulta futura!

Para esses exemplos, vamos utilizar a tabela `starwars` do pacote `dplyr`. Nessa tabela, cada linha representa um personagem de Star Wars, e as colunas representam diferentes características desses personagens.

#### Exemplos de operadores lógicos:

| Operador | Descrição | Exemplo | Interpretação |
|----|-------|--------|-----------|
| `==`     | Igual à  | `species == "Human"` | Todas as linhas cuja espécie é "Human" |
| `!=`     | Diferente de | `species != "Human"` | Todas as linhas cuja espécie **não é** "Human"|
| `>`      | Maior que | `height > 180` | Todas as linhas cuja altura é maior que 180 |
| `>=`     | Maior ou igual a | `height >= 180` | Todas as linhas cuja altura é maior ou igual a 180 |
| `<`      | Menor que | `height < 180` | Todas as linhas cuja altura é menor que 180 |
| `<=`     | Menor ou igual a | `height <= 180` | Todas as linhas cuja altura é menor ou igual a 180 |
| `%in%`   | Está em um conjunto | `species %in% c("Human", "Droid")` | Todas as linhas cuja espécie é "Human" ou "Droid" |
| `!`      | Negação | `!is.na(height)` | Todas as linhas cuja altura **não é** `NA` |
|`!` e `%in%` | Negação de um conjunto | `!(species %in% c("Human", "Droid"))` | Todas as linhas cuja espécie **não é** "Human" ou "Droid" |

#### Exemplos de funções auxiliares:

| Função | Descrição | Exemplo | Interpretação |
|----|-------|--------|-----------|
| `str_detect()` | Detecta padrões em textos | `str_detect(name, "Skywalker")` | Todas as linhas cujo nome contém "Skywalker" |
| `str_starts()` | Detecta padrões no início de textos | `str_starts(name, "Luke")` | Todas as linhas cujo nome começa com "Luke" |
| `str_ends()` | Detecta padrões no final de textos | `str_ends(name, "Vader")` | Todas as linhas cujo nome termina com "Vader" |
:::


## Selecionando colunas (`select()`)

Algumas colunas não são relevantes para responder à pergunta norteadora. Podemos **selecionar** apenas as colunas que vamos utilizar através da função `select()`:

```{r}
dados_selecionados <-
  dados_filtrados |>
  select(
    # colunas que queremos manter
    unidade_da_federacao,
    unidade_da_federacao_codigo,
    trimestre,
    trimestre_codigo,
    condicao_em_relacao_a_forca_de_trabalho_e_condicao_de_ocupacao,
    valor
  )

glimpse(dados_selecionados)
```


::: callout-tip
## Várias formas de selecionar colunas

Os exemplos abaixo podem ser úteis para consulta futura!

Para esses exemplos, vamos utilizar a tabela `starwars` do pacote `dplyr`:

#### Exemplos de seleção de colunas:
| Operador | Descrição | Exemplo | Interpretação |
|----|-------|--------|-----------|
| `:` | Seleciona um intervalo de colunas | `name:mass` | Todas as colunas entre `name` e `mass` |
| `c()` | Seleciona colunas específicas | `c(name, height, mass)` | Apenas as colunas `name`, `height` e `mass` |
| `-c()` | Exclui colunas específicas | `-c(name, height, mass)` | Todas as colunas, exceto `name`, `height` e `mass` |

#### Exemplos de funções auxiliares:
| Função | Descrição | Exemplo | Interpretação |
|----|-------|--------|-----------|
| `starts_with()` | Seleciona colunas que começam com um prefixo | `starts_with("h")` | Todas as colunas que começam com "h" |
| `ends_with()` | Seleciona colunas que terminam com um sufixo | `ends_with("color")` | Todas as colunas que terminam com "color" |
| `contains()` | Seleciona colunas que contêm um padrão | `contains("e")` | Todas as colunas que contêm "e" |
:::



## Renomeando colunas (`rename()`)

Podemos renomear colunas com a função `rename()`. Vamos renomear algumas colunas para facilitar o uso posteriormente:

```{r}
dados_renomeados_2 <- dados_selecionados |>
  rename(
    # colunas que queremos renomear: novo_nome = nome_atual
    condicao = condicao_em_relacao_a_forca_de_trabalho_e_condicao_de_ocupacao,
    valor_mil_pessoas = valor,
    uf = unidade_da_federacao,
    uf_codigo = unidade_da_federacao_codigo
  )

glimpse(dados_renomeados_2)
```





## Transformando a estrutura da tabela (`pivot_wider()` e `pivot_longer()`)

Ainda considerando nossa pergunta norteadora, queremos calcular a taxa de desocupação de cada estado e região do Brasil ao longo do tempo. Para isso, é mais fácil trabalhar com a tabela onde cada linha represente uma UF por trimestre, e as categorias da variável `condicao` sejam transformadas em colunas. 

Para fazer essa transformação, podemos usar a função `pivot_wider()`, do pacote `{tidyr}`.

A função `pivot_wider()` é útil quando queremos reorganizar uma tabela, transformando variáveis categóricas em novas colunas. Essa estrutura facilita cálculos comparativos e análises entre as diferentes categorias.

Por exemplo, no formato atual (dados longos), temos uma linha para cada combinação de UF, trimestre e condição de ocupação. Ao usarmos `pivot_wider()`, vamos transformar a tabela para que cada linha represente uma UF por trimestre, e as diferentes condições de ocupação (empregado, desocupado, etc.) se tornem colunas.

```{r}
dados_largos <- dados_renomeados_2 |> 
  tidyr::pivot_wider(
  names_from = condicao, # <1>
  values_from = valor_mil_pessoas, # <2>
  names_prefix = "mil_pessoas_" # <3>
)
```
1. `names_from = `: Nome da coluna de onde os **nomes** das novas colunas serão extraídos
2. `values_from = `: Nome da coluna de onde os **valores** para preencher as novas colunas serão extraídos 
3. `names_prefix = `: Podemos adicionar um texto como prefixo. Nesse caso, isso é opcional, mas é útil para ficar claro qual é a unidade de medida das variáveis.


```{r}
glimpse(dados_largos)
```

Agora temos uma tabela onde cada linha representa uma UF por trimestre, e as categorias da variável `condicao` se tornaram colunas. Porém agora temos colunas com nomes que estão com caracteres especiais, e podemos arrumar isso com a função `clean_names()`.

```{r}
dados_largos_renomeados <- janitor::clean_names(dados_largos)
glimpse(dados_largos_renomeados)
```

::: callout-info
As funções `pivot_longer()` e `pivot_wider()` são usadas para alternar entre dados 'longos' e 'largos'. Normalmente, dados longos são mais fáceis de visualizar, enquanto dados largos são melhores para realizar cálculos comparativos entre categorias. Para cada análise, sempre existe um formato mais apropriado a considerar.
:::


## Criando e transformando colunas (`mutate()`)

Para criar novas colunas, ou transformar colunas que já existem, podemos usar a função `mutate()`.

### Alterando os tipos de variáveis

A variável `uf_codigo` está armazenada como valor numérico. No entanto, como não realizaremos operações matemáticas com esses valores, é mais apropriado transformá-los em fatores, o que facilita a análise e previne erros em cálculos futuros.

Existem várias funções para transformar variáveis de um tipo para outro, como `as.factor()`, `as.character()`, `as.numeric()`, `as.Date()`,  etc.

```{r}
dados_tipo <- dados_largos_renomeados |>
  mutate(
    # nova variável:
    # nome_da_coluna = o que queremos calcular
    uf_codigo = as.factor(uf_codigo)
    )
```

### Calculando a taxa de desocupação

Para calcular a taxa de desocupação, precisamos criar uma nova variável representando a proporção de pessoas desocupadas em relação ao total de pessoas economicamente ativas.

```{r}
dados_com_proporcao <- dados_tipo |>
  mutate(
    prop_desocupacao = mil_pessoas_forca_de_trabalho_desocupada / mil_pessoas_forca_de_trabalho, # <1>
    perc_desocupacao = prop_desocupacao * 100 # <2>
  )
```
1. Calculando a proporção da desocupação: para cada linha, vamos dividir o valor `mil_pessoas_forca_de_trabalho_desocupada` por `mil_pessoas_forca_de_trabalho`. 
2. Multiplicando por 100 para transformar em percentual.


### Criando uma variável **trimestre_inicio**

Podemos criar uma nova variável chamada `trimestre_inicio` para  representar a data de início de cada trimestre. Para isso, precisaremos criar algumas outras variáveis "auxiliares" a partir da variável `trimestre_codigo`: `ano`, `trimestre_numero` e `trimestre_mes_inicio`.

```{r}
dados_com_trimestre <- dados_com_proporcao |>
  mutate(
    ano = stringr::str_sub(trimestre_codigo, 1, 4), # <1>
    ano = as.numeric(ano), # <2>
    
    trimestre_numero = stringr::str_sub(trimestre_codigo, 5, 6),  # <3>
    trimestre_numero = as.numeric(trimestre_numero), # <4>
    
    trimestre_mes_inicio = case_when( # <5>
      trimestre_numero == 1 ~ 1,
      trimestre_numero == 2 ~ 4,
      trimestre_numero == 3 ~ 7,
      trimestre_numero == 4 ~ 10
    ),
    
    trimestre_inicio = paste0(ano, "-", trimestre_mes_inicio, "-01"),  # <6>
    trimestre_inicio = as.Date(trimestre_inicio),  # <7>
    
    .after = trimestre_codigo # <8>
  ) |> 
  select(-trimestre_mes_inicio, -trimestre_numero) # <9>
```
1. Extrair os 4 primeiros caracteres do código do trimestre
2. Convertendo a coluna `ano` de texto para numérico
3. Extrair os 2 últimos caracteres do código do trimestre
4. Convertendo a coluna `trimestre_numero` de texto para numérico
5. Criar variável com o mês de início do trimestre
6. Criar variável com data de início do trimestre (neste momento, com tipo texto), colando os valores do mês e ano.
7. Convertendo a coluna `trimestre_inicio` de texto para Data
8. Queremos adicionar as colunas novas após a coluna `trimestre_codigo`
9. Removendo colunas que não serão necessárias


### Criando uma variável *dummy*

Uma variável *dummy* é uma variável binária que indica a presença ou ausência de algum atributo.

Podemos criar uma variável dummy para identificar os trimestres que ocorreram durante o período de emergência em saúde pública de importância nacional de COVID-19. Para isso, vamos criar uma nova variável chamada `periodo_pandemia`, que será `1` para os trimestres que ocorreram durante a pandemia, e `0` para os demais trimestres. A função que utilizaremos é a `case_when()` do pacote `{dplyr}`.

- Começo: [Fevereiro de 2020](https://bvsms.saude.gov.br/bvs/saudelegis/gm/2020/prt0188_04_02_2020.html)
- Final: [Abril de 2022](https://bvsms.saude.gov.br/bvs/saudelegis/gm/2022/prt0913_22_04_2022.html)

```{r}
dados_com_dummy <- dados_com_trimestre |> 
  mutate(
    periodo_pandemia = case_when(
    trimestre_codigo %in% c("202002", "202003", "202004",
                            "202101", "202102", "202103", "202104",
                            "202201") ~ 1, # <1>
    .default = 0 # <2>
  ))
```
1. Caso o `trimestre_codigo` sejam um dos listados dentro do vetor, queremos salvar o valor `1` na coluna `periodo_pandemia`.
2. O valor padrão é `0`. Se nenhuma regra listada contemplar alguma linha, a coluna criada (`periodo_pandemia`) receberá o valor padrão (`0`). Ou seja, as linhas cujo período que não estão no vetor listado receberão o valor `0`. 


## Ordenando as linhas (`arrange()`)

A base atual está ordada por trimestre e código da unidade da federação. Para facilitar a análise, podemos ordenar as linhas segundo a proporção de desocupação calculada no passo anterior, usando a função `arrange()`:

```{r}
dados_com_dummy |>
  select(trimestre_codigo, uf, perc_desocupacao) |> # <1>
  arrange(perc_desocupacao) # <2>
```
1. Selecionando colunas relevantes, para facilitar ver o resultado
2. Ordenar linhas usando a coluna `perc_desocupacao`, de forma crescente


A função `arrange()` ordena, por padrão, de forma crescente. Podemos ordenar de forma decrescente, utilizando a função `desc()` junto à coluna que queremos ordenar de forma decrescente:

```{r}
dados_com_dummy |>
  select(trimestre_codigo, uf, perc_desocupacao) |> # <1>
  arrange(desc(perc_desocupacao)) # <2>
```
1. Selecionando colunas relevantes, para facilitar ver o resultado
2. Ordenar linhas usando a coluna `perc_desocupacao`, de forma decrescente


Nesse caso, as linhas ficaram ordenadas de forma decrescente, de acordo com a proporção de desocupação. Porém os trimestres não estão ordenados! A função `arrange()` permite que ordenemos por mais de uma coluna, e a ordem de prioridade é dada pela ordem em que as colunas são passadas para a função:

```{r}
dados_ordenados <- dados_com_dummy |> 
  arrange(
  # colunas que queremos usar ordenar
  trimestre_codigo, desc(prop_desocupacao)
)

glimpse(dados_ordenados)
```

Agora temos a base de dados ordenada por trimestre, e dentro de cada trimestre, por proporção de desocupação (de forma descrecente).


## Unindo duas bases de dados (`left_join()`)

Unir duas tabelas é algo comum em análises de dados. Usamos operações do tipo *join* para combinar duas tabelas, utilizando uma ou mais colunas como "chave". As colunas do tipo chave têm valores comuns nas duas tabelas e são usadas para identificar as linhas correspondentes entre elas.

O  pacote `{dplyr}` fornece um conjunto de funções para realizar diferentes tipos de uniões, como `left_join()`, `inner_join()`, `full_join()`, entre outras.

A função `left_join()` é a mais frequentemente usada: ela mantém todas as linhas da primeira tabela e adiciona colunas da segunda tabela onde houver correspondência.

Um exemplo comum de uso é quando temos dados por município ou estado, e desejamos visualizar esses dados em um mapa. Para isso, precisamos de informações geoespaciais, como a delimitação geográfica de cada município ou estado. Podemos usar o `left_join()` para combinar esses dados geoespaciais com os dados que queremos visualizar.

Vamos usar o pacote `{geobr}` para carregar as geometrias dos estados brasileiros.

::: callout-tip
O pacote `{geobr}` facilita o acesso a dados geoespaciais do Brasil, como estados, municípios e outras divisões administrativas. Ele é muito útil quando queremos fazer análises geoespaciais, já que oferece dados geográficos prontos para uso.

Podemos utilizar a função `read_state()` para carregar as geometrias dos estados brasileiros. Isso nos permite combinar essas geometrias com outros dados, como taxas de desocupação, e criar mapas que facilitam a visualização de padrões regionais.
:::

```{r}
#| message: false
geo_estados <- geobr::read_state(showProgress = FALSE)
glimpse(geo_estados)
```


O `left_join()` é usado aqui para combinar os dados do SIDRA com os dados das delimitações das UFs. Cada linha do nosso dataset de desocupação será associada à respectiva geometria da UF, permitindo visualizarmos as proporções de desocupação por UF em um mapa. Esse tipo de operação é comum quando queremos identificar padrões regionais.


É importante garantir que as colunas usadas na combinação de tabelas (o argumento `by` do `left_join()`) tenham o mesmo tipo de dado. Podemos verificar o tipo de dado de cada coluna com a função `class()`:

```{r}
class(geo_estados$code_state)
class(dados_ordenados$uf_codigo)
```

Neste caso, as colunas que queremos usar como chave são de tipos diferentes (numérico e fator), O `left_join()` não conseguirá fazer a correspondência corretamente, e a função gerará um erro:

```{r}
#| error: true
left_join(geo_estados, dados_ordenados, by = join_by(code_state == uf_codigo))
```

No exemplo, podemos transformar a coluna `code_state` em fator usando `mutate()`. Assim, garantimos que as colunas usadas no argumento `by` sejam do mesmo tipo e possam ser corretamente combinados.

```{r}
dados_geo <- geo_estados |> 
  mutate(code_state = as.factor(code_state)) |> 
  left_join(dados_ordenados, by = join_by(code_state == uf_codigo))

glimpse(dados_geo)
```

Agora temos uma base de dados que combina os dados do SIDRA com as geometrias dos estados brasileiros.

Combinar dados dessa forma nos permite fazer visualizações geoespaciais, como um mapa de calor das taxas de desocupação por estado. Isso facilita a identificação de padrões regionais, ajudando na interpretação dos dados.

Não falaremos nesse momento sobre como criar visualizações e mapas, pois isso será abordado em aulas futuras. Mas podemos adiantar um exemplo de como criar um mapa apresentando as proporções de desocupação por estado:

```{r}
#| label: geobr-mapa
#| echo: true
#| code-fold: true
library(ggplot2)
dados_geo |> 
  filter(trimestre_codigo == "202402") |>
  ggplot() +
  geom_sf(aes(fill = perc_desocupacao)) +
  theme_light() +
  scale_fill_viridis_c() +
  labs(title = "Percentual de desocupação por UF no 2º trimestre de 2024",
       fill = "Desocupação (%)") +
  theme(legend.position = "bottom")
```


## Salvando a base de dados preparada

Por fim, podemos salvar a base de dados preparada para usar nas próximas etapas. Assim não precisamos repetir todo o processo de limpeza e transformação de dados a cada vez que quisermos fazer uma análise.

É recomendável salvar a base de dados em um formato que preserve a estrutura dos dados, como `.rds`.

```{r}
#| eval: false
# Salvando os dados preparados
readr::write_rds(dados_ordenados, "dados_output/sidra_4092_arrumado.rds")
```

## Exercícios sugeridos

Utilizando a base de dados que criamos nessa aula (com a taxa de desocupação calculada), responda as perguntas abaixo.

```{r}
#| echo: false
#| eval: false
dados <- readr::read_rds("dados_output/sidra_4092_arrumado.rds")
```

1. Crie uma nova tabela com apenas as colunas `uf`, `trimestre`, `perc_desocupacao` e `periodo_pandemia`.

2. Qual foi a combinação de Estado/Trimestre que teve a maior taxa de desocupação...
  - a) Durante a pandemia?
  - b) Fora do período de pandemia?
  
3. Considerando o trimestre mais recente disponível, qual é o estado com a maior taxa de desocupação? E a maior?


## Sugestões de materiais

- Livro [R para Ciência de Dados 2ed](https://cienciadedatos.github.io/pt-r4ds/):
  - [Transformação de dados](https://cienciadedatos.github.io/pt-r4ds/data-transform.html)
  - [Organização de dados](https://cienciadedatos.github.io/pt-r4ds/data-tidy.html)
  
