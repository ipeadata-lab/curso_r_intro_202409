---
title: "Regressão linear"
code-annotations: "hover"
cache: true
---

## Introdução

A regressão linear é uma técnica estatística que busca modelar a relação entre uma variável dependente e uma ou mais variáveis independentes. A regressão linear simples é utilizada quando temos apenas uma variável independente, enquanto a regressão linear múltipla é utilizada quando temos mais de uma variável independente.

Nesta aula, exploraremos:

  - Como ajustar um modelo de regressão linear simples e múltipla no R.
  
  - Como extrair informações sobre o modelo ajustado.
  
  - Como visualizar o ajuste do modelo.
  
  - Como verificar os pressupostos da regressão linear.
  
  - Como extrair tabelas de regressão para apresentação dos resultados.
  
::: callout-warning

O objetivo desta aula **não** é aprofundar nos conceitos teóricos da regressão linear, mas sim apresentar como ajustar e explorar funções que permitem ajustar modelos de regressão linear no R. Caso você tenha dúvidas sobre os conceitos teóricos, consulte os [materiais sugeridos no final desta aula](#sugest%C3%B5es-de-materiais).
:::

## Instalando pacotes

Para esta aula, utilizaremos alguns pacotes do R, que talvez não tenham sido instalados anteriormente:

```{r}
#| eval: false
pacotes <- c("abjData", "broom", "car", "fixest", "report")
install.packages(pacotes)
```


## Carregando pacotes

Vamos carregar o pacote `{ggplot2}`, que utilizamos anteriormente para elaborar gráficos:

```{r}
#| message: false
library(ggplot2)
```



## Importando os dados

Nesta aula, utilizaremos os dados do [Programa das Nações Unidas para o Desenvolvimento (PNUD)](http://www.br.undp.org/content/brazil/pt/home/idh0/rankings/idhm-municipios-2010.html) sobre o Índice de Desenvolvimento Humano Municipal (IDHM) e suas dimensões para os municípios brasileiros em 2010. Esses dados estão disponíveis no pacote `abjData`.

Vamos filtrar os dados mais recentes disponíveis (censo de 2010) e salvar em um objeto chamado `pnud_muni_2010`:

```{r}
pnud_muni_2010 <- abjData::pnud_muni |> 
 dplyr::filter(ano == 2010) 
```

**Obs:** O pacote `abjData` contém dados do PNUD para os anos de 1991, 2000 e 2010. Utilizamos apenas os dados de 2010 nesta aula, pois os dados não são independentes entre si. Se quisermos ajustar um modelo com dados de diferentes anos, seria necessário ajustar um modelo longitudinal (em painel), o que foge do escopo desta aula.

### Dicionário dos dados

A tabela `pnud_muni_2010` contém muitas variáveis, e alguns nomes não são muito descritivos. Podemos consultar o significado de cada variável consultando a tabela `pnud_siglas` do pacote `{abjData}`:

```{r}
nomes_col_pnud_muni_2010 <- abjData::pnud_siglas |> 
  dplyr::filter(sigla %in% names(pnud_muni_2010))

nomes_col_pnud_muni_2010 |> 
  DT::datatable()
```

## Regressão linear simples

Existem várias maneiras de ajustar um modelo de regressão linear no R: podemos usar funções do R base, ou funções de outros pacotes, como o `{fixest}`.

Vamos ajustar um modelo de regressão linear simples utilizando a função  função `lm()`, do R base.


Queremos explorar a seguinte pergunta: **O que explica a mortalidade infantil?**

Uma primeira variável que podemos explorar é o acesso à água encanada.

```{r}
nomes_col_pnud_muni_2010 |> 
  filter(sigla == "mort5" | sigla == "t_agua") |> 
  knitr::kable()
```

Vamos ajustar um modelo de regressão linear simples para investigar a relação entre a taxa de mortalidade infantil (até 5 anos de idade) (`mort5`) e o percentual da população que vive em domicílios com água encanada (`t_agua`) nos municípios brasileiros em 2010.

Então, temos que:

- Variável dependente (`y`): `mort5`

- Variável independente (`x`): `t_agua`

### Visualizando a relação entre as variáveis

Primeiramente, podemos visualizar a relação entre as variáveis. Caso você não lembre como fazer isso, consulte a [aula sobre visualização de dados](07_visualizacao.qmd).

```{r}
#| label: lm-simples-relacao-variaveis
pnud_muni_2010 |> # <1>
  ggplot() + # <2>
  aes(x = t_agua, y = mort5) + # <3>
  geom_point(alpha = 0.5) + # <4>
  theme_light()
```
1. Utilizamos os dados do objeto `pnud_muni_2010`.
2. Iniciamos um gráfico.
3. Definimos as variáveis `x` e `y`.
4. Adicionamos a geometria de pontos ao gráfico. O argumento `alpha = 0.5` define a transparência dos pontos em 50%.



### Ajustando o modelo

Uma maneira é usar a função `lm()`, de *linear model* (modelo linear), para ajustar o modelo de regressão linear simples. Essa função recebe como argumentos a fórmula do modelo (`y ~ x`, lê-se `y` em função de `x`) e os dados (argumento `data`).


```{r}
modelo_linear <- lm(mort5 ~ t_agua, data = pnud_muni_2010)
```

### Explorando o modelo ajustado

Podemos explorar o resultado do modelo ajustado de várias formas!

A função `summary()` nos fornece um resumo do modelo ajustado:

```{r}
summary(modelo_linear)
```

Podemos extrair uma *tibble* com informações sobre o modelo ajustado utilizando as funções `tidy()` e `glance()` do pacote `{broom}`. A função `broom::tidy()` nos fornece informações sobre os coeficientes do modelo ajustado.

```{r}
broom::tidy(modelo_linear) |> 
  knitr::kable()
```
Os resultados da função `broom::glance()` são relativos ao ajuste do modelo, sendo útil para comparar diferentes modelos.

```{r}
broom::glance(modelo_linear)|> 
  knitr::kable()
```


A função `report::report()` nos fornece um relatório completo sobre o modelo ajustado:

```{r}
report::report(modelo_linear) 
```

A tradução do relatório gerado pela função `report::report()` é:


> Ajustamos um modelo linear (estimado usando MQO - Mínimos Quadrados Ordinários) para prever `mort5` com base em `t_agua` (fórmula: `mort5 ~ t_agua`). O modelo explica uma proporção significativa e substancial da variância (R² = 0,28, F(1, 5563) = 2209,54, p < 0,001, R² ajustado = 0,28). O intercepto do modelo, correspondente a `t_agua = 0`, é 44,23 (IC 95% [43,27, 45,19], t(5563) = 90,27, p < 0,001). Dentro deste modelo:

> - O efeito de `t_agua` é estatisticamente significativo e negativo (beta = -0,27, IC 95% [-0,28, -0,25], t(5563) = -47,01, p < 0,001; Beta padronizado = -0,53, IC 95% [-0,56, -0,51]).

> Os parâmetros padronizados foram obtidos ajustando o modelo a uma versão padronizada do conjunto de dados. Os intervalos de confiança de 95% (ICs) e os valores-p foram calculados usando uma aproximação da distribuição t de Wald.



### Interpretação dos resultados

A equação ajustada é da forma:


$$
mort5 = 44.23 - 0.27 \times tagua
$$


- O coeficiente de `t_agua` (-0.27) indica que, para cada aumento de 1% no percentual de água encanada, espera-se uma diminuição de 0.27 na taxa de mortalidade infantil.

- O intercepto (44.23) significa que, se o percentual de água encanada fosse zero, a mortalidade infantil seria de 44,23 por 1000 crianças.

- O valor de \(R^2 = 0.28\) indica que aproximadamente 28% da variação na mortalidade infantil é explicada pela variável `t_agua`.


### Visualizando o ajuste do modelo

Para adicionar a linha de regressão ao gráfico anterior, podemos criar uma nova tabela com as predições do modelo linear e os resíduos:

```{r}
pnud_muni_2010_predicted <- pnud_muni_2010 |>
  mutate(
    valores_ajustados = predict(modelo_linear), # <1>
    residuos = mort5 - valores_ajustados # <2>
  ) 
```
1. Adiciona uma nova coluna chamada `valores_ajustados` ao data.frame contendo as predições do modelo linear, utilizando a função `predict()`.
2. Adiciona uma nova coluna chamada `residuos` ao data.frame contendo os resíduos do modelo linear: a diferença entre os valores reais (mort5) e os valores previstos pelo modelo.

Agora, podemos adicionar a linha de regressão ao gráfico anterior:

```{r}
#| label: lm-simples-reta
pnud_muni_2010_predicted |> 
  ggplot() + 
  aes(x = t_agua, y = mort5) + 
  geom_point(alpha = 0.5) + 
  geom_line(aes(y = valores_ajustados), color = "blue", linewidth = 1) + # <1>
  theme_light()
```
1. Adiciona a linha de regressão com base nas predições do  modelo.

::: {.callout-warning collapse=TRUE}
### `geom_smooth()`

A função `geom_smooth()` do pacote `{ggplot2}` também pode ser utilizada para adicionar uma linha de regressão ao gráfico. 

No entanto, a função `geom_smooth()` não utiliza as predições do modelo linear que ajustamos, e sim realiza um ajuste (utilizando alguns métodos que podem ser consultados na documentação): 

```{r}
#| label: lm-simples-geom-smooth
pnud_muni_2010 |> 
  ggplot() + 
  aes(x = t_agua, y = mort5) + 
  geom_point(alpha = 0.5) + 
  geom_smooth(method = "lm", se = FALSE, color = "blue") + 
  theme_light()
```

:::


### Pressupostos da Regressão Linear

Agora que sabemos ajustar um modelo de regressão linear simples, é importante verificar se os pressupostos da regressão linear estão sendo respeitados.

1. **Linearidade**: A relação entre a variável dependente e a(s) variável(is) independente(s) deve ser linear.
2. **Independência dos Erros**: Os erros devem ser independentes uns dos outros. Não queremos que eles tenham uma ordem ou relação com as variáveis independentes.
3. **Homoscedasticidade**: A variância dos erros deve ser constante ao longo de todos os níveis da variável independente.
4. **Normalidade dos Erros**: Os erros devem seguir uma distribuição normal.

Podemos verificar esses pressupostos utilizando gráficos de diagnóstico, que discutiremos em breve.

###  Diagnóstico de Modelos

Utilizar gráficos de diagnóstico ajuda a verificar se os pressupostos do modelo estão sendo respeitados. Vamos explorar alguns gráficos de diagnóstico, que são úteis para tomar decisões sobre o modelo!

- **Histograma dos resíduos**: para que os pressupostos sejam satisfeitos, espera-se uma uma distribuição aproximadamente normal.

```{r}
pnud_muni_2010_predicted |> 
  ggplot(aes(x = residuos)) +
  geom_histogram(aes(y = after_stat(density)), bins = 30, fill = "blue", alpha = 0.5) +
  geom_density() + 
  theme_light()
```

- **Gráfico de resíduos vs valores ajustados**: para que os pressupostos sejam satisfeitos, espera-se que os resíduos estejam distribuídos aleatoriamente.

A interpretação do gráfico a seguir é de que talvez o modelo linear não seja o mais adequado para ajustar esses dados, pois os resíduos não estão distribuídos aleatoriamente.

```{r}
car::residualPlot(modelo_linear)
```

- **Teste de homocedasticidade**: para que os pressupostos sejam satisfeitos, espera-se que a variância dos erros seja constante ao longo de todos os níveis da variável independente. Para verificar isso, podemos utilizar a função `car::ncvTest()`, que testa a homocedasticidade dos resíduos.

Neste modelo, a homocedasticidade não é satisfeita.

```{r}
car::ncvTest(modelo_linear)
```


- **Q-Q plot para normalidade dos resíduos**: para que os pressupostos sejam satisfeitos, os pontos devem seguir a linha reta, o que indicaria que os resíduos seguem uma distribuição normal.

```{r}
car::qqPlot(modelo_linear)
```



### Extraindo tabelas de regressão

Podemos extrair tabelas de regressão para apresentar os resultados do modelo ajustado.  Existem várias maneiras de fazer isso.


Vamos utilizar a função `stargazer::stargazer()`. Essa função pode gerar tabelas de regressão em diferentes formatos, como texto, HTML, LaTeX e Markdown.


```{r}
stargazer::stargazer(modelo_linear, type = "text")
```


Cuidado: observe que na última linha (`Note: *p<0.1; **p<0.05; ***p<0.01`) o resultado em HTML apresenta asteriscos a menos do que o resultado em texto. Isso ocorre porque o Markdown interpreta o asterisco como um comando de itálico (`*`) ou negrito (`**`) (e utilizamos Markdown para a construção deste site). 

```{r}
#| results: asis
stargazer::stargazer(modelo_linear, type = "html")
```


### Interpretação final

- 


## Regressão linear múltipla

Em breve!

```{r}
#| eval: false
#| echo: false
# - Água
# - Renda
# - Região
# modelo_linear_multiplo <- lm(mort5 ~ t_agua + rdpc * ufn, data = pnud_muni_2010) # interação
# summary(modelo_linear_multiplo)
```


## Sugestões de exercícios

Em breve!


## Sugestões de materiais

- [Livro *Introduction to Modern Statistics*](https://openintro-ims.netlify.app) de Mine Çetinkaya-Rundel e Johanna Hardin. 
  - [Regressão linear simples](https://openintro-ims.netlify.app/model-slr)
  - [Regressão linear múltipla](https://openintro-ims.netlify.app/model-mlr)
  
  
- [Introduction to Econometrics with R](https://www.econometrics-with-r.org/) - conteúdo mais avançado, para quem tem experiência em econometria.